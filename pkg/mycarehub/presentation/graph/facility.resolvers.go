package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"

	"github.com/savannahghi/mycarehub/pkg/mycarehub/application/dto"
	"github.com/savannahghi/mycarehub/pkg/mycarehub/domain"
	"github.com/savannahghi/scalarutils"
)

// CreateFacilities is the resolver for the createFacilities field.
func (r *mutationResolver) CreateFacilities(ctx context.Context, input []*dto.FacilityInput) ([]*domain.Facility, error) {
	return r.mycarehub.Facility.CreateFacilities(ctx, input)
}

// DeleteFacility is the resolver for the deleteFacility field.
func (r *mutationResolver) DeleteFacility(ctx context.Context, identifier dto.FacilityIdentifierInput) (bool, error) {
	r.checkPreconditions()
	return r.mycarehub.Facility.DeleteFacility(ctx, &identifier)
}

// ReactivateFacility is the resolver for the reactivateFacility field.
func (r *mutationResolver) ReactivateFacility(ctx context.Context, identifier dto.FacilityIdentifierInput) (bool, error) {
	r.checkPreconditions()
	return r.mycarehub.Facility.ReactivateFacility(ctx, &identifier)
}

// InactivateFacility is the resolver for the inactivateFacility field.
func (r *mutationResolver) InactivateFacility(ctx context.Context, identifier dto.FacilityIdentifierInput) (bool, error) {
	r.checkPreconditions()
	return r.mycarehub.Facility.InactivateFacility(ctx, &identifier)
}

// AddFacilityContact is the resolver for the addFacilityContact field.
func (r *mutationResolver) AddFacilityContact(ctx context.Context, facilityID string, contact string) (bool, error) {
	r.checkPreconditions()
	return r.mycarehub.Facility.AddFacilityContact(ctx, facilityID, contact)
}

// AddFacilityToProgram is the resolver for the addFacilityToProgram field.
func (r *mutationResolver) AddFacilityToProgram(ctx context.Context, facilityIDs []string, programID string) (bool, error) {
	r.checkPreconditions()
	return r.mycarehub.Facility.AddFacilityToProgram(ctx, facilityIDs, programID)
}

// BookService is the resolver for the bookService field.
func (r *mutationResolver) BookService(ctx context.Context, facilityID string, serviceIDs []string, time scalarutils.DateTime) (*domain.Booking, error) {
	return r.mycarehub.Facility.BookService(ctx, facilityID, serviceIDs, &time)
}

// VerifyBookingCode is the resolver for the verifyBookingCode field.
func (r *mutationResolver) VerifyBookingCode(ctx context.Context, bookingID string, code string, programID string) (bool, error) {
	return r.mycarehub.Facility.VerifyBookingCode(ctx, bookingID, code, programID)
}

// ListFacilities is the resolver for the listFacilities field.
func (r *queryResolver) ListFacilities(ctx context.Context, searchTerm *string, filterInput []*dto.FiltersInput, paginationInput dto.PaginationsInput) (*domain.FacilityPage, error) {
	return r.mycarehub.Facility.ListFacilities(ctx, searchTerm, filterInput, &paginationInput)
}

// RetrieveFacility is the resolver for the retrieveFacility field.
func (r *queryResolver) RetrieveFacility(ctx context.Context, id string, active bool) (*domain.Facility, error) {
	r.checkPreconditions()
	return r.mycarehub.Facility.RetrieveFacility(ctx, &id, active)
}

// RetrieveFacilityByIdentifier is the resolver for the retrieveFacilityByIdentifier field.
func (r *queryResolver) RetrieveFacilityByIdentifier(ctx context.Context, identifier dto.FacilityIdentifierInput, isActive bool) (*domain.Facility, error) {
	r.checkPreconditions()
	return r.mycarehub.Facility.RetrieveFacilityByIdentifier(ctx, &identifier, isActive)
}

// ListProgramFacilities is the resolver for the listProgramFacilities field.
func (r *queryResolver) ListProgramFacilities(ctx context.Context, programID *string, searchTerm *string, filterInput []*dto.FiltersInput, paginationInput dto.PaginationsInput) (*domain.FacilityPage, error) {
	return r.mycarehub.Facility.ListProgramFacilities(ctx, programID, searchTerm, filterInput, &paginationInput)
}

// GetNearbyFacilities is the resolver for the getNearbyFacilities field.
func (r *queryResolver) GetNearbyFacilities(ctx context.Context, locationInput *dto.LocationInput, serviceIDs []string, paginationInput dto.PaginationsInput) (*domain.FacilityPage, error) {
	return r.mycarehub.Facility.GetNearbyFacilities(ctx, locationInput, serviceIDs, paginationInput)
}

// GetServices is the resolver for the getServices field.
func (r *queryResolver) GetServices(ctx context.Context, paginationInput dto.PaginationsInput) (*dto.FacilityServiceOutputPage, error) {
	return r.mycarehub.Facility.GetServices(ctx, &paginationInput)
}

// SearchFacilitiesByService is the resolver for the searchFacilitiesByService field.
func (r *queryResolver) SearchFacilitiesByService(ctx context.Context, locationInput *dto.LocationInput, serviceName string, paginationInput dto.PaginationsInput) (*domain.FacilityPage, error) {
	return r.mycarehub.Facility.SearchFacilitiesByService(ctx, locationInput, serviceName, &paginationInput)
}
