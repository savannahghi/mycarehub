package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.21 DO NOT EDIT.

import (
	"context"

	"github.com/savannahghi/feedlib"
	"github.com/savannahghi/mycarehub/pkg/mycarehub/application/dto"
	"github.com/savannahghi/mycarehub/pkg/mycarehub/domain"
)

// AcceptTerms is the resolver for the acceptTerms field.
func (r *mutationResolver) AcceptTerms(ctx context.Context, userID string, termsID int) (bool, error) {
	r.checkPreconditions()
	return r.mycarehub.Terms.AcceptTerms(ctx, &userID, &termsID)
}

// SetNickName is the resolver for the setNickName field.
func (r *mutationResolver) SetNickName(ctx context.Context, userID string, nickname string) (bool, error) {
	r.checkPreconditions()
	return r.mycarehub.User.SetNickName(ctx, userID, nickname)
}

// CompleteOnboardingTour is the resolver for the completeOnboardingTour field.
func (r *mutationResolver) CompleteOnboardingTour(ctx context.Context, userID string, flavour feedlib.Flavour) (bool, error) {
	r.checkPreconditions()
	return r.mycarehub.User.CompleteOnboardingTour(ctx, userID, flavour)
}

// CreateOrUpdateClientCaregiver is the resolver for the createOrUpdateClientCaregiver field.
func (r *mutationResolver) CreateOrUpdateClientCaregiver(ctx context.Context, caregiverInput *dto.CaregiverInput) (bool, error) {
	return r.mycarehub.User.CreateOrUpdateClientCaregiver(ctx, caregiverInput)
}

// RegisterClient is the resolver for the registerClient field.
func (r *mutationResolver) RegisterClient(ctx context.Context, input *dto.ClientRegistrationInput) (*dto.ClientRegistrationOutput, error) {
	return r.mycarehub.User.RegisterClient(ctx, input)
}

// RegisterStaff is the resolver for the registerStaff field.
func (r *mutationResolver) RegisterStaff(ctx context.Context, input dto.StaffRegistrationInput) (*dto.StaffRegistrationOutput, error) {
	return r.mycarehub.User.RegisterStaff(ctx, input)
}

// OptOut is the resolver for the optOut field.
func (r *mutationResolver) OptOut(ctx context.Context, phoneNumber string, flavour feedlib.Flavour) (bool, error) {
	return r.mycarehub.User.Consent(ctx, phoneNumber, flavour)
}

// SetPushToken is the resolver for the setPushToken field.
func (r *mutationResolver) SetPushToken(ctx context.Context, token string) (bool, error) {
	return r.mycarehub.User.RegisterPushToken(ctx, token)
}

// InviteUser is the resolver for the inviteUser field.
func (r *mutationResolver) InviteUser(ctx context.Context, userID string, phoneNumber string, flavour feedlib.Flavour, reinvite *bool) (bool, error) {
	return r.mycarehub.User.InviteUser(ctx, userID, phoneNumber, flavour, *reinvite)
}

// SetUserPin is the resolver for the setUserPIN field.
func (r *mutationResolver) SetUserPin(ctx context.Context, input *dto.PINInput) (bool, error) {
	return r.mycarehub.User.SetUserPIN(ctx, *input)
}

// TransferClientToFacility is the resolver for the transferClientToFacility field.
func (r *mutationResolver) TransferClientToFacility(ctx context.Context, clientID string, facilityID string) (bool, error) {
	return r.mycarehub.User.TransferClientToFacility(ctx, &clientID, &facilityID)
}

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, userID string, cccNumber *string, username *string, phoneNumber *string, flavour feedlib.Flavour) (bool, error) {
	r.checkPreconditions()
	return r.mycarehub.User.UpdateUserProfile(ctx, userID, cccNumber, username, phoneNumber, flavour)
}

// GetCurrentTerms is the resolver for the getCurrentTerms field.
func (r *queryResolver) GetCurrentTerms(ctx context.Context, flavour feedlib.Flavour) (*domain.TermsOfService, error) {
	r.checkPreconditions()
	return r.mycarehub.Terms.GetCurrentTerms(ctx, flavour)
}

// VerifyPin is the resolver for the verifyPIN field.
func (r *queryResolver) VerifyPin(ctx context.Context, userID string, flavour feedlib.Flavour, pin string) (bool, error) {
	return r.mycarehub.User.VerifyPIN(ctx, userID, flavour, pin)
}

// GetClientCaregiver is the resolver for the getClientCaregiver field.
func (r *queryResolver) GetClientCaregiver(ctx context.Context, clientID string) (*domain.Caregiver, error) {
	return r.mycarehub.User.GetClientCaregiver(ctx, clientID)
}

// SearchClientUser is the resolver for the searchClientUser field.
func (r *queryResolver) SearchClientUser(ctx context.Context, searchParameter string) ([]*domain.ClientProfile, error) {
	return r.mycarehub.User.SearchClientUser(ctx, searchParameter)
}

// SearchStaffUser is the resolver for the searchStaffUser field.
func (r *queryResolver) SearchStaffUser(ctx context.Context, searchParameter string) ([]*domain.StaffProfile, error) {
	return r.mycarehub.User.SearchStaffUser(ctx, searchParameter)
}

// GetClientProfileByCCCNumber is the resolver for the getClientProfileByCCCNumber field.
func (r *queryResolver) GetClientProfileByCCCNumber(ctx context.Context, cCCNumber string) (*domain.ClientProfile, error) {
	return r.mycarehub.User.GetClientProfileByCCCNumber(ctx, cCCNumber)
}
