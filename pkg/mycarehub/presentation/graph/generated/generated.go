// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/99designs/gqlgen/plugin/federation/fedruntime"
	stream_chat "github.com/GetStream/stream-chat-go/v5"
	"github.com/savannahghi/enumutils"
	"github.com/savannahghi/feedlib"
	"github.com/savannahghi/firebasetools"
	"github.com/savannahghi/mycarehub/pkg/mycarehub/application/dto"
	"github.com/savannahghi/mycarehub/pkg/mycarehub/application/enums"
	"github.com/savannahghi/mycarehub/pkg/mycarehub/domain"
	"github.com/savannahghi/scalarutils"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AIModerationResponse struct {
		Explicit func(childComplexity int) int
		Spam     func(childComplexity int) int
		Toxic    func(childComplexity int) int
	}

	AgeRange struct {
		LowerBound func(childComplexity int) int
		UpperBound func(childComplexity int) int
	}

	Appointment struct {
		Date                      func(childComplexity int) int
		HasRescheduledAppointment func(childComplexity int) int
		ID                        func(childComplexity int) int
		Reason                    func(childComplexity int) int
	}

	AppointmentsPage struct {
		Appointments func(childComplexity int) int
		Pagination   func(childComplexity int) int
	}

	Attachment struct {
		AssetURL    func(childComplexity int) int
		AuthorName  func(childComplexity int) int
		ImageURL    func(childComplexity int) int
		OgScrapeURL func(childComplexity int) int
		Text        func(childComplexity int) int
		ThumbURL    func(childComplexity int) int
		Title       func(childComplexity int) int
		TitleLink   func(childComplexity int) int
		Type        func(childComplexity int) int
	}

	Author struct {
		ID func(childComplexity int) int
	}

	AuthorityPermission struct {
		Active       func(childComplexity int) int
		PermissionID func(childComplexity int) int
	}

	AuthorityRole struct {
		Active          func(childComplexity int) int
		AuthorityRoleID func(childComplexity int) int
		Name            func(childComplexity int) int
	}

	AvailableScreeningTools struct {
		ToolType func(childComplexity int) int
	}

	CaregiverProfile struct {
		CaregiverNumber func(childComplexity int) int
		Consent         func(childComplexity int) int
		CurrentClient   func(childComplexity int) int
		CurrentFacility func(childComplexity int) int
		ID              func(childComplexity int) int
		IsClient        func(childComplexity int) int
		User            func(childComplexity int) int
	}

	CaregiverProfileOutputPage struct {
		Caregivers func(childComplexity int) int
		Pagination func(childComplexity int) int
	}

	CategoryDetail struct {
		CategoryIcon func(childComplexity int) int
		CategoryName func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	ClientHealthDiaryEntry struct {
		Active                func(childComplexity int) int
		ClientID              func(childComplexity int) int
		ClientName            func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		EntryType             func(childComplexity int) int
		ID                    func(childComplexity int) int
		Mood                  func(childComplexity int) int
		Note                  func(childComplexity int) int
		PhoneNumber           func(childComplexity int) int
		ShareWithHealthWorker func(childComplexity int) int
		SharedAt              func(childComplexity int) int
	}

	ClientHealthDiaryQuote struct {
		Author func(childComplexity int) int
		Quote  func(childComplexity int) int
	}

	ClientProfile struct {
		Active                  func(childComplexity int) int
		CCCNumber               func(childComplexity int) int
		CHVUserID               func(childComplexity int) int
		CHVUserName             func(childComplexity int) int
		CaregiverID             func(childComplexity int) int
		ClientCounselled        func(childComplexity int) int
		ClientTypes             func(childComplexity int) int
		DefaultFacility         func(childComplexity int) int
		FHIRPatientID           func(childComplexity int) int
		HealthRecordID          func(childComplexity int) int
		ID                      func(childComplexity int) int
		TreatmentBuddy          func(childComplexity int) int
		TreatmentEnrollmentDate func(childComplexity int) int
		User                    func(childComplexity int) int
	}

	ClientRegistrationOutput struct {
		Active            func(childComplexity int) int
		CHV               func(childComplexity int) int
		Caregiver         func(childComplexity int) int
		ClientTypes       func(childComplexity int) int
		Counselled        func(childComplexity int) int
		CurrentFacilityID func(childComplexity int) int
		EMRHealthRecordID func(childComplexity int) int
		EnrollmentDate    func(childComplexity int) int
		FHIRPatientID     func(childComplexity int) int
		ID                func(childComplexity int) int
		Organisation      func(childComplexity int) int
		TreatmentBuddy    func(childComplexity int) int
		UserID            func(childComplexity int) int
	}

	ClientResponse struct {
		ClientProfile  func(childComplexity int) int
		CommunityToken func(childComplexity int) int
		Permissions    func(childComplexity int) int
		Roles          func(childComplexity int) int
	}

	Community struct {
		AgeRange    func(childComplexity int) int
		CID         func(childComplexity int) int
		ClientType  func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		CreatedBy   func(childComplexity int) int
		Description func(childComplexity int) int
		Disabled    func(childComplexity int) int
		Frozen      func(childComplexity int) int
		Gender      func(childComplexity int) int
		ID          func(childComplexity int) int
		InviteOnly  func(childComplexity int) int
		MemberCount func(childComplexity int) int
		Members     func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	CommunityMember struct {
		InviteAcceptedAt func(childComplexity int) int
		InviteRejectedAt func(childComplexity int) int
		Invited          func(childComplexity int) int
		IsModerator      func(childComplexity int) int
		Role             func(childComplexity int) int
		User             func(childComplexity int) int
		UserID           func(childComplexity int) int
		UserType         func(childComplexity int) int
	}

	ConsentStatus struct {
		ConsentStatus func(childComplexity int) int
	}

	Contact struct {
		Active       func(childComplexity int) int
		ContactType  func(childComplexity int) int
		ContactValue func(childComplexity int) int
		ID           func(childComplexity int) int
		OptedIn      func(childComplexity int) int
	}

	Content struct {
		Items func(childComplexity int) int
		Meta  func(childComplexity int) int
	}

	ContentItem struct {
		Author              func(childComplexity int) int
		AuthorName          func(childComplexity int) int
		Body                func(childComplexity int) int
		BookmarkCount       func(childComplexity int) int
		CategoryDetails     func(childComplexity int) int
		Date                func(childComplexity int) int
		Documents           func(childComplexity int) int
		FeaturedMedia       func(childComplexity int) int
		GalleryImages       func(childComplexity int) int
		HeroImage           func(childComplexity int) int
		HeroImageRendition  func(childComplexity int) int
		ID                  func(childComplexity int) int
		Intro               func(childComplexity int) int
		ItemType            func(childComplexity int) int
		LikeCount           func(childComplexity int) int
		Meta                func(childComplexity int) int
		ShareCount          func(childComplexity int) int
		TagNames            func(childComplexity int) int
		TimeEstimateSeconds func(childComplexity int) int
		Title               func(childComplexity int) int
		ViewCount           func(childComplexity int) int
	}

	ContentItemCategory struct {
		ID      func(childComplexity int) int
		IconURL func(childComplexity int) int
		Name    func(childComplexity int) int
	}

	ContentMeta struct {
		ContentDetailURL  func(childComplexity int) int
		ContentHTMLURL    func(childComplexity int) int
		ContentType       func(childComplexity int) int
		FirstPublishedAt  func(childComplexity int) int
		Locale            func(childComplexity int) int
		SEOTitle          func(childComplexity int) int
		SearchDescription func(childComplexity int) int
		ShowInMenus       func(childComplexity int) int
		Slug              func(childComplexity int) int
	}

	Document struct {
		Document func(childComplexity int) int
		ID       func(childComplexity int) int
		Meta     func(childComplexity int) int
	}

	DocumentData struct {
		ID    func(childComplexity int) int
		Meta  func(childComplexity int) int
		Title func(childComplexity int) int
	}

	DocumentMeta struct {
		DocumentDetailURL   func(childComplexity int) int
		DocumentDownloadURL func(childComplexity int) int
		Type                func(childComplexity int) int
	}

	Explicit struct {
		Block func(childComplexity int) int
		Flag  func(childComplexity int) int
	}

	Facility struct {
		Active             func(childComplexity int) int
		Country            func(childComplexity int) int
		Description        func(childComplexity int) int
		FHIROrganisationID func(childComplexity int) int
		ID                 func(childComplexity int) int
		Identifier         func(childComplexity int) int
		Name               func(childComplexity int) int
		Phone              func(childComplexity int) int
		WorkStationDetails func(childComplexity int) int
	}

	FacilityIdentifier struct {
		Active func(childComplexity int) int
		ID     func(childComplexity int) int
		Type   func(childComplexity int) int
		Value  func(childComplexity int) int
	}

	FacilityOutputPage struct {
		Facilities func(childComplexity int) int
		Pagination func(childComplexity int) int
	}

	FacilityPage struct {
		Facilities func(childComplexity int) int
		Pagination func(childComplexity int) int
	}

	FeaturedMedia struct {
		Duration  func(childComplexity int) int
		Height    func(childComplexity int) int
		ID        func(childComplexity int) int
		Thumbnail func(childComplexity int) int
		Title     func(childComplexity int) int
		Type      func(childComplexity int) int
		URL       func(childComplexity int) int
		Width     func(childComplexity int) int
	}

	FiltersParam struct {
		DataType func(childComplexity int) int
		Name     func(childComplexity int) int
		Value    func(childComplexity int) int
	}

	GalleryImage struct {
		ID    func(childComplexity int) int
		Image func(childComplexity int) int
	}

	GetstreamMessage struct {
		Attachments     func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		HTML            func(childComplexity int) int
		ID              func(childComplexity int) int
		LatestReactions func(childComplexity int) int
		MentionedUsers  func(childComplexity int) int
		OwnReactions    func(childComplexity int) int
		ParentID        func(childComplexity int) int
		PinnedAt        func(childComplexity int) int
		PinnedBy        func(childComplexity int) int
		ReplyCount      func(childComplexity int) int
		Shadowed        func(childComplexity int) int
		ShowInChannel   func(childComplexity int) int
		Silent          func(childComplexity int) int
		Text            func(childComplexity int) int
		Type            func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		User            func(childComplexity int) int
	}

	HeroImage struct {
		ID    func(childComplexity int) int
		Meta  func(childComplexity int) int
		Title func(childComplexity int) int
	}

	HeroImageRendition struct {
		Alt    func(childComplexity int) int
		Height func(childComplexity int) int
		URL    func(childComplexity int) int
		Width  func(childComplexity int) int
	}

	ImageDetail struct {
		ID    func(childComplexity int) int
		Meta  func(childComplexity int) int
		Title func(childComplexity int) int
	}

	ImageMeta struct {
		ImageDetailURL   func(childComplexity int) int
		ImageDownloadURL func(childComplexity int) int
		Type             func(childComplexity int) int
	}

	ManagedClient struct {
		CaregiverConsent   func(childComplexity int) int
		ClientConsent      func(childComplexity int) int
		ClientProfile      func(childComplexity int) int
		WorkStationDetails func(childComplexity int) int
	}

	ManagedClientOutputPage struct {
		ManagedClients func(childComplexity int) int
		Pagination     func(childComplexity int) int
	}

	Member struct {
		AgeLowerBound func(childComplexity int) int
		AgeUpperBound func(childComplexity int) int
		ClientTypes   func(childComplexity int) int
		ExtraData     func(childComplexity int) int
		Gender        func(childComplexity int) int
		ID            func(childComplexity int) int
		Name          func(childComplexity int) int
		Role          func(childComplexity int) int
		UserID        func(childComplexity int) int
		UserType      func(childComplexity int) int
		Username      func(childComplexity int) int
	}

	MessageFlag struct {
		Message func(childComplexity int) int
		User    func(childComplexity int) int
	}

	Meta struct {
		TotalCount func(childComplexity int) int
	}

	ModerationResult struct {
		Action               func(childComplexity int) int
		AiModerationResponse func(childComplexity int) int
		BlockedWord          func(childComplexity int) int
		BlocklistName        func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		MessageID            func(childComplexity int) int
		ModeratedBy          func(childComplexity int) int
		ModerationThresholds func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		UserBadKarma         func(childComplexity int) int
		UserKarma            func(childComplexity int) int
	}

	ModerationThresholds struct {
		Explicit func(childComplexity int) int
		Spam     func(childComplexity int) int
		Toxic    func(childComplexity int) int
	}

	Mutation struct {
		AcceptInvitation                   func(childComplexity int, memberID string, communityID string) int
		AcceptTerms                        func(childComplexity int, userID string, termsID int) int
		AddFacilitiesToClientProfile       func(childComplexity int, clientID string, facilities []string) int
		AddFacilitiesToStaffProfile        func(childComplexity int, staffID string, facilities []string) int
		AddFacilityContact                 func(childComplexity int, facilityID string, contact string) int
		AddFacilityToProgram               func(childComplexity int, facilityIDs []string) int
		AddMembersToCommunity              func(childComplexity int, memberIDs []string, communityID string) int
		AddModerators                      func(childComplexity int, memberIDs []string, communityID string) int
		AnswerScreeningToolQuestion        func(childComplexity int, screeningToolResponses []*dto.ScreeningToolQuestionResponseInput) int
		AssignCaregiver                    func(childComplexity int, input dto.ClientCaregiverInput) int
		AssignOrRevokeRoles                func(childComplexity int, userID string, roles []*enums.UserRoleType) int
		BanUser                            func(childComplexity int, memberID string, bannedBy string, communityID string) int
		BookmarkContent                    func(childComplexity int, clientID string, contentItemID int) int
		CollectMetric                      func(childComplexity int, input domain.Metric) int
		CompleteOnboardingTour             func(childComplexity int, userID string, flavour feedlib.Flavour) int
		ConsentToAClientCaregiver          func(childComplexity int, clientID string, caregiverID string, consent bool) int
		ConsentToManagingClient            func(childComplexity int, caregiverID string, clientID string, consent bool) int
		CreateCommunity                    func(childComplexity int, input dto.CommunityInput) int
		CreateHealthDiaryEntry             func(childComplexity int, clientID string, note *string, mood string, reportToStaff bool) int
		CreateOrganisation                 func(childComplexity int, input dto.OrganisationInput) int
		CreateProgram                      func(childComplexity int, input dto.ProgramInput) int
		CreateScreeningTool                func(childComplexity int, input dto.ScreeningToolInput) int
		CreateServiceRequest               func(childComplexity int, input dto.ServiceRequestInput) int
		DeleteCommunities                  func(childComplexity int, communityIDs []string, hardDelete bool) int
		DeleteCommunityMessage             func(childComplexity int, messageID string) int
		DeleteFacility                     func(childComplexity int, identifier dto.FacilityIdentifierInput) int
		DeleteOrganisation                 func(childComplexity int, organisationID string) int
		DemoteModerators                   func(childComplexity int, communityID string, memberIDs []string) int
		InactivateFacility                 func(childComplexity int, identifier dto.FacilityIdentifierInput) int
		InviteUser                         func(childComplexity int, userID string, phoneNumber string, flavour feedlib.Flavour, reinvite *bool) int
		LikeContent                        func(childComplexity int, clientID string, contentID int) int
		OptOut                             func(childComplexity int, phoneNumber string, flavour feedlib.Flavour) int
		ReactivateFacility                 func(childComplexity int, identifier dto.FacilityIdentifierInput) int
		ReadNotifications                  func(childComplexity int, ids []string) int
		RecordSecurityQuestionResponses    func(childComplexity int, input []*dto.SecurityQuestionResponseInput) int
		RegisterCaregiver                  func(childComplexity int, input dto.CaregiverInput) int
		RegisterClient                     func(childComplexity int, input *dto.ClientRegistrationInput) int
		RegisterClientAsCaregiver          func(childComplexity int, clientID string, caregiverNumber string) int
		RegisterExistingUserAsCaregiver    func(childComplexity int, userID string, caregiverNumber string) int
		RegisterExistingUserAsClient       func(childComplexity int, input dto.ExistingUserClientInput) int
		RegisterExistingUserAsStaff        func(childComplexity int, input dto.ExistingUserStaffInput) int
		RegisterStaff                      func(childComplexity int, input dto.StaffRegistrationInput) int
		RejectInvitation                   func(childComplexity int, memberID string, communityID string) int
		RemoveFacilitiesFromClientProfile  func(childComplexity int, clientID string, facilities []string) int
		RemoveFacilitiesFromStaffProfile   func(childComplexity int, staffID string, facilities []string) int
		RemoveMembersFromCommunity         func(childComplexity int, communityID string, memberIDs []string) int
		RescheduleAppointment              func(childComplexity int, appointmentID string, date scalarutils.Date) int
		ResolveServiceRequest              func(childComplexity int, staffID string, requestID string, action []string, comment *string) int
		RespondToScreeningTool             func(childComplexity int, input dto.QuestionnaireScreeningToolResponseInput) int
		SendClientSurveyLinks              func(childComplexity int, facilityID string, formID string, projectID int, filterParams *dto.ClientFilterParamsInput) int
		SendFCMNotification                func(childComplexity int, registrationTokens []string, data map[string]interface{}, notification firebasetools.FirebaseSimpleNotificationInput) int
		SendFeedback                       func(childComplexity int, input dto.FeedbackResponseInput) int
		SetCaregiverCurrentClient          func(childComplexity int, clientID string) int
		SetCaregiverCurrentFacility        func(childComplexity int, clientID string, facilityID string) int
		SetClientDefaultFacility           func(childComplexity int, clientID string, facilityID string) int
		SetClientProgram                   func(childComplexity int, programID string) int
		SetInProgressBy                    func(childComplexity int, serviceRequestID string, staffID string) int
		SetNickName                        func(childComplexity int, userID string, nickname string) int
		SetPushToken                       func(childComplexity int, token string) int
		SetStaffDefaultFacility            func(childComplexity int, staffID string, facilityID string) int
		SetStaffProgram                    func(childComplexity int, programID string) int
		SetUserPin                         func(childComplexity int, input *dto.PINInput) int
		ShareContent                       func(childComplexity int, input dto.ShareContentInput) int
		ShareHealthDiaryEntry              func(childComplexity int, healthDiaryEntryID string, shareEntireHealthDiary bool) int
		TransferClientToFacility           func(childComplexity int, clientID string, facilityID string) int
		UnBanUser                          func(childComplexity int, memberID string, communityID string) int
		UnBookmarkContent                  func(childComplexity int, clientID string, contentItemID int) int
		UnlikeContent                      func(childComplexity int, clientID string, contentID int) int
		UpdateProfile                      func(childComplexity int, userID string, cccNumber *string, username *string, phoneNumber *string, programID string, flavour feedlib.Flavour) int
		VerifyClientPinResetServiceRequest func(childComplexity int, clientID string, serviceRequestID string, cccNumber string, phoneNumber string, physicalIdentityVerified bool, state string) int
		VerifyStaffPinResetServiceRequest  func(childComplexity int, phoneNumber string, serviceRequestID string, verificationStatus string) int
		VerifySurveySubmission             func(childComplexity int, input dto.VerifySurveySubmissionInput) int
		ViewContent                        func(childComplexity int, clientID string, contentID int) int
	}

	Notification struct {
		Body      func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		IsRead    func(childComplexity int) int
		Title     func(childComplexity int) int
		Type      func(childComplexity int) int
	}

	NotificationTypeFilter struct {
		Enum func(childComplexity int) int
		Name func(childComplexity int) int
	}

	NotificationsPage struct {
		Notifications func(childComplexity int) int
		Pagination    func(childComplexity int) int
	}

	OTPResponse struct {
		OTP         func(childComplexity int) int
		PhoneNumber func(childComplexity int) int
	}

	Organisation struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	OrganisationOutputPage struct {
		Organisations func(childComplexity int) int
		Pagination    func(childComplexity int) int
	}

	Pagination struct {
		Count        func(childComplexity int) int
		CurrentPage  func(childComplexity int) int
		Limit        func(childComplexity int) int
		NextPage     func(childComplexity int) int
		PreviousPage func(childComplexity int) int
		TotalPages   func(childComplexity int) int
	}

	PostingHours struct {
		End   func(childComplexity int) int
		Start func(childComplexity int) int
	}

	Program struct {
		Active       func(childComplexity int) int
		ID           func(childComplexity int) int
		Name         func(childComplexity int) int
		Organisation func(childComplexity int) int
	}

	ProgramOutput struct {
		Count    func(childComplexity int) int
		Programs func(childComplexity int) int
	}

	ProgramPage struct {
		Pagination func(childComplexity int) int
		Programs   func(childComplexity int) int
	}

	Query struct {
		CanRecordMood                           func(childComplexity int, clientID string) int
		CheckIdentifierExists                   func(childComplexity int, identifierType enums.ClientIdentifierType, identifierValue string) int
		CheckIfUserBookmarkedContent            func(childComplexity int, clientID string, contentID int) int
		CheckIfUserHasLikedContent              func(childComplexity int, clientID string, contentID int) int
		FetchClientAppointments                 func(childComplexity int, clientID string, paginationInput dto.PaginationsInput, filters []*firebasetools.FilterParam) int
		FetchNotificationTypeFilters            func(childComplexity int, flavour feedlib.Flavour) int
		FetchNotifications                      func(childComplexity int, userID string, flavour feedlib.Flavour, paginationInput dto.PaginationsInput, filters *domain.NotificationFilters) int
		GetAllAuthorityRoles                    func(childComplexity int) int
		GetAssessmentResponsesByToolType        func(childComplexity int, facilityID string, toolType string) int
		GetAvailableFacilityScreeningTools      func(childComplexity int, facilityID string) int
		GetAvailableScreeningToolQuestions      func(childComplexity int, clientID string) int
		GetAvailableScreeningTools              func(childComplexity int, clientID string, facilityID string) int
		GetCaregiverManagedClients              func(childComplexity int, userID string, paginationInput dto.PaginationsInput) int
		GetClientFacilities                     func(childComplexity int, clientID string, paginationInput dto.PaginationsInput) int
		GetClientHealthDiaryEntries             func(childComplexity int, clientID string, moodType *enums.Mood, shared *bool) int
		GetClientProfileByCCCNumber             func(childComplexity int, cCCNumber string) int
		GetContent                              func(childComplexity int, categoryID *int, limit string) int
		GetCurrentTerms                         func(childComplexity int) int
		GetFAQs                                 func(childComplexity int, flavour feedlib.Flavour) int
		GetFacilityRespondedScreeningTools      func(childComplexity int, facilityID string, paginationInput dto.PaginationsInput) int
		GetHealthDiaryQuote                     func(childComplexity int, limit int) int
		GetPendingServiceRequestsCount          func(childComplexity int, facilityID string) int
		GetProgramFacilities                    func(childComplexity int, programID string) int
		GetScreeningToolByID                    func(childComplexity int, id string) int
		GetScreeningToolQuestions               func(childComplexity int, toolType *string) int
		GetScreeningToolRespondents             func(childComplexity int, facilityID string, screeningToolID string, searchTerm *string, paginationInput dto.PaginationsInput) int
		GetScreeningToolResponse                func(childComplexity int, id string) int
		GetScreeningToolServiceRequestResponses func(childComplexity int, clientID *string, toolType *enums.ScreeningToolType) int
		GetSecurityQuestions                    func(childComplexity int, flavour feedlib.Flavour) int
		GetServiceRequests                      func(childComplexity int, requestType *string, requestStatus *string, facilityID string, flavour feedlib.Flavour) int
		GetSharedHealthDiaryEntries             func(childComplexity int, clientID string, facilityID string) int
		GetStaffFacilities                      func(childComplexity int, staffID string, paginationInput dto.PaginationsInput) int
		GetSurveyResponse                       func(childComplexity int, input dto.SurveyResponseInput) int
		GetSurveyServiceRequestUser             func(childComplexity int, facilityID string, projectID int, formID string, paginationInput dto.PaginationsInput) int
		GetSurveyWithServiceRequest             func(childComplexity int, facilityID string) int
		GetUserBookmarkedContent                func(childComplexity int, clientID string) int
		GetUserRoles                            func(childComplexity int, userID string, organisationID string) int
		GetUserSurveyForms                      func(childComplexity int, userID string) int
		InviteMembersToCommunity                func(childComplexity int, communityID string, memberIDs []string) int
		ListClientsCaregivers                   func(childComplexity int, clientID string, paginationInput *dto.PaginationsInput) int
		ListCommunities                         func(childComplexity int, input *stream_chat.QueryOption) int
		ListCommunityBannedMembers              func(childComplexity int, communityID string) int
		ListCommunityMembers                    func(childComplexity int, communityID string, input *stream_chat.QueryOption) int
		ListContentCategories                   func(childComplexity int) int
		ListFacilities                          func(childComplexity int, searchTerm *string, filterInput []*dto.FiltersInput, paginationInput dto.PaginationsInput) int
		ListFlaggedMessages                     func(childComplexity int, communityCid *string, memberIDs []*string) int
		ListMembers                             func(childComplexity int, input *stream_chat.QueryOption) int
		ListOrganisations                       func(childComplexity int, paginationInput dto.PaginationsInput) int
		ListPendingInvites                      func(childComplexity int, memberID string, input *stream_chat.QueryOption) int
		ListPrograms                            func(childComplexity int, pagination dto.PaginationsInput) int
		ListSurveyRespondents                   func(childComplexity int, projectID int, formID string, paginationInput dto.PaginationsInput) int
		ListSurveys                             func(childComplexity int, projectID int) int
		ListUserPrograms                        func(childComplexity int, userID string, flavour feedlib.Flavour) int
		NextRefill                              func(childComplexity int, clientID string) int
		RecommendedCommunities                  func(childComplexity int, clientID string, limit int) int
		RetrieveFacility                        func(childComplexity int, id string, active bool) int
		RetrieveFacilityByIdentifier            func(childComplexity int, identifier dto.FacilityIdentifierInput, isActive bool) int
		SearchCaregiverUser                     func(childComplexity int, searchParameter string) int
		SearchClientUser                        func(childComplexity int, searchParameter string) int
		SearchFacility                          func(childComplexity int, searchParameter *string) int
		SearchOrganisations                     func(childComplexity int, searchParameter string) int
		SearchPrograms                          func(childComplexity int, searchParameter string) int
		SearchServiceRequests                   func(childComplexity int, searchTerm string, flavour feedlib.Flavour, requestType string, facilityID string) int
		SearchStaffUser                         func(childComplexity int, searchParameter string) int
		SendOtp                                 func(childComplexity int, username string, flavour feedlib.Flavour) int
		VerifyPin                               func(childComplexity int, userID string, flavour feedlib.Flavour, pin string) int
		__resolve__service                      func(childComplexity int) int
	}

	Question struct {
		Active            func(childComplexity int) int
		Choices           func(childComplexity int) int
		ID                func(childComplexity int) int
		QuestionType      func(childComplexity int) int
		QuestionnaireID   func(childComplexity int) int
		Required          func(childComplexity int) int
		ResponseValueType func(childComplexity int) int
		SelectMultiple    func(childComplexity int) int
		Sequence          func(childComplexity int) int
		Text              func(childComplexity int) int
	}

	QuestionInputChoice struct {
		Active     func(childComplexity int) int
		Choice     func(childComplexity int) int
		ID         func(childComplexity int) int
		QuestionID func(childComplexity int) int
		Score      func(childComplexity int) int
		Value      func(childComplexity int) int
	}

	Questionnaire struct {
		Active      func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Questions   func(childComplexity int) int
	}

	QuestionnaireScreeningToolQuestionResponse struct {
		Active                  func(childComplexity int) int
		ID                      func(childComplexity int) int
		NormalizedResponse      func(childComplexity int) int
		QuestionID              func(childComplexity int) int
		QuestionText            func(childComplexity int) int
		QuestionType            func(childComplexity int) int
		Response                func(childComplexity int) int
		ResponseValueType       func(childComplexity int) int
		Score                   func(childComplexity int) int
		ScreeningToolResponseID func(childComplexity int) int
		SelectMultiple          func(childComplexity int) int
		Sequence                func(childComplexity int) int
	}

	QuestionnaireScreeningToolResponse struct {
		Active            func(childComplexity int) int
		AggregateScore    func(childComplexity int) int
		ClientID          func(childComplexity int) int
		FacilityID        func(childComplexity int) int
		ID                func(childComplexity int) int
		QuestionResponses func(childComplexity int) int
		ScreeningToolID   func(childComplexity int) int
	}

	Reaction struct {
		MessageID func(childComplexity int) int
		Type      func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	RecordSecurityQuestionResponse struct {
		IsCorrect          func(childComplexity int) int
		SecurityQuestionID func(childComplexity int) int
	}

	RequestTypeCount struct {
		RequestType func(childComplexity int) int
		Total       func(childComplexity int) int
	}

	ScreeningTool struct {
		Active          func(childComplexity int) int
		AgeRange        func(childComplexity int) int
		ClientTypes     func(childComplexity int) int
		Genders         func(childComplexity int) int
		ID              func(childComplexity int) int
		Questionnaire   func(childComplexity int) int
		QuestionnaireID func(childComplexity int) int
		Threshold       func(childComplexity int) int
	}

	ScreeningToolAssessmentResponse struct {
		ClientID     func(childComplexity int) int
		ClientName   func(childComplexity int) int
		DateAnswered func(childComplexity int) int
	}

	ScreeningToolPage struct {
		Pagination     func(childComplexity int) int
		ScreeningTools func(childComplexity int) int
	}

	ScreeningToolQuestion struct {
		Active           func(childComplexity int) int
		ID               func(childComplexity int) int
		Meta             func(childComplexity int) int
		Question         func(childComplexity int) int
		ResponseCategory func(childComplexity int) int
		ResponseChoices  func(childComplexity int) int
		ResponseType     func(childComplexity int) int
		Sequence         func(childComplexity int) int
		ToolType         func(childComplexity int) int
	}

	ScreeningToolRespondent struct {
		ClientID                func(childComplexity int) int
		Name                    func(childComplexity int) int
		PhoneNumber             func(childComplexity int) int
		ScreeningToolResponseID func(childComplexity int) int
		ServiceRequest          func(childComplexity int) int
		ServiceRequestID        func(childComplexity int) int
	}

	ScreeningToolRespondentsPage struct {
		Pagination               func(childComplexity int) int
		ScreeningToolRespondents func(childComplexity int) int
	}

	ScreeningToolResponse struct {
		Response  func(childComplexity int) int
		Tool      func(childComplexity int) int
		ToolIndex func(childComplexity int) int
	}

	ScreeningToolResponsePayload struct {
		ClientContact          func(childComplexity int) int
		ScreeningToolResponses func(childComplexity int) int
		ServiceRequestID       func(childComplexity int) int
	}

	SecurityQuestion struct {
		Active             func(childComplexity int) int
		Description        func(childComplexity int) int
		QuestionStem       func(childComplexity int) int
		ResponseType       func(childComplexity int) int
		SecurityQuestionID func(childComplexity int) int
	}

	ServiceRequest struct {
		ClientContact  func(childComplexity int) int
		ClientID       func(childComplexity int) int
		ClientName     func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		FacilityID     func(childComplexity int) int
		ID             func(childComplexity int) int
		InProgressAt   func(childComplexity int) int
		InProgressBy   func(childComplexity int) int
		Meta           func(childComplexity int) int
		Request        func(childComplexity int) int
		RequestType    func(childComplexity int) int
		ResolvedAt     func(childComplexity int) int
		ResolvedBy     func(childComplexity int) int
		ResolvedByName func(childComplexity int) int
		StaffContact   func(childComplexity int) int
		StaffID        func(childComplexity int) int
		StaffName      func(childComplexity int) int
		Status         func(childComplexity int) int
	}

	ServiceRequestsCount struct {
		RequestsTypeCount func(childComplexity int) int
	}

	ServiceRequestsCountResponse struct {
		ClientsServiceRequestCount func(childComplexity int) int
		StaffServiceRequestCount   func(childComplexity int) int
	}

	Spam struct {
		Block func(childComplexity int) int
		Flag  func(childComplexity int) int
	}

	StaffProfile struct {
		Active          func(childComplexity int) int
		DefaultFacility func(childComplexity int) int
		ID              func(childComplexity int) int
		StaffNumber     func(childComplexity int) int
		User            func(childComplexity int) int
		UserID          func(childComplexity int) int
	}

	StaffRegistrationOutput struct {
		Active          func(childComplexity int) int
		DefaultFacility func(childComplexity int) int
		ID              func(childComplexity int) int
		StaffNumber     func(childComplexity int) int
		UserID          func(childComplexity int) int
	}

	StaffResponse struct {
		CommunityToken func(childComplexity int) int
		Permissions    func(childComplexity int) int
		Roles          func(childComplexity int) int
		StaffProfile   func(childComplexity int) int
	}

	SurveyForm struct {
		Name      func(childComplexity int) int
		ProjectID func(childComplexity int) int
		XMLFormID func(childComplexity int) int
	}

	SurveyRespondent struct {
		FormID      func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		ProjectID   func(childComplexity int) int
		SubmittedAt func(childComplexity int) int
		SubmitterID func(childComplexity int) int
	}

	SurveyRespondentPage struct {
		Pagination        func(childComplexity int) int
		SurveyRespondents func(childComplexity int) int
	}

	SurveyResponse struct {
		Answer       func(childComplexity int) int
		Question     func(childComplexity int) int
		QuestionType func(childComplexity int) int
	}

	SurveyServiceRequestUser struct {
		FormID           func(childComplexity int) int
		Name             func(childComplexity int) int
		PhoneNumber      func(childComplexity int) int
		ProjectID        func(childComplexity int) int
		ServiceRequestID func(childComplexity int) int
		SubmitterID      func(childComplexity int) int
		SurveyName       func(childComplexity int) int
	}

	SurveyServiceRequestUserPage struct {
		Pagination func(childComplexity int) int
		Users      func(childComplexity int) int
	}

	SurveysWithServiceRequest struct {
		FormID    func(childComplexity int) int
		LinkID    func(childComplexity int) int
		ProjectID func(childComplexity int) int
		Title     func(childComplexity int) int
	}

	TermsOfService struct {
		TermsID func(childComplexity int) int
		Text    func(childComplexity int) int
	}

	Toxic struct {
		Block func(childComplexity int) int
		Flag  func(childComplexity int) int
	}

	User struct {
		AcceptedTermsID       func(childComplexity int) int
		Active                func(childComplexity int) int
		Contacts              func(childComplexity int) int
		CurrentOrganizationID func(childComplexity int) int
		CurrentProgramID      func(childComplexity int) int
		DateOfBirth           func(childComplexity int) int
		Gender                func(childComplexity int) int
		ID                    func(childComplexity int) int
		IsPhoneVerified       func(childComplexity int) int
		Name                  func(childComplexity int) int
		Suspended             func(childComplexity int) int
		TermsAccepted         func(childComplexity int) int
		Username              func(childComplexity int) int
	}

	UserSurvey struct {
		Active         func(childComplexity int) int
		Created        func(childComplexity int) int
		Description    func(childComplexity int) int
		FormID         func(childComplexity int) int
		HasSubmitted   func(childComplexity int) int
		ID             func(childComplexity int) int
		Link           func(childComplexity int) int
		LinkID         func(childComplexity int) int
		OrganisationID func(childComplexity int) int
		ProgramID      func(childComplexity int) int
		ProjectID      func(childComplexity int) int
		Title          func(childComplexity int) int
		Token          func(childComplexity int) int
		UserID         func(childComplexity int) int
	}

	WorkStationDetails struct {
		Articles        func(childComplexity int) int
		Messages        func(childComplexity int) int
		Notifications   func(childComplexity int) int
		ServiceRequests func(childComplexity int) int
		Surveys         func(childComplexity int) int
	}

	_Service struct {
		SDL func(childComplexity int) int
	}
}

type MutationResolver interface {
	RescheduleAppointment(ctx context.Context, appointmentID string, date scalarutils.Date) (bool, error)
	AssignOrRevokeRoles(ctx context.Context, userID string, roles []*enums.UserRoleType) (bool, error)
	CreateCommunity(ctx context.Context, input dto.CommunityInput) (*domain.Community, error)
	DeleteCommunities(ctx context.Context, communityIDs []string, hardDelete bool) (bool, error)
	RejectInvitation(ctx context.Context, memberID string, communityID string) (bool, error)
	AcceptInvitation(ctx context.Context, memberID string, communityID string) (bool, error)
	AddMembersToCommunity(ctx context.Context, memberIDs []string, communityID string) (bool, error)
	RemoveMembersFromCommunity(ctx context.Context, communityID string, memberIDs []string) (bool, error)
	AddModerators(ctx context.Context, memberIDs []string, communityID string) (bool, error)
	DemoteModerators(ctx context.Context, communityID string, memberIDs []string) (bool, error)
	BanUser(ctx context.Context, memberID string, bannedBy string, communityID string) (bool, error)
	UnBanUser(ctx context.Context, memberID string, communityID string) (bool, error)
	DeleteCommunityMessage(ctx context.Context, messageID string) (bool, error)
	ShareContent(ctx context.Context, input dto.ShareContentInput) (bool, error)
	BookmarkContent(ctx context.Context, clientID string, contentItemID int) (bool, error)
	UnBookmarkContent(ctx context.Context, clientID string, contentItemID int) (bool, error)
	LikeContent(ctx context.Context, clientID string, contentID int) (bool, error)
	UnlikeContent(ctx context.Context, clientID string, contentID int) (bool, error)
	ViewContent(ctx context.Context, clientID string, contentID int) (bool, error)
	DeleteFacility(ctx context.Context, identifier dto.FacilityIdentifierInput) (bool, error)
	ReactivateFacility(ctx context.Context, identifier dto.FacilityIdentifierInput) (bool, error)
	InactivateFacility(ctx context.Context, identifier dto.FacilityIdentifierInput) (bool, error)
	AddFacilityContact(ctx context.Context, facilityID string, contact string) (bool, error)
	AddFacilityToProgram(ctx context.Context, facilityIDs []string) (bool, error)
	SendFeedback(ctx context.Context, input dto.FeedbackResponseInput) (bool, error)
	CreateHealthDiaryEntry(ctx context.Context, clientID string, note *string, mood string, reportToStaff bool) (bool, error)
	ShareHealthDiaryEntry(ctx context.Context, healthDiaryEntryID string, shareEntireHealthDiary bool) (bool, error)
	CollectMetric(ctx context.Context, input domain.Metric) (bool, error)
	SendFCMNotification(ctx context.Context, registrationTokens []string, data map[string]interface{}, notification firebasetools.FirebaseSimpleNotificationInput) (bool, error)
	ReadNotifications(ctx context.Context, ids []string) (bool, error)
	CreateOrganisation(ctx context.Context, input dto.OrganisationInput) (bool, error)
	DeleteOrganisation(ctx context.Context, organisationID string) (bool, error)
	CreateProgram(ctx context.Context, input dto.ProgramInput) (bool, error)
	SetStaffProgram(ctx context.Context, programID string) (*domain.StaffResponse, error)
	SetClientProgram(ctx context.Context, programID string) (*domain.ClientResponse, error)
	CreateScreeningTool(ctx context.Context, input dto.ScreeningToolInput) (bool, error)
	RespondToScreeningTool(ctx context.Context, input dto.QuestionnaireScreeningToolResponseInput) (bool, error)
	AnswerScreeningToolQuestion(ctx context.Context, screeningToolResponses []*dto.ScreeningToolQuestionResponseInput) (bool, error)
	RecordSecurityQuestionResponses(ctx context.Context, input []*dto.SecurityQuestionResponseInput) ([]*domain.RecordSecurityQuestionResponse, error)
	SetInProgressBy(ctx context.Context, serviceRequestID string, staffID string) (bool, error)
	CreateServiceRequest(ctx context.Context, input dto.ServiceRequestInput) (bool, error)
	ResolveServiceRequest(ctx context.Context, staffID string, requestID string, action []string, comment *string) (bool, error)
	VerifyClientPinResetServiceRequest(ctx context.Context, clientID string, serviceRequestID string, cccNumber string, phoneNumber string, physicalIdentityVerified bool, state string) (bool, error)
	VerifyStaffPinResetServiceRequest(ctx context.Context, phoneNumber string, serviceRequestID string, verificationStatus string) (bool, error)
	SendClientSurveyLinks(ctx context.Context, facilityID string, formID string, projectID int, filterParams *dto.ClientFilterParamsInput) (bool, error)
	VerifySurveySubmission(ctx context.Context, input dto.VerifySurveySubmissionInput) (bool, error)
	AcceptTerms(ctx context.Context, userID string, termsID int) (bool, error)
	SetNickName(ctx context.Context, userID string, nickname string) (bool, error)
	CompleteOnboardingTour(ctx context.Context, userID string, flavour feedlib.Flavour) (bool, error)
	RegisterClient(ctx context.Context, input *dto.ClientRegistrationInput) (*dto.ClientRegistrationOutput, error)
	RegisterStaff(ctx context.Context, input dto.StaffRegistrationInput) (*dto.StaffRegistrationOutput, error)
	RegisterCaregiver(ctx context.Context, input dto.CaregiverInput) (*domain.CaregiverProfile, error)
	RegisterClientAsCaregiver(ctx context.Context, clientID string, caregiverNumber string) (*domain.CaregiverProfile, error)
	OptOut(ctx context.Context, phoneNumber string, flavour feedlib.Flavour) (bool, error)
	SetPushToken(ctx context.Context, token string) (bool, error)
	InviteUser(ctx context.Context, userID string, phoneNumber string, flavour feedlib.Flavour, reinvite *bool) (bool, error)
	SetUserPin(ctx context.Context, input *dto.PINInput) (bool, error)
	TransferClientToFacility(ctx context.Context, clientID string, facilityID string) (bool, error)
	SetStaffDefaultFacility(ctx context.Context, staffID string, facilityID string) (*domain.Facility, error)
	SetClientDefaultFacility(ctx context.Context, clientID string, facilityID string) (*domain.Facility, error)
	AddFacilitiesToStaffProfile(ctx context.Context, staffID string, facilities []string) (bool, error)
	AddFacilitiesToClientProfile(ctx context.Context, clientID string, facilities []string) (bool, error)
	RemoveFacilitiesFromClientProfile(ctx context.Context, clientID string, facilities []string) (bool, error)
	AssignCaregiver(ctx context.Context, input dto.ClientCaregiverInput) (bool, error)
	RemoveFacilitiesFromStaffProfile(ctx context.Context, staffID string, facilities []string) (bool, error)
	RegisterExistingUserAsStaff(ctx context.Context, input dto.ExistingUserStaffInput) (*dto.StaffRegistrationOutput, error)
	ConsentToAClientCaregiver(ctx context.Context, clientID string, caregiverID string, consent bool) (bool, error)
	ConsentToManagingClient(ctx context.Context, caregiverID string, clientID string, consent bool) (bool, error)
	RegisterExistingUserAsClient(ctx context.Context, input dto.ExistingUserClientInput) (*dto.ClientRegistrationOutput, error)
	SetCaregiverCurrentClient(ctx context.Context, clientID string) (*domain.ClientProfile, error)
	SetCaregiverCurrentFacility(ctx context.Context, clientID string, facilityID string) (*domain.Facility, error)
	RegisterExistingUserAsCaregiver(ctx context.Context, userID string, caregiverNumber string) (*domain.CaregiverProfile, error)
	UpdateProfile(ctx context.Context, userID string, cccNumber *string, username *string, phoneNumber *string, programID string, flavour feedlib.Flavour) (bool, error)
}
type QueryResolver interface {
	FetchClientAppointments(ctx context.Context, clientID string, paginationInput dto.PaginationsInput, filters []*firebasetools.FilterParam) (*domain.AppointmentsPage, error)
	NextRefill(ctx context.Context, clientID string) (*scalarutils.Date, error)
	GetUserRoles(ctx context.Context, userID string, organisationID string) ([]*domain.AuthorityRole, error)
	GetAllAuthorityRoles(ctx context.Context) ([]*domain.AuthorityRole, error)
	ListMembers(ctx context.Context, input *stream_chat.QueryOption) ([]*domain.Member, error)
	ListCommunityBannedMembers(ctx context.Context, communityID string) ([]*domain.Member, error)
	InviteMembersToCommunity(ctx context.Context, communityID string, memberIDs []string) (bool, error)
	ListCommunities(ctx context.Context, input *stream_chat.QueryOption) ([]*domain.Community, error)
	ListCommunityMembers(ctx context.Context, communityID string, input *stream_chat.QueryOption) ([]*domain.CommunityMember, error)
	ListPendingInvites(ctx context.Context, memberID string, input *stream_chat.QueryOption) ([]*domain.Community, error)
	RecommendedCommunities(ctx context.Context, clientID string, limit int) ([]*domain.Community, error)
	ListFlaggedMessages(ctx context.Context, communityCid *string, memberIDs []*string) ([]*domain.MessageFlag, error)
	GetContent(ctx context.Context, categoryID *int, limit string) (*domain.Content, error)
	ListContentCategories(ctx context.Context) ([]*domain.ContentItemCategory, error)
	GetUserBookmarkedContent(ctx context.Context, clientID string) (*domain.Content, error)
	CheckIfUserHasLikedContent(ctx context.Context, clientID string, contentID int) (bool, error)
	CheckIfUserBookmarkedContent(ctx context.Context, clientID string, contentID int) (bool, error)
	GetFAQs(ctx context.Context, flavour feedlib.Flavour) (*domain.Content, error)
	SearchFacility(ctx context.Context, searchParameter *string) ([]*domain.Facility, error)
	RetrieveFacility(ctx context.Context, id string, active bool) (*domain.Facility, error)
	RetrieveFacilityByIdentifier(ctx context.Context, identifier dto.FacilityIdentifierInput, isActive bool) (*domain.Facility, error)
	ListFacilities(ctx context.Context, searchTerm *string, filterInput []*dto.FiltersInput, paginationInput dto.PaginationsInput) (*domain.FacilityPage, error)
	CanRecordMood(ctx context.Context, clientID string) (bool, error)
	GetHealthDiaryQuote(ctx context.Context, limit int) ([]*domain.ClientHealthDiaryQuote, error)
	GetClientHealthDiaryEntries(ctx context.Context, clientID string, moodType *enums.Mood, shared *bool) ([]*domain.ClientHealthDiaryEntry, error)
	GetSharedHealthDiaryEntries(ctx context.Context, clientID string, facilityID string) ([]*domain.ClientHealthDiaryEntry, error)
	FetchNotifications(ctx context.Context, userID string, flavour feedlib.Flavour, paginationInput dto.PaginationsInput, filters *domain.NotificationFilters) (*domain.NotificationsPage, error)
	FetchNotificationTypeFilters(ctx context.Context, flavour feedlib.Flavour) ([]*domain.NotificationTypeFilter, error)
	ListOrganisations(ctx context.Context, paginationInput dto.PaginationsInput) (*dto.OrganisationOutputPage, error)
	SearchOrganisations(ctx context.Context, searchParameter string) ([]*domain.Organisation, error)
	SendOtp(ctx context.Context, username string, flavour feedlib.Flavour) (*domain.OTPResponse, error)
	ListUserPrograms(ctx context.Context, userID string, flavour feedlib.Flavour) (*dto.ProgramOutput, error)
	GetProgramFacilities(ctx context.Context, programID string) ([]*domain.Facility, error)
	SearchPrograms(ctx context.Context, searchParameter string) ([]*domain.Program, error)
	ListPrograms(ctx context.Context, pagination dto.PaginationsInput) (*domain.ProgramPage, error)
	GetAvailableScreeningTools(ctx context.Context, clientID string, facilityID string) ([]*domain.ScreeningTool, error)
	GetScreeningToolByID(ctx context.Context, id string) (*domain.ScreeningTool, error)
	GetFacilityRespondedScreeningTools(ctx context.Context, facilityID string, paginationInput dto.PaginationsInput) (*domain.ScreeningToolPage, error)
	GetScreeningToolRespondents(ctx context.Context, facilityID string, screeningToolID string, searchTerm *string, paginationInput dto.PaginationsInput) (*domain.ScreeningToolRespondentsPage, error)
	GetScreeningToolResponse(ctx context.Context, id string) (*domain.QuestionnaireScreeningToolResponse, error)
	GetScreeningToolQuestions(ctx context.Context, toolType *string) ([]*domain.ScreeningToolQuestion, error)
	GetAvailableScreeningToolQuestions(ctx context.Context, clientID string) ([]*domain.AvailableScreeningTools, error)
	GetAvailableFacilityScreeningTools(ctx context.Context, facilityID string) ([]*domain.AvailableScreeningTools, error)
	GetAssessmentResponsesByToolType(ctx context.Context, facilityID string, toolType string) ([]*domain.ScreeningToolAssessmentResponse, error)
	GetScreeningToolServiceRequestResponses(ctx context.Context, clientID *string, toolType *enums.ScreeningToolType) (*domain.ScreeningToolResponsePayload, error)
	GetSecurityQuestions(ctx context.Context, flavour feedlib.Flavour) ([]*domain.SecurityQuestion, error)
	GetServiceRequests(ctx context.Context, requestType *string, requestStatus *string, facilityID string, flavour feedlib.Flavour) ([]*domain.ServiceRequest, error)
	GetPendingServiceRequestsCount(ctx context.Context, facilityID string) (*domain.ServiceRequestsCountResponse, error)
	SearchServiceRequests(ctx context.Context, searchTerm string, flavour feedlib.Flavour, requestType string, facilityID string) ([]*domain.ServiceRequest, error)
	ListSurveys(ctx context.Context, projectID int) ([]*domain.SurveyForm, error)
	GetUserSurveyForms(ctx context.Context, userID string) ([]*domain.UserSurvey, error)
	ListSurveyRespondents(ctx context.Context, projectID int, formID string, paginationInput dto.PaginationsInput) (*domain.SurveyRespondentPage, error)
	GetSurveyServiceRequestUser(ctx context.Context, facilityID string, projectID int, formID string, paginationInput dto.PaginationsInput) (*domain.SurveyServiceRequestUserPage, error)
	GetSurveyResponse(ctx context.Context, input dto.SurveyResponseInput) ([]*domain.SurveyResponse, error)
	GetSurveyWithServiceRequest(ctx context.Context, facilityID string) ([]*dto.SurveysWithServiceRequest, error)
	GetCurrentTerms(ctx context.Context) (*domain.TermsOfService, error)
	VerifyPin(ctx context.Context, userID string, flavour feedlib.Flavour, pin string) (bool, error)
	SearchClientUser(ctx context.Context, searchParameter string) ([]*domain.ClientProfile, error)
	SearchStaffUser(ctx context.Context, searchParameter string) ([]*domain.StaffProfile, error)
	SearchCaregiverUser(ctx context.Context, searchParameter string) ([]*domain.CaregiverProfile, error)
	GetClientProfileByCCCNumber(ctx context.Context, cCCNumber string) (*domain.ClientProfile, error)
	GetCaregiverManagedClients(ctx context.Context, userID string, paginationInput dto.PaginationsInput) (*dto.ManagedClientOutputPage, error)
	ListClientsCaregivers(ctx context.Context, clientID string, paginationInput *dto.PaginationsInput) (*dto.CaregiverProfileOutputPage, error)
	GetStaffFacilities(ctx context.Context, staffID string, paginationInput dto.PaginationsInput) (*dto.FacilityOutputPage, error)
	GetClientFacilities(ctx context.Context, clientID string, paginationInput dto.PaginationsInput) (*dto.FacilityOutputPage, error)
	CheckIdentifierExists(ctx context.Context, identifierType enums.ClientIdentifierType, identifierValue string) (bool, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "AIModerationResponse.explicit":
		if e.complexity.AIModerationResponse.Explicit == nil {
			break
		}

		return e.complexity.AIModerationResponse.Explicit(childComplexity), true

	case "AIModerationResponse.spam":
		if e.complexity.AIModerationResponse.Spam == nil {
			break
		}

		return e.complexity.AIModerationResponse.Spam(childComplexity), true

	case "AIModerationResponse.toxic":
		if e.complexity.AIModerationResponse.Toxic == nil {
			break
		}

		return e.complexity.AIModerationResponse.Toxic(childComplexity), true

	case "AgeRange.lowerBound":
		if e.complexity.AgeRange.LowerBound == nil {
			break
		}

		return e.complexity.AgeRange.LowerBound(childComplexity), true

	case "AgeRange.upperBound":
		if e.complexity.AgeRange.UpperBound == nil {
			break
		}

		return e.complexity.AgeRange.UpperBound(childComplexity), true

	case "Appointment.date":
		if e.complexity.Appointment.Date == nil {
			break
		}

		return e.complexity.Appointment.Date(childComplexity), true

	case "Appointment.hasRescheduledAppointment":
		if e.complexity.Appointment.HasRescheduledAppointment == nil {
			break
		}

		return e.complexity.Appointment.HasRescheduledAppointment(childComplexity), true

	case "Appointment.id":
		if e.complexity.Appointment.ID == nil {
			break
		}

		return e.complexity.Appointment.ID(childComplexity), true

	case "Appointment.reason":
		if e.complexity.Appointment.Reason == nil {
			break
		}

		return e.complexity.Appointment.Reason(childComplexity), true

	case "AppointmentsPage.appointments":
		if e.complexity.AppointmentsPage.Appointments == nil {
			break
		}

		return e.complexity.AppointmentsPage.Appointments(childComplexity), true

	case "AppointmentsPage.pagination":
		if e.complexity.AppointmentsPage.Pagination == nil {
			break
		}

		return e.complexity.AppointmentsPage.Pagination(childComplexity), true

	case "Attachment.asset_url":
		if e.complexity.Attachment.AssetURL == nil {
			break
		}

		return e.complexity.Attachment.AssetURL(childComplexity), true

	case "Attachment.author_name":
		if e.complexity.Attachment.AuthorName == nil {
			break
		}

		return e.complexity.Attachment.AuthorName(childComplexity), true

	case "Attachment.image_url":
		if e.complexity.Attachment.ImageURL == nil {
			break
		}

		return e.complexity.Attachment.ImageURL(childComplexity), true

	case "Attachment.og_scrape_url":
		if e.complexity.Attachment.OgScrapeURL == nil {
			break
		}

		return e.complexity.Attachment.OgScrapeURL(childComplexity), true

	case "Attachment.text":
		if e.complexity.Attachment.Text == nil {
			break
		}

		return e.complexity.Attachment.Text(childComplexity), true

	case "Attachment.thumb_url":
		if e.complexity.Attachment.ThumbURL == nil {
			break
		}

		return e.complexity.Attachment.ThumbURL(childComplexity), true

	case "Attachment.title":
		if e.complexity.Attachment.Title == nil {
			break
		}

		return e.complexity.Attachment.Title(childComplexity), true

	case "Attachment.title_link":
		if e.complexity.Attachment.TitleLink == nil {
			break
		}

		return e.complexity.Attachment.TitleLink(childComplexity), true

	case "Attachment.type":
		if e.complexity.Attachment.Type == nil {
			break
		}

		return e.complexity.Attachment.Type(childComplexity), true

	case "Author.id":
		if e.complexity.Author.ID == nil {
			break
		}

		return e.complexity.Author.ID(childComplexity), true

	case "AuthorityPermission.active":
		if e.complexity.AuthorityPermission.Active == nil {
			break
		}

		return e.complexity.AuthorityPermission.Active(childComplexity), true

	case "AuthorityPermission.permissionID":
		if e.complexity.AuthorityPermission.PermissionID == nil {
			break
		}

		return e.complexity.AuthorityPermission.PermissionID(childComplexity), true

	case "AuthorityRole.active":
		if e.complexity.AuthorityRole.Active == nil {
			break
		}

		return e.complexity.AuthorityRole.Active(childComplexity), true

	case "AuthorityRole.authorityRoleID":
		if e.complexity.AuthorityRole.AuthorityRoleID == nil {
			break
		}

		return e.complexity.AuthorityRole.AuthorityRoleID(childComplexity), true

	case "AuthorityRole.name":
		if e.complexity.AuthorityRole.Name == nil {
			break
		}

		return e.complexity.AuthorityRole.Name(childComplexity), true

	case "AvailableScreeningTools.toolType":
		if e.complexity.AvailableScreeningTools.ToolType == nil {
			break
		}

		return e.complexity.AvailableScreeningTools.ToolType(childComplexity), true

	case "CaregiverProfile.caregiverNumber":
		if e.complexity.CaregiverProfile.CaregiverNumber == nil {
			break
		}

		return e.complexity.CaregiverProfile.CaregiverNumber(childComplexity), true

	case "CaregiverProfile.consent":
		if e.complexity.CaregiverProfile.Consent == nil {
			break
		}

		return e.complexity.CaregiverProfile.Consent(childComplexity), true

	case "CaregiverProfile.currentClient":
		if e.complexity.CaregiverProfile.CurrentClient == nil {
			break
		}

		return e.complexity.CaregiverProfile.CurrentClient(childComplexity), true

	case "CaregiverProfile.currentFacility":
		if e.complexity.CaregiverProfile.CurrentFacility == nil {
			break
		}

		return e.complexity.CaregiverProfile.CurrentFacility(childComplexity), true

	case "CaregiverProfile.id":
		if e.complexity.CaregiverProfile.ID == nil {
			break
		}

		return e.complexity.CaregiverProfile.ID(childComplexity), true

	case "CaregiverProfile.isClient":
		if e.complexity.CaregiverProfile.IsClient == nil {
			break
		}

		return e.complexity.CaregiverProfile.IsClient(childComplexity), true

	case "CaregiverProfile.user":
		if e.complexity.CaregiverProfile.User == nil {
			break
		}

		return e.complexity.CaregiverProfile.User(childComplexity), true

	case "CaregiverProfileOutputPage.caregivers":
		if e.complexity.CaregiverProfileOutputPage.Caregivers == nil {
			break
		}

		return e.complexity.CaregiverProfileOutputPage.Caregivers(childComplexity), true

	case "CaregiverProfileOutputPage.pagination":
		if e.complexity.CaregiverProfileOutputPage.Pagination == nil {
			break
		}

		return e.complexity.CaregiverProfileOutputPage.Pagination(childComplexity), true

	case "CategoryDetail.categoryIcon":
		if e.complexity.CategoryDetail.CategoryIcon == nil {
			break
		}

		return e.complexity.CategoryDetail.CategoryIcon(childComplexity), true

	case "CategoryDetail.categoryName":
		if e.complexity.CategoryDetail.CategoryName == nil {
			break
		}

		return e.complexity.CategoryDetail.CategoryName(childComplexity), true

	case "CategoryDetail.id":
		if e.complexity.CategoryDetail.ID == nil {
			break
		}

		return e.complexity.CategoryDetail.ID(childComplexity), true

	case "ClientHealthDiaryEntry.active":
		if e.complexity.ClientHealthDiaryEntry.Active == nil {
			break
		}

		return e.complexity.ClientHealthDiaryEntry.Active(childComplexity), true

	case "ClientHealthDiaryEntry.clientID":
		if e.complexity.ClientHealthDiaryEntry.ClientID == nil {
			break
		}

		return e.complexity.ClientHealthDiaryEntry.ClientID(childComplexity), true

	case "ClientHealthDiaryEntry.clientName":
		if e.complexity.ClientHealthDiaryEntry.ClientName == nil {
			break
		}

		return e.complexity.ClientHealthDiaryEntry.ClientName(childComplexity), true

	case "ClientHealthDiaryEntry.createdAt":
		if e.complexity.ClientHealthDiaryEntry.CreatedAt == nil {
			break
		}

		return e.complexity.ClientHealthDiaryEntry.CreatedAt(childComplexity), true

	case "ClientHealthDiaryEntry.entryType":
		if e.complexity.ClientHealthDiaryEntry.EntryType == nil {
			break
		}

		return e.complexity.ClientHealthDiaryEntry.EntryType(childComplexity), true

	case "ClientHealthDiaryEntry.id":
		if e.complexity.ClientHealthDiaryEntry.ID == nil {
			break
		}

		return e.complexity.ClientHealthDiaryEntry.ID(childComplexity), true

	case "ClientHealthDiaryEntry.mood":
		if e.complexity.ClientHealthDiaryEntry.Mood == nil {
			break
		}

		return e.complexity.ClientHealthDiaryEntry.Mood(childComplexity), true

	case "ClientHealthDiaryEntry.note":
		if e.complexity.ClientHealthDiaryEntry.Note == nil {
			break
		}

		return e.complexity.ClientHealthDiaryEntry.Note(childComplexity), true

	case "ClientHealthDiaryEntry.phoneNumber":
		if e.complexity.ClientHealthDiaryEntry.PhoneNumber == nil {
			break
		}

		return e.complexity.ClientHealthDiaryEntry.PhoneNumber(childComplexity), true

	case "ClientHealthDiaryEntry.shareWithHealthWorker":
		if e.complexity.ClientHealthDiaryEntry.ShareWithHealthWorker == nil {
			break
		}

		return e.complexity.ClientHealthDiaryEntry.ShareWithHealthWorker(childComplexity), true

	case "ClientHealthDiaryEntry.sharedAt":
		if e.complexity.ClientHealthDiaryEntry.SharedAt == nil {
			break
		}

		return e.complexity.ClientHealthDiaryEntry.SharedAt(childComplexity), true

	case "ClientHealthDiaryQuote.author":
		if e.complexity.ClientHealthDiaryQuote.Author == nil {
			break
		}

		return e.complexity.ClientHealthDiaryQuote.Author(childComplexity), true

	case "ClientHealthDiaryQuote.quote":
		if e.complexity.ClientHealthDiaryQuote.Quote == nil {
			break
		}

		return e.complexity.ClientHealthDiaryQuote.Quote(childComplexity), true

	case "ClientProfile.active":
		if e.complexity.ClientProfile.Active == nil {
			break
		}

		return e.complexity.ClientProfile.Active(childComplexity), true

	case "ClientProfile.cccNumber":
		if e.complexity.ClientProfile.CCCNumber == nil {
			break
		}

		return e.complexity.ClientProfile.CCCNumber(childComplexity), true

	case "ClientProfile.chvUserID":
		if e.complexity.ClientProfile.CHVUserID == nil {
			break
		}

		return e.complexity.ClientProfile.CHVUserID(childComplexity), true

	case "ClientProfile.chvUserName":
		if e.complexity.ClientProfile.CHVUserName == nil {
			break
		}

		return e.complexity.ClientProfile.CHVUserName(childComplexity), true

	case "ClientProfile.caregiverID":
		if e.complexity.ClientProfile.CaregiverID == nil {
			break
		}

		return e.complexity.ClientProfile.CaregiverID(childComplexity), true

	case "ClientProfile.clientCounselled":
		if e.complexity.ClientProfile.ClientCounselled == nil {
			break
		}

		return e.complexity.ClientProfile.ClientCounselled(childComplexity), true

	case "ClientProfile.clientTypes":
		if e.complexity.ClientProfile.ClientTypes == nil {
			break
		}

		return e.complexity.ClientProfile.ClientTypes(childComplexity), true

	case "ClientProfile.defaultFacility":
		if e.complexity.ClientProfile.DefaultFacility == nil {
			break
		}

		return e.complexity.ClientProfile.DefaultFacility(childComplexity), true

	case "ClientProfile.fhirPatientID":
		if e.complexity.ClientProfile.FHIRPatientID == nil {
			break
		}

		return e.complexity.ClientProfile.FHIRPatientID(childComplexity), true

	case "ClientProfile.healthRecordID":
		if e.complexity.ClientProfile.HealthRecordID == nil {
			break
		}

		return e.complexity.ClientProfile.HealthRecordID(childComplexity), true

	case "ClientProfile.id":
		if e.complexity.ClientProfile.ID == nil {
			break
		}

		return e.complexity.ClientProfile.ID(childComplexity), true

	case "ClientProfile.treatmentBuddy":
		if e.complexity.ClientProfile.TreatmentBuddy == nil {
			break
		}

		return e.complexity.ClientProfile.TreatmentBuddy(childComplexity), true

	case "ClientProfile.treatmentEnrollmentDate":
		if e.complexity.ClientProfile.TreatmentEnrollmentDate == nil {
			break
		}

		return e.complexity.ClientProfile.TreatmentEnrollmentDate(childComplexity), true

	case "ClientProfile.user":
		if e.complexity.ClientProfile.User == nil {
			break
		}

		return e.complexity.ClientProfile.User(childComplexity), true

	case "ClientRegistrationOutput.active":
		if e.complexity.ClientRegistrationOutput.Active == nil {
			break
		}

		return e.complexity.ClientRegistrationOutput.Active(childComplexity), true

	case "ClientRegistrationOutput.chv":
		if e.complexity.ClientRegistrationOutput.CHV == nil {
			break
		}

		return e.complexity.ClientRegistrationOutput.CHV(childComplexity), true

	case "ClientRegistrationOutput.caregiver":
		if e.complexity.ClientRegistrationOutput.Caregiver == nil {
			break
		}

		return e.complexity.ClientRegistrationOutput.Caregiver(childComplexity), true

	case "ClientRegistrationOutput.clientTypes":
		if e.complexity.ClientRegistrationOutput.ClientTypes == nil {
			break
		}

		return e.complexity.ClientRegistrationOutput.ClientTypes(childComplexity), true

	case "ClientRegistrationOutput.counselled":
		if e.complexity.ClientRegistrationOutput.Counselled == nil {
			break
		}

		return e.complexity.ClientRegistrationOutput.Counselled(childComplexity), true

	case "ClientRegistrationOutput.currentFacilityID":
		if e.complexity.ClientRegistrationOutput.CurrentFacilityID == nil {
			break
		}

		return e.complexity.ClientRegistrationOutput.CurrentFacilityID(childComplexity), true

	case "ClientRegistrationOutput.emrHealthRecordID":
		if e.complexity.ClientRegistrationOutput.EMRHealthRecordID == nil {
			break
		}

		return e.complexity.ClientRegistrationOutput.EMRHealthRecordID(childComplexity), true

	case "ClientRegistrationOutput.enrollmentDate":
		if e.complexity.ClientRegistrationOutput.EnrollmentDate == nil {
			break
		}

		return e.complexity.ClientRegistrationOutput.EnrollmentDate(childComplexity), true

	case "ClientRegistrationOutput.fhirPatientID":
		if e.complexity.ClientRegistrationOutput.FHIRPatientID == nil {
			break
		}

		return e.complexity.ClientRegistrationOutput.FHIRPatientID(childComplexity), true

	case "ClientRegistrationOutput.id":
		if e.complexity.ClientRegistrationOutput.ID == nil {
			break
		}

		return e.complexity.ClientRegistrationOutput.ID(childComplexity), true

	case "ClientRegistrationOutput.organisation":
		if e.complexity.ClientRegistrationOutput.Organisation == nil {
			break
		}

		return e.complexity.ClientRegistrationOutput.Organisation(childComplexity), true

	case "ClientRegistrationOutput.treatmentBuddy":
		if e.complexity.ClientRegistrationOutput.TreatmentBuddy == nil {
			break
		}

		return e.complexity.ClientRegistrationOutput.TreatmentBuddy(childComplexity), true

	case "ClientRegistrationOutput.userID":
		if e.complexity.ClientRegistrationOutput.UserID == nil {
			break
		}

		return e.complexity.ClientRegistrationOutput.UserID(childComplexity), true

	case "ClientResponse.clientProfile":
		if e.complexity.ClientResponse.ClientProfile == nil {
			break
		}

		return e.complexity.ClientResponse.ClientProfile(childComplexity), true

	case "ClientResponse.communityToken":
		if e.complexity.ClientResponse.CommunityToken == nil {
			break
		}

		return e.complexity.ClientResponse.CommunityToken(childComplexity), true

	case "ClientResponse.permissions":
		if e.complexity.ClientResponse.Permissions == nil {
			break
		}

		return e.complexity.ClientResponse.Permissions(childComplexity), true

	case "ClientResponse.roles":
		if e.complexity.ClientResponse.Roles == nil {
			break
		}

		return e.complexity.ClientResponse.Roles(childComplexity), true

	case "Community.ageRange":
		if e.complexity.Community.AgeRange == nil {
			break
		}

		return e.complexity.Community.AgeRange(childComplexity), true

	case "Community.cid":
		if e.complexity.Community.CID == nil {
			break
		}

		return e.complexity.Community.CID(childComplexity), true

	case "Community.clientType":
		if e.complexity.Community.ClientType == nil {
			break
		}

		return e.complexity.Community.ClientType(childComplexity), true

	case "Community.createdAt":
		if e.complexity.Community.CreatedAt == nil {
			break
		}

		return e.complexity.Community.CreatedAt(childComplexity), true

	case "Community.createdBy":
		if e.complexity.Community.CreatedBy == nil {
			break
		}

		return e.complexity.Community.CreatedBy(childComplexity), true

	case "Community.description":
		if e.complexity.Community.Description == nil {
			break
		}

		return e.complexity.Community.Description(childComplexity), true

	case "Community.disabled":
		if e.complexity.Community.Disabled == nil {
			break
		}

		return e.complexity.Community.Disabled(childComplexity), true

	case "Community.frozen":
		if e.complexity.Community.Frozen == nil {
			break
		}

		return e.complexity.Community.Frozen(childComplexity), true

	case "Community.gender":
		if e.complexity.Community.Gender == nil {
			break
		}

		return e.complexity.Community.Gender(childComplexity), true

	case "Community.id":
		if e.complexity.Community.ID == nil {
			break
		}

		return e.complexity.Community.ID(childComplexity), true

	case "Community.inviteOnly":
		if e.complexity.Community.InviteOnly == nil {
			break
		}

		return e.complexity.Community.InviteOnly(childComplexity), true

	case "Community.memberCount":
		if e.complexity.Community.MemberCount == nil {
			break
		}

		return e.complexity.Community.MemberCount(childComplexity), true

	case "Community.members":
		if e.complexity.Community.Members == nil {
			break
		}

		return e.complexity.Community.Members(childComplexity), true

	case "Community.name":
		if e.complexity.Community.Name == nil {
			break
		}

		return e.complexity.Community.Name(childComplexity), true

	case "Community.updatedAt":
		if e.complexity.Community.UpdatedAt == nil {
			break
		}

		return e.complexity.Community.UpdatedAt(childComplexity), true

	case "CommunityMember.inviteAcceptedAt":
		if e.complexity.CommunityMember.InviteAcceptedAt == nil {
			break
		}

		return e.complexity.CommunityMember.InviteAcceptedAt(childComplexity), true

	case "CommunityMember.inviteRejectedAt":
		if e.complexity.CommunityMember.InviteRejectedAt == nil {
			break
		}

		return e.complexity.CommunityMember.InviteRejectedAt(childComplexity), true

	case "CommunityMember.invited":
		if e.complexity.CommunityMember.Invited == nil {
			break
		}

		return e.complexity.CommunityMember.Invited(childComplexity), true

	case "CommunityMember.isModerator":
		if e.complexity.CommunityMember.IsModerator == nil {
			break
		}

		return e.complexity.CommunityMember.IsModerator(childComplexity), true

	case "CommunityMember.role":
		if e.complexity.CommunityMember.Role == nil {
			break
		}

		return e.complexity.CommunityMember.Role(childComplexity), true

	case "CommunityMember.user":
		if e.complexity.CommunityMember.User == nil {
			break
		}

		return e.complexity.CommunityMember.User(childComplexity), true

	case "CommunityMember.userID":
		if e.complexity.CommunityMember.UserID == nil {
			break
		}

		return e.complexity.CommunityMember.UserID(childComplexity), true

	case "CommunityMember.userType":
		if e.complexity.CommunityMember.UserType == nil {
			break
		}

		return e.complexity.CommunityMember.UserType(childComplexity), true

	case "ConsentStatus.consentStatus":
		if e.complexity.ConsentStatus.ConsentStatus == nil {
			break
		}

		return e.complexity.ConsentStatus.ConsentStatus(childComplexity), true

	case "Contact.active":
		if e.complexity.Contact.Active == nil {
			break
		}

		return e.complexity.Contact.Active(childComplexity), true

	case "Contact.contactType":
		if e.complexity.Contact.ContactType == nil {
			break
		}

		return e.complexity.Contact.ContactType(childComplexity), true

	case "Contact.contactValue":
		if e.complexity.Contact.ContactValue == nil {
			break
		}

		return e.complexity.Contact.ContactValue(childComplexity), true

	case "Contact.id":
		if e.complexity.Contact.ID == nil {
			break
		}

		return e.complexity.Contact.ID(childComplexity), true

	case "Contact.optedIn":
		if e.complexity.Contact.OptedIn == nil {
			break
		}

		return e.complexity.Contact.OptedIn(childComplexity), true

	case "Content.items":
		if e.complexity.Content.Items == nil {
			break
		}

		return e.complexity.Content.Items(childComplexity), true

	case "Content.meta":
		if e.complexity.Content.Meta == nil {
			break
		}

		return e.complexity.Content.Meta(childComplexity), true

	case "ContentItem.author":
		if e.complexity.ContentItem.Author == nil {
			break
		}

		return e.complexity.ContentItem.Author(childComplexity), true

	case "ContentItem.authorName":
		if e.complexity.ContentItem.AuthorName == nil {
			break
		}

		return e.complexity.ContentItem.AuthorName(childComplexity), true

	case "ContentItem.body":
		if e.complexity.ContentItem.Body == nil {
			break
		}

		return e.complexity.ContentItem.Body(childComplexity), true

	case "ContentItem.bookmarkCount":
		if e.complexity.ContentItem.BookmarkCount == nil {
			break
		}

		return e.complexity.ContentItem.BookmarkCount(childComplexity), true

	case "ContentItem.categoryDetails":
		if e.complexity.ContentItem.CategoryDetails == nil {
			break
		}

		return e.complexity.ContentItem.CategoryDetails(childComplexity), true

	case "ContentItem.date":
		if e.complexity.ContentItem.Date == nil {
			break
		}

		return e.complexity.ContentItem.Date(childComplexity), true

	case "ContentItem.documents":
		if e.complexity.ContentItem.Documents == nil {
			break
		}

		return e.complexity.ContentItem.Documents(childComplexity), true

	case "ContentItem.featuredMedia":
		if e.complexity.ContentItem.FeaturedMedia == nil {
			break
		}

		return e.complexity.ContentItem.FeaturedMedia(childComplexity), true

	case "ContentItem.galleryImages":
		if e.complexity.ContentItem.GalleryImages == nil {
			break
		}

		return e.complexity.ContentItem.GalleryImages(childComplexity), true

	case "ContentItem.heroImage":
		if e.complexity.ContentItem.HeroImage == nil {
			break
		}

		return e.complexity.ContentItem.HeroImage(childComplexity), true

	case "ContentItem.heroImageRendition":
		if e.complexity.ContentItem.HeroImageRendition == nil {
			break
		}

		return e.complexity.ContentItem.HeroImageRendition(childComplexity), true

	case "ContentItem.id":
		if e.complexity.ContentItem.ID == nil {
			break
		}

		return e.complexity.ContentItem.ID(childComplexity), true

	case "ContentItem.intro":
		if e.complexity.ContentItem.Intro == nil {
			break
		}

		return e.complexity.ContentItem.Intro(childComplexity), true

	case "ContentItem.itemType":
		if e.complexity.ContentItem.ItemType == nil {
			break
		}

		return e.complexity.ContentItem.ItemType(childComplexity), true

	case "ContentItem.likeCount":
		if e.complexity.ContentItem.LikeCount == nil {
			break
		}

		return e.complexity.ContentItem.LikeCount(childComplexity), true

	case "ContentItem.meta":
		if e.complexity.ContentItem.Meta == nil {
			break
		}

		return e.complexity.ContentItem.Meta(childComplexity), true

	case "ContentItem.shareCount":
		if e.complexity.ContentItem.ShareCount == nil {
			break
		}

		return e.complexity.ContentItem.ShareCount(childComplexity), true

	case "ContentItem.tagNames":
		if e.complexity.ContentItem.TagNames == nil {
			break
		}

		return e.complexity.ContentItem.TagNames(childComplexity), true

	case "ContentItem.timeEstimateSeconds":
		if e.complexity.ContentItem.TimeEstimateSeconds == nil {
			break
		}

		return e.complexity.ContentItem.TimeEstimateSeconds(childComplexity), true

	case "ContentItem.title":
		if e.complexity.ContentItem.Title == nil {
			break
		}

		return e.complexity.ContentItem.Title(childComplexity), true

	case "ContentItem.viewCount":
		if e.complexity.ContentItem.ViewCount == nil {
			break
		}

		return e.complexity.ContentItem.ViewCount(childComplexity), true

	case "ContentItemCategory.id":
		if e.complexity.ContentItemCategory.ID == nil {
			break
		}

		return e.complexity.ContentItemCategory.ID(childComplexity), true

	case "ContentItemCategory.iconUrl":
		if e.complexity.ContentItemCategory.IconURL == nil {
			break
		}

		return e.complexity.ContentItemCategory.IconURL(childComplexity), true

	case "ContentItemCategory.name":
		if e.complexity.ContentItemCategory.Name == nil {
			break
		}

		return e.complexity.ContentItemCategory.Name(childComplexity), true

	case "ContentMeta.contentDetailURL":
		if e.complexity.ContentMeta.ContentDetailURL == nil {
			break
		}

		return e.complexity.ContentMeta.ContentDetailURL(childComplexity), true

	case "ContentMeta.contentHTMLURL":
		if e.complexity.ContentMeta.ContentHTMLURL == nil {
			break
		}

		return e.complexity.ContentMeta.ContentHTMLURL(childComplexity), true

	case "ContentMeta.contentType":
		if e.complexity.ContentMeta.ContentType == nil {
			break
		}

		return e.complexity.ContentMeta.ContentType(childComplexity), true

	case "ContentMeta.firstPublishedAt":
		if e.complexity.ContentMeta.FirstPublishedAt == nil {
			break
		}

		return e.complexity.ContentMeta.FirstPublishedAt(childComplexity), true

	case "ContentMeta.locale":
		if e.complexity.ContentMeta.Locale == nil {
			break
		}

		return e.complexity.ContentMeta.Locale(childComplexity), true

	case "ContentMeta.seoTitle":
		if e.complexity.ContentMeta.SEOTitle == nil {
			break
		}

		return e.complexity.ContentMeta.SEOTitle(childComplexity), true

	case "ContentMeta.searchDescription":
		if e.complexity.ContentMeta.SearchDescription == nil {
			break
		}

		return e.complexity.ContentMeta.SearchDescription(childComplexity), true

	case "ContentMeta.showInMenus":
		if e.complexity.ContentMeta.ShowInMenus == nil {
			break
		}

		return e.complexity.ContentMeta.ShowInMenus(childComplexity), true

	case "ContentMeta.slug":
		if e.complexity.ContentMeta.Slug == nil {
			break
		}

		return e.complexity.ContentMeta.Slug(childComplexity), true

	case "Document.document":
		if e.complexity.Document.Document == nil {
			break
		}

		return e.complexity.Document.Document(childComplexity), true

	case "Document.id":
		if e.complexity.Document.ID == nil {
			break
		}

		return e.complexity.Document.ID(childComplexity), true

	case "Document.meta":
		if e.complexity.Document.Meta == nil {
			break
		}

		return e.complexity.Document.Meta(childComplexity), true

	case "DocumentData.id":
		if e.complexity.DocumentData.ID == nil {
			break
		}

		return e.complexity.DocumentData.ID(childComplexity), true

	case "DocumentData.meta":
		if e.complexity.DocumentData.Meta == nil {
			break
		}

		return e.complexity.DocumentData.Meta(childComplexity), true

	case "DocumentData.title":
		if e.complexity.DocumentData.Title == nil {
			break
		}

		return e.complexity.DocumentData.Title(childComplexity), true

	case "DocumentMeta.documentDetailUrl":
		if e.complexity.DocumentMeta.DocumentDetailURL == nil {
			break
		}

		return e.complexity.DocumentMeta.DocumentDetailURL(childComplexity), true

	case "DocumentMeta.documentDownloadUrl":
		if e.complexity.DocumentMeta.DocumentDownloadURL == nil {
			break
		}

		return e.complexity.DocumentMeta.DocumentDownloadURL(childComplexity), true

	case "DocumentMeta.type":
		if e.complexity.DocumentMeta.Type == nil {
			break
		}

		return e.complexity.DocumentMeta.Type(childComplexity), true

	case "Explicit.block":
		if e.complexity.Explicit.Block == nil {
			break
		}

		return e.complexity.Explicit.Block(childComplexity), true

	case "Explicit.flag":
		if e.complexity.Explicit.Flag == nil {
			break
		}

		return e.complexity.Explicit.Flag(childComplexity), true

	case "Facility.active":
		if e.complexity.Facility.Active == nil {
			break
		}

		return e.complexity.Facility.Active(childComplexity), true

	case "Facility.country":
		if e.complexity.Facility.Country == nil {
			break
		}

		return e.complexity.Facility.Country(childComplexity), true

	case "Facility.description":
		if e.complexity.Facility.Description == nil {
			break
		}

		return e.complexity.Facility.Description(childComplexity), true

	case "Facility.fhirOrganisationID":
		if e.complexity.Facility.FHIROrganisationID == nil {
			break
		}

		return e.complexity.Facility.FHIROrganisationID(childComplexity), true

	case "Facility.id":
		if e.complexity.Facility.ID == nil {
			break
		}

		return e.complexity.Facility.ID(childComplexity), true

	case "Facility.identifier":
		if e.complexity.Facility.Identifier == nil {
			break
		}

		return e.complexity.Facility.Identifier(childComplexity), true

	case "Facility.name":
		if e.complexity.Facility.Name == nil {
			break
		}

		return e.complexity.Facility.Name(childComplexity), true

	case "Facility.phone":
		if e.complexity.Facility.Phone == nil {
			break
		}

		return e.complexity.Facility.Phone(childComplexity), true

	case "Facility.workStationDetails":
		if e.complexity.Facility.WorkStationDetails == nil {
			break
		}

		return e.complexity.Facility.WorkStationDetails(childComplexity), true

	case "FacilityIdentifier.active":
		if e.complexity.FacilityIdentifier.Active == nil {
			break
		}

		return e.complexity.FacilityIdentifier.Active(childComplexity), true

	case "FacilityIdentifier.id":
		if e.complexity.FacilityIdentifier.ID == nil {
			break
		}

		return e.complexity.FacilityIdentifier.ID(childComplexity), true

	case "FacilityIdentifier.type":
		if e.complexity.FacilityIdentifier.Type == nil {
			break
		}

		return e.complexity.FacilityIdentifier.Type(childComplexity), true

	case "FacilityIdentifier.value":
		if e.complexity.FacilityIdentifier.Value == nil {
			break
		}

		return e.complexity.FacilityIdentifier.Value(childComplexity), true

	case "FacilityOutputPage.facilities":
		if e.complexity.FacilityOutputPage.Facilities == nil {
			break
		}

		return e.complexity.FacilityOutputPage.Facilities(childComplexity), true

	case "FacilityOutputPage.pagination":
		if e.complexity.FacilityOutputPage.Pagination == nil {
			break
		}

		return e.complexity.FacilityOutputPage.Pagination(childComplexity), true

	case "FacilityPage.facilities":
		if e.complexity.FacilityPage.Facilities == nil {
			break
		}

		return e.complexity.FacilityPage.Facilities(childComplexity), true

	case "FacilityPage.pagination":
		if e.complexity.FacilityPage.Pagination == nil {
			break
		}

		return e.complexity.FacilityPage.Pagination(childComplexity), true

	case "FeaturedMedia.duration":
		if e.complexity.FeaturedMedia.Duration == nil {
			break
		}

		return e.complexity.FeaturedMedia.Duration(childComplexity), true

	case "FeaturedMedia.height":
		if e.complexity.FeaturedMedia.Height == nil {
			break
		}

		return e.complexity.FeaturedMedia.Height(childComplexity), true

	case "FeaturedMedia.id":
		if e.complexity.FeaturedMedia.ID == nil {
			break
		}

		return e.complexity.FeaturedMedia.ID(childComplexity), true

	case "FeaturedMedia.thumbnail":
		if e.complexity.FeaturedMedia.Thumbnail == nil {
			break
		}

		return e.complexity.FeaturedMedia.Thumbnail(childComplexity), true

	case "FeaturedMedia.title":
		if e.complexity.FeaturedMedia.Title == nil {
			break
		}

		return e.complexity.FeaturedMedia.Title(childComplexity), true

	case "FeaturedMedia.type":
		if e.complexity.FeaturedMedia.Type == nil {
			break
		}

		return e.complexity.FeaturedMedia.Type(childComplexity), true

	case "FeaturedMedia.url":
		if e.complexity.FeaturedMedia.URL == nil {
			break
		}

		return e.complexity.FeaturedMedia.URL(childComplexity), true

	case "FeaturedMedia.width":
		if e.complexity.FeaturedMedia.Width == nil {
			break
		}

		return e.complexity.FeaturedMedia.Width(childComplexity), true

	case "FiltersParam.dataType":
		if e.complexity.FiltersParam.DataType == nil {
			break
		}

		return e.complexity.FiltersParam.DataType(childComplexity), true

	case "FiltersParam.name":
		if e.complexity.FiltersParam.Name == nil {
			break
		}

		return e.complexity.FiltersParam.Name(childComplexity), true

	case "FiltersParam.value":
		if e.complexity.FiltersParam.Value == nil {
			break
		}

		return e.complexity.FiltersParam.Value(childComplexity), true

	case "GalleryImage.id":
		if e.complexity.GalleryImage.ID == nil {
			break
		}

		return e.complexity.GalleryImage.ID(childComplexity), true

	case "GalleryImage.image":
		if e.complexity.GalleryImage.Image == nil {
			break
		}

		return e.complexity.GalleryImage.Image(childComplexity), true

	case "GetstreamMessage.attachments":
		if e.complexity.GetstreamMessage.Attachments == nil {
			break
		}

		return e.complexity.GetstreamMessage.Attachments(childComplexity), true

	case "GetstreamMessage.created_at":
		if e.complexity.GetstreamMessage.CreatedAt == nil {
			break
		}

		return e.complexity.GetstreamMessage.CreatedAt(childComplexity), true

	case "GetstreamMessage.deleted_at":
		if e.complexity.GetstreamMessage.DeletedAt == nil {
			break
		}

		return e.complexity.GetstreamMessage.DeletedAt(childComplexity), true

	case "GetstreamMessage.html":
		if e.complexity.GetstreamMessage.HTML == nil {
			break
		}

		return e.complexity.GetstreamMessage.HTML(childComplexity), true

	case "GetstreamMessage.id":
		if e.complexity.GetstreamMessage.ID == nil {
			break
		}

		return e.complexity.GetstreamMessage.ID(childComplexity), true

	case "GetstreamMessage.latest_reactions":
		if e.complexity.GetstreamMessage.LatestReactions == nil {
			break
		}

		return e.complexity.GetstreamMessage.LatestReactions(childComplexity), true

	case "GetstreamMessage.mentioned_users":
		if e.complexity.GetstreamMessage.MentionedUsers == nil {
			break
		}

		return e.complexity.GetstreamMessage.MentionedUsers(childComplexity), true

	case "GetstreamMessage.own_reactions":
		if e.complexity.GetstreamMessage.OwnReactions == nil {
			break
		}

		return e.complexity.GetstreamMessage.OwnReactions(childComplexity), true

	case "GetstreamMessage.parent_id":
		if e.complexity.GetstreamMessage.ParentID == nil {
			break
		}

		return e.complexity.GetstreamMessage.ParentID(childComplexity), true

	case "GetstreamMessage.pinned_at":
		if e.complexity.GetstreamMessage.PinnedAt == nil {
			break
		}

		return e.complexity.GetstreamMessage.PinnedAt(childComplexity), true

	case "GetstreamMessage.pinned_by":
		if e.complexity.GetstreamMessage.PinnedBy == nil {
			break
		}

		return e.complexity.GetstreamMessage.PinnedBy(childComplexity), true

	case "GetstreamMessage.reply_count":
		if e.complexity.GetstreamMessage.ReplyCount == nil {
			break
		}

		return e.complexity.GetstreamMessage.ReplyCount(childComplexity), true

	case "GetstreamMessage.shadowed":
		if e.complexity.GetstreamMessage.Shadowed == nil {
			break
		}

		return e.complexity.GetstreamMessage.Shadowed(childComplexity), true

	case "GetstreamMessage.show_in_channel":
		if e.complexity.GetstreamMessage.ShowInChannel == nil {
			break
		}

		return e.complexity.GetstreamMessage.ShowInChannel(childComplexity), true

	case "GetstreamMessage.silent":
		if e.complexity.GetstreamMessage.Silent == nil {
			break
		}

		return e.complexity.GetstreamMessage.Silent(childComplexity), true

	case "GetstreamMessage.text":
		if e.complexity.GetstreamMessage.Text == nil {
			break
		}

		return e.complexity.GetstreamMessage.Text(childComplexity), true

	case "GetstreamMessage.type":
		if e.complexity.GetstreamMessage.Type == nil {
			break
		}

		return e.complexity.GetstreamMessage.Type(childComplexity), true

	case "GetstreamMessage.updated_at":
		if e.complexity.GetstreamMessage.UpdatedAt == nil {
			break
		}

		return e.complexity.GetstreamMessage.UpdatedAt(childComplexity), true

	case "GetstreamMessage.user":
		if e.complexity.GetstreamMessage.User == nil {
			break
		}

		return e.complexity.GetstreamMessage.User(childComplexity), true

	case "HeroImage.id":
		if e.complexity.HeroImage.ID == nil {
			break
		}

		return e.complexity.HeroImage.ID(childComplexity), true

	case "HeroImage.meta":
		if e.complexity.HeroImage.Meta == nil {
			break
		}

		return e.complexity.HeroImage.Meta(childComplexity), true

	case "HeroImage.title":
		if e.complexity.HeroImage.Title == nil {
			break
		}

		return e.complexity.HeroImage.Title(childComplexity), true

	case "HeroImageRendition.alt":
		if e.complexity.HeroImageRendition.Alt == nil {
			break
		}

		return e.complexity.HeroImageRendition.Alt(childComplexity), true

	case "HeroImageRendition.height":
		if e.complexity.HeroImageRendition.Height == nil {
			break
		}

		return e.complexity.HeroImageRendition.Height(childComplexity), true

	case "HeroImageRendition.url":
		if e.complexity.HeroImageRendition.URL == nil {
			break
		}

		return e.complexity.HeroImageRendition.URL(childComplexity), true

	case "HeroImageRendition.width":
		if e.complexity.HeroImageRendition.Width == nil {
			break
		}

		return e.complexity.HeroImageRendition.Width(childComplexity), true

	case "ImageDetail.id":
		if e.complexity.ImageDetail.ID == nil {
			break
		}

		return e.complexity.ImageDetail.ID(childComplexity), true

	case "ImageDetail.meta":
		if e.complexity.ImageDetail.Meta == nil {
			break
		}

		return e.complexity.ImageDetail.Meta(childComplexity), true

	case "ImageDetail.title":
		if e.complexity.ImageDetail.Title == nil {
			break
		}

		return e.complexity.ImageDetail.Title(childComplexity), true

	case "ImageMeta.imageDetailUrl":
		if e.complexity.ImageMeta.ImageDetailURL == nil {
			break
		}

		return e.complexity.ImageMeta.ImageDetailURL(childComplexity), true

	case "ImageMeta.imageDownloadUrl":
		if e.complexity.ImageMeta.ImageDownloadURL == nil {
			break
		}

		return e.complexity.ImageMeta.ImageDownloadURL(childComplexity), true

	case "ImageMeta.type":
		if e.complexity.ImageMeta.Type == nil {
			break
		}

		return e.complexity.ImageMeta.Type(childComplexity), true

	case "ManagedClient.caregiverConsent":
		if e.complexity.ManagedClient.CaregiverConsent == nil {
			break
		}

		return e.complexity.ManagedClient.CaregiverConsent(childComplexity), true

	case "ManagedClient.clientConsent":
		if e.complexity.ManagedClient.ClientConsent == nil {
			break
		}

		return e.complexity.ManagedClient.ClientConsent(childComplexity), true

	case "ManagedClient.clientProfile":
		if e.complexity.ManagedClient.ClientProfile == nil {
			break
		}

		return e.complexity.ManagedClient.ClientProfile(childComplexity), true

	case "ManagedClient.workStationDetails":
		if e.complexity.ManagedClient.WorkStationDetails == nil {
			break
		}

		return e.complexity.ManagedClient.WorkStationDetails(childComplexity), true

	case "ManagedClientOutputPage.managedClients":
		if e.complexity.ManagedClientOutputPage.ManagedClients == nil {
			break
		}

		return e.complexity.ManagedClientOutputPage.ManagedClients(childComplexity), true

	case "ManagedClientOutputPage.pagination":
		if e.complexity.ManagedClientOutputPage.Pagination == nil {
			break
		}

		return e.complexity.ManagedClientOutputPage.Pagination(childComplexity), true

	case "Member.ageLowerBound":
		if e.complexity.Member.AgeLowerBound == nil {
			break
		}

		return e.complexity.Member.AgeLowerBound(childComplexity), true

	case "Member.ageUpperBound":
		if e.complexity.Member.AgeUpperBound == nil {
			break
		}

		return e.complexity.Member.AgeUpperBound(childComplexity), true

	case "Member.clientTypes":
		if e.complexity.Member.ClientTypes == nil {
			break
		}

		return e.complexity.Member.ClientTypes(childComplexity), true

	case "Member.extraData":
		if e.complexity.Member.ExtraData == nil {
			break
		}

		return e.complexity.Member.ExtraData(childComplexity), true

	case "Member.gender":
		if e.complexity.Member.Gender == nil {
			break
		}

		return e.complexity.Member.Gender(childComplexity), true

	case "Member.id":
		if e.complexity.Member.ID == nil {
			break
		}

		return e.complexity.Member.ID(childComplexity), true

	case "Member.name":
		if e.complexity.Member.Name == nil {
			break
		}

		return e.complexity.Member.Name(childComplexity), true

	case "Member.role":
		if e.complexity.Member.Role == nil {
			break
		}

		return e.complexity.Member.Role(childComplexity), true

	case "Member.userID":
		if e.complexity.Member.UserID == nil {
			break
		}

		return e.complexity.Member.UserID(childComplexity), true

	case "Member.userType":
		if e.complexity.Member.UserType == nil {
			break
		}

		return e.complexity.Member.UserType(childComplexity), true

	case "Member.username":
		if e.complexity.Member.Username == nil {
			break
		}

		return e.complexity.Member.Username(childComplexity), true

	case "MessageFlag.message":
		if e.complexity.MessageFlag.Message == nil {
			break
		}

		return e.complexity.MessageFlag.Message(childComplexity), true

	case "MessageFlag.user":
		if e.complexity.MessageFlag.User == nil {
			break
		}

		return e.complexity.MessageFlag.User(childComplexity), true

	case "Meta.totalCount":
		if e.complexity.Meta.TotalCount == nil {
			break
		}

		return e.complexity.Meta.TotalCount(childComplexity), true

	case "ModerationResult.action":
		if e.complexity.ModerationResult.Action == nil {
			break
		}

		return e.complexity.ModerationResult.Action(childComplexity), true

	case "ModerationResult.AI_moderation_response":
		if e.complexity.ModerationResult.AiModerationResponse == nil {
			break
		}

		return e.complexity.ModerationResult.AiModerationResponse(childComplexity), true

	case "ModerationResult.blocked_word":
		if e.complexity.ModerationResult.BlockedWord == nil {
			break
		}

		return e.complexity.ModerationResult.BlockedWord(childComplexity), true

	case "ModerationResult.blocklist_name":
		if e.complexity.ModerationResult.BlocklistName == nil {
			break
		}

		return e.complexity.ModerationResult.BlocklistName(childComplexity), true

	case "ModerationResult.created_at":
		if e.complexity.ModerationResult.CreatedAt == nil {
			break
		}

		return e.complexity.ModerationResult.CreatedAt(childComplexity), true

	case "ModerationResult.message_id":
		if e.complexity.ModerationResult.MessageID == nil {
			break
		}

		return e.complexity.ModerationResult.MessageID(childComplexity), true

	case "ModerationResult.moderated_by":
		if e.complexity.ModerationResult.ModeratedBy == nil {
			break
		}

		return e.complexity.ModerationResult.ModeratedBy(childComplexity), true

	case "ModerationResult.moderation_thresholds":
		if e.complexity.ModerationResult.ModerationThresholds == nil {
			break
		}

		return e.complexity.ModerationResult.ModerationThresholds(childComplexity), true

	case "ModerationResult.updated_at":
		if e.complexity.ModerationResult.UpdatedAt == nil {
			break
		}

		return e.complexity.ModerationResult.UpdatedAt(childComplexity), true

	case "ModerationResult.user_bad_karma":
		if e.complexity.ModerationResult.UserBadKarma == nil {
			break
		}

		return e.complexity.ModerationResult.UserBadKarma(childComplexity), true

	case "ModerationResult.user_karma":
		if e.complexity.ModerationResult.UserKarma == nil {
			break
		}

		return e.complexity.ModerationResult.UserKarma(childComplexity), true

	case "ModerationThresholds.explicit":
		if e.complexity.ModerationThresholds.Explicit == nil {
			break
		}

		return e.complexity.ModerationThresholds.Explicit(childComplexity), true

	case "ModerationThresholds.spam":
		if e.complexity.ModerationThresholds.Spam == nil {
			break
		}

		return e.complexity.ModerationThresholds.Spam(childComplexity), true

	case "ModerationThresholds.toxic":
		if e.complexity.ModerationThresholds.Toxic == nil {
			break
		}

		return e.complexity.ModerationThresholds.Toxic(childComplexity), true

	case "Mutation.acceptInvitation":
		if e.complexity.Mutation.AcceptInvitation == nil {
			break
		}

		args, err := ec.field_Mutation_acceptInvitation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AcceptInvitation(childComplexity, args["memberID"].(string), args["communityID"].(string)), true

	case "Mutation.acceptTerms":
		if e.complexity.Mutation.AcceptTerms == nil {
			break
		}

		args, err := ec.field_Mutation_acceptTerms_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AcceptTerms(childComplexity, args["userID"].(string), args["termsID"].(int)), true

	case "Mutation.addFacilitiesToClientProfile":
		if e.complexity.Mutation.AddFacilitiesToClientProfile == nil {
			break
		}

		args, err := ec.field_Mutation_addFacilitiesToClientProfile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddFacilitiesToClientProfile(childComplexity, args["clientID"].(string), args["facilities"].([]string)), true

	case "Mutation.addFacilitiesToStaffProfile":
		if e.complexity.Mutation.AddFacilitiesToStaffProfile == nil {
			break
		}

		args, err := ec.field_Mutation_addFacilitiesToStaffProfile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddFacilitiesToStaffProfile(childComplexity, args["staffID"].(string), args["facilities"].([]string)), true

	case "Mutation.addFacilityContact":
		if e.complexity.Mutation.AddFacilityContact == nil {
			break
		}

		args, err := ec.field_Mutation_addFacilityContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddFacilityContact(childComplexity, args["facilityID"].(string), args["contact"].(string)), true

	case "Mutation.addFacilityToProgram":
		if e.complexity.Mutation.AddFacilityToProgram == nil {
			break
		}

		args, err := ec.field_Mutation_addFacilityToProgram_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddFacilityToProgram(childComplexity, args["facilityIDs"].([]string)), true

	case "Mutation.addMembersToCommunity":
		if e.complexity.Mutation.AddMembersToCommunity == nil {
			break
		}

		args, err := ec.field_Mutation_addMembersToCommunity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddMembersToCommunity(childComplexity, args["memberIDs"].([]string), args["communityID"].(string)), true

	case "Mutation.addModerators":
		if e.complexity.Mutation.AddModerators == nil {
			break
		}

		args, err := ec.field_Mutation_addModerators_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddModerators(childComplexity, args["memberIDs"].([]string), args["communityID"].(string)), true

	case "Mutation.answerScreeningToolQuestion":
		if e.complexity.Mutation.AnswerScreeningToolQuestion == nil {
			break
		}

		args, err := ec.field_Mutation_answerScreeningToolQuestion_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AnswerScreeningToolQuestion(childComplexity, args["screeningToolResponses"].([]*dto.ScreeningToolQuestionResponseInput)), true

	case "Mutation.assignCaregiver":
		if e.complexity.Mutation.AssignCaregiver == nil {
			break
		}

		args, err := ec.field_Mutation_assignCaregiver_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignCaregiver(childComplexity, args["input"].(dto.ClientCaregiverInput)), true

	case "Mutation.assignOrRevokeRoles":
		if e.complexity.Mutation.AssignOrRevokeRoles == nil {
			break
		}

		args, err := ec.field_Mutation_assignOrRevokeRoles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignOrRevokeRoles(childComplexity, args["userID"].(string), args["roles"].([]*enums.UserRoleType)), true

	case "Mutation.banUser":
		if e.complexity.Mutation.BanUser == nil {
			break
		}

		args, err := ec.field_Mutation_banUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BanUser(childComplexity, args["memberID"].(string), args["bannedBy"].(string), args["communityID"].(string)), true

	case "Mutation.bookmarkContent":
		if e.complexity.Mutation.BookmarkContent == nil {
			break
		}

		args, err := ec.field_Mutation_bookmarkContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BookmarkContent(childComplexity, args["clientID"].(string), args["contentItemID"].(int)), true

	case "Mutation.collectMetric":
		if e.complexity.Mutation.CollectMetric == nil {
			break
		}

		args, err := ec.field_Mutation_collectMetric_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CollectMetric(childComplexity, args["input"].(domain.Metric)), true

	case "Mutation.completeOnboardingTour":
		if e.complexity.Mutation.CompleteOnboardingTour == nil {
			break
		}

		args, err := ec.field_Mutation_completeOnboardingTour_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CompleteOnboardingTour(childComplexity, args["userID"].(string), args["flavour"].(feedlib.Flavour)), true

	case "Mutation.consentToAClientCaregiver":
		if e.complexity.Mutation.ConsentToAClientCaregiver == nil {
			break
		}

		args, err := ec.field_Mutation_consentToAClientCaregiver_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConsentToAClientCaregiver(childComplexity, args["clientID"].(string), args["caregiverID"].(string), args["consent"].(bool)), true

	case "Mutation.consentToManagingClient":
		if e.complexity.Mutation.ConsentToManagingClient == nil {
			break
		}

		args, err := ec.field_Mutation_consentToManagingClient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConsentToManagingClient(childComplexity, args["caregiverID"].(string), args["clientID"].(string), args["consent"].(bool)), true

	case "Mutation.createCommunity":
		if e.complexity.Mutation.CreateCommunity == nil {
			break
		}

		args, err := ec.field_Mutation_createCommunity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCommunity(childComplexity, args["input"].(dto.CommunityInput)), true

	case "Mutation.createHealthDiaryEntry":
		if e.complexity.Mutation.CreateHealthDiaryEntry == nil {
			break
		}

		args, err := ec.field_Mutation_createHealthDiaryEntry_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateHealthDiaryEntry(childComplexity, args["clientID"].(string), args["note"].(*string), args["mood"].(string), args["reportToStaff"].(bool)), true

	case "Mutation.createOrganisation":
		if e.complexity.Mutation.CreateOrganisation == nil {
			break
		}

		args, err := ec.field_Mutation_createOrganisation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrganisation(childComplexity, args["input"].(dto.OrganisationInput)), true

	case "Mutation.createProgram":
		if e.complexity.Mutation.CreateProgram == nil {
			break
		}

		args, err := ec.field_Mutation_createProgram_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProgram(childComplexity, args["input"].(dto.ProgramInput)), true

	case "Mutation.createScreeningTool":
		if e.complexity.Mutation.CreateScreeningTool == nil {
			break
		}

		args, err := ec.field_Mutation_createScreeningTool_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateScreeningTool(childComplexity, args["input"].(dto.ScreeningToolInput)), true

	case "Mutation.createServiceRequest":
		if e.complexity.Mutation.CreateServiceRequest == nil {
			break
		}

		args, err := ec.field_Mutation_createServiceRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateServiceRequest(childComplexity, args["input"].(dto.ServiceRequestInput)), true

	case "Mutation.deleteCommunities":
		if e.complexity.Mutation.DeleteCommunities == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCommunities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCommunities(childComplexity, args["communityIDs"].([]string), args["hardDelete"].(bool)), true

	case "Mutation.deleteCommunityMessage":
		if e.complexity.Mutation.DeleteCommunityMessage == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCommunityMessage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCommunityMessage(childComplexity, args["messageID"].(string)), true

	case "Mutation.deleteFacility":
		if e.complexity.Mutation.DeleteFacility == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFacility_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFacility(childComplexity, args["identifier"].(dto.FacilityIdentifierInput)), true

	case "Mutation.deleteOrganisation":
		if e.complexity.Mutation.DeleteOrganisation == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOrganisation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOrganisation(childComplexity, args["organisationID"].(string)), true

	case "Mutation.demoteModerators":
		if e.complexity.Mutation.DemoteModerators == nil {
			break
		}

		args, err := ec.field_Mutation_demoteModerators_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DemoteModerators(childComplexity, args["communityID"].(string), args["memberIDs"].([]string)), true

	case "Mutation.inactivateFacility":
		if e.complexity.Mutation.InactivateFacility == nil {
			break
		}

		args, err := ec.field_Mutation_inactivateFacility_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InactivateFacility(childComplexity, args["identifier"].(dto.FacilityIdentifierInput)), true

	case "Mutation.inviteUser":
		if e.complexity.Mutation.InviteUser == nil {
			break
		}

		args, err := ec.field_Mutation_inviteUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InviteUser(childComplexity, args["userID"].(string), args["phoneNumber"].(string), args["flavour"].(feedlib.Flavour), args["reinvite"].(*bool)), true

	case "Mutation.likeContent":
		if e.complexity.Mutation.LikeContent == nil {
			break
		}

		args, err := ec.field_Mutation_likeContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LikeContent(childComplexity, args["clientID"].(string), args["contentID"].(int)), true

	case "Mutation.optOut":
		if e.complexity.Mutation.OptOut == nil {
			break
		}

		args, err := ec.field_Mutation_optOut_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OptOut(childComplexity, args["phoneNumber"].(string), args["flavour"].(feedlib.Flavour)), true

	case "Mutation.reactivateFacility":
		if e.complexity.Mutation.ReactivateFacility == nil {
			break
		}

		args, err := ec.field_Mutation_reactivateFacility_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReactivateFacility(childComplexity, args["identifier"].(dto.FacilityIdentifierInput)), true

	case "Mutation.readNotifications":
		if e.complexity.Mutation.ReadNotifications == nil {
			break
		}

		args, err := ec.field_Mutation_readNotifications_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReadNotifications(childComplexity, args["ids"].([]string)), true

	case "Mutation.recordSecurityQuestionResponses":
		if e.complexity.Mutation.RecordSecurityQuestionResponses == nil {
			break
		}

		args, err := ec.field_Mutation_recordSecurityQuestionResponses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordSecurityQuestionResponses(childComplexity, args["input"].([]*dto.SecurityQuestionResponseInput)), true

	case "Mutation.registerCaregiver":
		if e.complexity.Mutation.RegisterCaregiver == nil {
			break
		}

		args, err := ec.field_Mutation_registerCaregiver_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterCaregiver(childComplexity, args["input"].(dto.CaregiverInput)), true

	case "Mutation.registerClient":
		if e.complexity.Mutation.RegisterClient == nil {
			break
		}

		args, err := ec.field_Mutation_registerClient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterClient(childComplexity, args["input"].(*dto.ClientRegistrationInput)), true

	case "Mutation.registerClientAsCaregiver":
		if e.complexity.Mutation.RegisterClientAsCaregiver == nil {
			break
		}

		args, err := ec.field_Mutation_registerClientAsCaregiver_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterClientAsCaregiver(childComplexity, args["clientID"].(string), args["caregiverNumber"].(string)), true

	case "Mutation.registerExistingUserAsCaregiver":
		if e.complexity.Mutation.RegisterExistingUserAsCaregiver == nil {
			break
		}

		args, err := ec.field_Mutation_registerExistingUserAsCaregiver_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterExistingUserAsCaregiver(childComplexity, args["userID"].(string), args["caregiverNumber"].(string)), true

	case "Mutation.registerExistingUserAsClient":
		if e.complexity.Mutation.RegisterExistingUserAsClient == nil {
			break
		}

		args, err := ec.field_Mutation_registerExistingUserAsClient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterExistingUserAsClient(childComplexity, args["input"].(dto.ExistingUserClientInput)), true

	case "Mutation.registerExistingUserAsStaff":
		if e.complexity.Mutation.RegisterExistingUserAsStaff == nil {
			break
		}

		args, err := ec.field_Mutation_registerExistingUserAsStaff_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterExistingUserAsStaff(childComplexity, args["input"].(dto.ExistingUserStaffInput)), true

	case "Mutation.registerStaff":
		if e.complexity.Mutation.RegisterStaff == nil {
			break
		}

		args, err := ec.field_Mutation_registerStaff_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterStaff(childComplexity, args["input"].(dto.StaffRegistrationInput)), true

	case "Mutation.rejectInvitation":
		if e.complexity.Mutation.RejectInvitation == nil {
			break
		}

		args, err := ec.field_Mutation_rejectInvitation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RejectInvitation(childComplexity, args["memberID"].(string), args["communityID"].(string)), true

	case "Mutation.removeFacilitiesFromClientProfile":
		if e.complexity.Mutation.RemoveFacilitiesFromClientProfile == nil {
			break
		}

		args, err := ec.field_Mutation_removeFacilitiesFromClientProfile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveFacilitiesFromClientProfile(childComplexity, args["clientID"].(string), args["facilities"].([]string)), true

	case "Mutation.removeFacilitiesFromStaffProfile":
		if e.complexity.Mutation.RemoveFacilitiesFromStaffProfile == nil {
			break
		}

		args, err := ec.field_Mutation_removeFacilitiesFromStaffProfile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveFacilitiesFromStaffProfile(childComplexity, args["staffID"].(string), args["facilities"].([]string)), true

	case "Mutation.removeMembersFromCommunity":
		if e.complexity.Mutation.RemoveMembersFromCommunity == nil {
			break
		}

		args, err := ec.field_Mutation_removeMembersFromCommunity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveMembersFromCommunity(childComplexity, args["communityID"].(string), args["memberIDs"].([]string)), true

	case "Mutation.rescheduleAppointment":
		if e.complexity.Mutation.RescheduleAppointment == nil {
			break
		}

		args, err := ec.field_Mutation_rescheduleAppointment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RescheduleAppointment(childComplexity, args["appointmentID"].(string), args["date"].(scalarutils.Date)), true

	case "Mutation.resolveServiceRequest":
		if e.complexity.Mutation.ResolveServiceRequest == nil {
			break
		}

		args, err := ec.field_Mutation_resolveServiceRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResolveServiceRequest(childComplexity, args["staffID"].(string), args["requestID"].(string), args["action"].([]string), args["comment"].(*string)), true

	case "Mutation.respondToScreeningTool":
		if e.complexity.Mutation.RespondToScreeningTool == nil {
			break
		}

		args, err := ec.field_Mutation_respondToScreeningTool_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RespondToScreeningTool(childComplexity, args["input"].(dto.QuestionnaireScreeningToolResponseInput)), true

	case "Mutation.sendClientSurveyLinks":
		if e.complexity.Mutation.SendClientSurveyLinks == nil {
			break
		}

		args, err := ec.field_Mutation_sendClientSurveyLinks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendClientSurveyLinks(childComplexity, args["facilityID"].(string), args["formID"].(string), args["projectID"].(int), args["filterParams"].(*dto.ClientFilterParamsInput)), true

	case "Mutation.sendFCMNotification":
		if e.complexity.Mutation.SendFCMNotification == nil {
			break
		}

		args, err := ec.field_Mutation_sendFCMNotification_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendFCMNotification(childComplexity, args["registrationTokens"].([]string), args["data"].(map[string]interface{}), args["notification"].(firebasetools.FirebaseSimpleNotificationInput)), true

	case "Mutation.sendFeedback":
		if e.complexity.Mutation.SendFeedback == nil {
			break
		}

		args, err := ec.field_Mutation_sendFeedback_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendFeedback(childComplexity, args["input"].(dto.FeedbackResponseInput)), true

	case "Mutation.setCaregiverCurrentClient":
		if e.complexity.Mutation.SetCaregiverCurrentClient == nil {
			break
		}

		args, err := ec.field_Mutation_setCaregiverCurrentClient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetCaregiverCurrentClient(childComplexity, args["clientID"].(string)), true

	case "Mutation.setCaregiverCurrentFacility":
		if e.complexity.Mutation.SetCaregiverCurrentFacility == nil {
			break
		}

		args, err := ec.field_Mutation_setCaregiverCurrentFacility_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetCaregiverCurrentFacility(childComplexity, args["clientID"].(string), args["facilityID"].(string)), true

	case "Mutation.setClientDefaultFacility":
		if e.complexity.Mutation.SetClientDefaultFacility == nil {
			break
		}

		args, err := ec.field_Mutation_setClientDefaultFacility_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetClientDefaultFacility(childComplexity, args["clientID"].(string), args["facilityID"].(string)), true

	case "Mutation.setClientProgram":
		if e.complexity.Mutation.SetClientProgram == nil {
			break
		}

		args, err := ec.field_Mutation_setClientProgram_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetClientProgram(childComplexity, args["programID"].(string)), true

	case "Mutation.setInProgressBy":
		if e.complexity.Mutation.SetInProgressBy == nil {
			break
		}

		args, err := ec.field_Mutation_setInProgressBy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetInProgressBy(childComplexity, args["serviceRequestID"].(string), args["staffID"].(string)), true

	case "Mutation.setNickName":
		if e.complexity.Mutation.SetNickName == nil {
			break
		}

		args, err := ec.field_Mutation_setNickName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetNickName(childComplexity, args["userID"].(string), args["nickname"].(string)), true

	case "Mutation.setPushToken":
		if e.complexity.Mutation.SetPushToken == nil {
			break
		}

		args, err := ec.field_Mutation_setPushToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetPushToken(childComplexity, args["token"].(string)), true

	case "Mutation.setStaffDefaultFacility":
		if e.complexity.Mutation.SetStaffDefaultFacility == nil {
			break
		}

		args, err := ec.field_Mutation_setStaffDefaultFacility_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetStaffDefaultFacility(childComplexity, args["staffID"].(string), args["facilityID"].(string)), true

	case "Mutation.setStaffProgram":
		if e.complexity.Mutation.SetStaffProgram == nil {
			break
		}

		args, err := ec.field_Mutation_setStaffProgram_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetStaffProgram(childComplexity, args["programID"].(string)), true

	case "Mutation.setUserPIN":
		if e.complexity.Mutation.SetUserPin == nil {
			break
		}

		args, err := ec.field_Mutation_setUserPIN_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetUserPin(childComplexity, args["input"].(*dto.PINInput)), true

	case "Mutation.shareContent":
		if e.complexity.Mutation.ShareContent == nil {
			break
		}

		args, err := ec.field_Mutation_shareContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ShareContent(childComplexity, args["input"].(dto.ShareContentInput)), true

	case "Mutation.shareHealthDiaryEntry":
		if e.complexity.Mutation.ShareHealthDiaryEntry == nil {
			break
		}

		args, err := ec.field_Mutation_shareHealthDiaryEntry_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ShareHealthDiaryEntry(childComplexity, args["healthDiaryEntryID"].(string), args["shareEntireHealthDiary"].(bool)), true

	case "Mutation.transferClientToFacility":
		if e.complexity.Mutation.TransferClientToFacility == nil {
			break
		}

		args, err := ec.field_Mutation_transferClientToFacility_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TransferClientToFacility(childComplexity, args["clientId"].(string), args["facilityID"].(string)), true

	case "Mutation.unBanUser":
		if e.complexity.Mutation.UnBanUser == nil {
			break
		}

		args, err := ec.field_Mutation_unBanUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnBanUser(childComplexity, args["memberID"].(string), args["communityID"].(string)), true

	case "Mutation.unBookmarkContent":
		if e.complexity.Mutation.UnBookmarkContent == nil {
			break
		}

		args, err := ec.field_Mutation_unBookmarkContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnBookmarkContent(childComplexity, args["clientID"].(string), args["contentItemID"].(int)), true

	case "Mutation.unlikeContent":
		if e.complexity.Mutation.UnlikeContent == nil {
			break
		}

		args, err := ec.field_Mutation_unlikeContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnlikeContent(childComplexity, args["clientID"].(string), args["contentID"].(int)), true

	case "Mutation.updateProfile":
		if e.complexity.Mutation.UpdateProfile == nil {
			break
		}

		args, err := ec.field_Mutation_updateProfile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProfile(childComplexity, args["userID"].(string), args["cccNumber"].(*string), args["username"].(*string), args["phoneNumber"].(*string), args["programID"].(string), args["flavour"].(feedlib.Flavour)), true

	case "Mutation.verifyClientPinResetServiceRequest":
		if e.complexity.Mutation.VerifyClientPinResetServiceRequest == nil {
			break
		}

		args, err := ec.field_Mutation_verifyClientPinResetServiceRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.VerifyClientPinResetServiceRequest(childComplexity, args["clientID"].(string), args["serviceRequestID"].(string), args["cccNumber"].(string), args["phoneNumber"].(string), args["physicalIdentityVerified"].(bool), args["state"].(string)), true

	case "Mutation.verifyStaffPinResetServiceRequest":
		if e.complexity.Mutation.VerifyStaffPinResetServiceRequest == nil {
			break
		}

		args, err := ec.field_Mutation_verifyStaffPinResetServiceRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.VerifyStaffPinResetServiceRequest(childComplexity, args["phoneNumber"].(string), args["serviceRequestID"].(string), args["verificationStatus"].(string)), true

	case "Mutation.verifySurveySubmission":
		if e.complexity.Mutation.VerifySurveySubmission == nil {
			break
		}

		args, err := ec.field_Mutation_verifySurveySubmission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.VerifySurveySubmission(childComplexity, args["input"].(dto.VerifySurveySubmissionInput)), true

	case "Mutation.viewContent":
		if e.complexity.Mutation.ViewContent == nil {
			break
		}

		args, err := ec.field_Mutation_viewContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ViewContent(childComplexity, args["clientID"].(string), args["contentID"].(int)), true

	case "Notification.body":
		if e.complexity.Notification.Body == nil {
			break
		}

		return e.complexity.Notification.Body(childComplexity), true

	case "Notification.createdAt":
		if e.complexity.Notification.CreatedAt == nil {
			break
		}

		return e.complexity.Notification.CreatedAt(childComplexity), true

	case "Notification.id":
		if e.complexity.Notification.ID == nil {
			break
		}

		return e.complexity.Notification.ID(childComplexity), true

	case "Notification.isRead":
		if e.complexity.Notification.IsRead == nil {
			break
		}

		return e.complexity.Notification.IsRead(childComplexity), true

	case "Notification.title":
		if e.complexity.Notification.Title == nil {
			break
		}

		return e.complexity.Notification.Title(childComplexity), true

	case "Notification.type":
		if e.complexity.Notification.Type == nil {
			break
		}

		return e.complexity.Notification.Type(childComplexity), true

	case "NotificationTypeFilter.enum":
		if e.complexity.NotificationTypeFilter.Enum == nil {
			break
		}

		return e.complexity.NotificationTypeFilter.Enum(childComplexity), true

	case "NotificationTypeFilter.name":
		if e.complexity.NotificationTypeFilter.Name == nil {
			break
		}

		return e.complexity.NotificationTypeFilter.Name(childComplexity), true

	case "NotificationsPage.notifications":
		if e.complexity.NotificationsPage.Notifications == nil {
			break
		}

		return e.complexity.NotificationsPage.Notifications(childComplexity), true

	case "NotificationsPage.pagination":
		if e.complexity.NotificationsPage.Pagination == nil {
			break
		}

		return e.complexity.NotificationsPage.Pagination(childComplexity), true

	case "OTPResponse.otp":
		if e.complexity.OTPResponse.OTP == nil {
			break
		}

		return e.complexity.OTPResponse.OTP(childComplexity), true

	case "OTPResponse.phoneNumber":
		if e.complexity.OTPResponse.PhoneNumber == nil {
			break
		}

		return e.complexity.OTPResponse.PhoneNumber(childComplexity), true

	case "Organisation.description":
		if e.complexity.Organisation.Description == nil {
			break
		}

		return e.complexity.Organisation.Description(childComplexity), true

	case "Organisation.id":
		if e.complexity.Organisation.ID == nil {
			break
		}

		return e.complexity.Organisation.ID(childComplexity), true

	case "Organisation.name":
		if e.complexity.Organisation.Name == nil {
			break
		}

		return e.complexity.Organisation.Name(childComplexity), true

	case "OrganisationOutputPage.organisations":
		if e.complexity.OrganisationOutputPage.Organisations == nil {
			break
		}

		return e.complexity.OrganisationOutputPage.Organisations(childComplexity), true

	case "OrganisationOutputPage.pagination":
		if e.complexity.OrganisationOutputPage.Pagination == nil {
			break
		}

		return e.complexity.OrganisationOutputPage.Pagination(childComplexity), true

	case "Pagination.count":
		if e.complexity.Pagination.Count == nil {
			break
		}

		return e.complexity.Pagination.Count(childComplexity), true

	case "Pagination.currentPage":
		if e.complexity.Pagination.CurrentPage == nil {
			break
		}

		return e.complexity.Pagination.CurrentPage(childComplexity), true

	case "Pagination.limit":
		if e.complexity.Pagination.Limit == nil {
			break
		}

		return e.complexity.Pagination.Limit(childComplexity), true

	case "Pagination.nextPage":
		if e.complexity.Pagination.NextPage == nil {
			break
		}

		return e.complexity.Pagination.NextPage(childComplexity), true

	case "Pagination.previousPage":
		if e.complexity.Pagination.PreviousPage == nil {
			break
		}

		return e.complexity.Pagination.PreviousPage(childComplexity), true

	case "Pagination.totalPages":
		if e.complexity.Pagination.TotalPages == nil {
			break
		}

		return e.complexity.Pagination.TotalPages(childComplexity), true

	case "PostingHours.end":
		if e.complexity.PostingHours.End == nil {
			break
		}

		return e.complexity.PostingHours.End(childComplexity), true

	case "PostingHours.start":
		if e.complexity.PostingHours.Start == nil {
			break
		}

		return e.complexity.PostingHours.Start(childComplexity), true

	case "Program.active":
		if e.complexity.Program.Active == nil {
			break
		}

		return e.complexity.Program.Active(childComplexity), true

	case "Program.id":
		if e.complexity.Program.ID == nil {
			break
		}

		return e.complexity.Program.ID(childComplexity), true

	case "Program.name":
		if e.complexity.Program.Name == nil {
			break
		}

		return e.complexity.Program.Name(childComplexity), true

	case "Program.organisation":
		if e.complexity.Program.Organisation == nil {
			break
		}

		return e.complexity.Program.Organisation(childComplexity), true

	case "ProgramOutput.count":
		if e.complexity.ProgramOutput.Count == nil {
			break
		}

		return e.complexity.ProgramOutput.Count(childComplexity), true

	case "ProgramOutput.programs":
		if e.complexity.ProgramOutput.Programs == nil {
			break
		}

		return e.complexity.ProgramOutput.Programs(childComplexity), true

	case "ProgramPage.pagination":
		if e.complexity.ProgramPage.Pagination == nil {
			break
		}

		return e.complexity.ProgramPage.Pagination(childComplexity), true

	case "ProgramPage.programs":
		if e.complexity.ProgramPage.Programs == nil {
			break
		}

		return e.complexity.ProgramPage.Programs(childComplexity), true

	case "Query.canRecordMood":
		if e.complexity.Query.CanRecordMood == nil {
			break
		}

		args, err := ec.field_Query_canRecordMood_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CanRecordMood(childComplexity, args["clientID"].(string)), true

	case "Query.checkIdentifierExists":
		if e.complexity.Query.CheckIdentifierExists == nil {
			break
		}

		args, err := ec.field_Query_checkIdentifierExists_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CheckIdentifierExists(childComplexity, args["identifierType"].(enums.ClientIdentifierType), args["identifierValue"].(string)), true

	case "Query.checkIfUserBookmarkedContent":
		if e.complexity.Query.CheckIfUserBookmarkedContent == nil {
			break
		}

		args, err := ec.field_Query_checkIfUserBookmarkedContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CheckIfUserBookmarkedContent(childComplexity, args["clientID"].(string), args["contentID"].(int)), true

	case "Query.checkIfUserHasLikedContent":
		if e.complexity.Query.CheckIfUserHasLikedContent == nil {
			break
		}

		args, err := ec.field_Query_checkIfUserHasLikedContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CheckIfUserHasLikedContent(childComplexity, args["clientID"].(string), args["contentID"].(int)), true

	case "Query.fetchClientAppointments":
		if e.complexity.Query.FetchClientAppointments == nil {
			break
		}

		args, err := ec.field_Query_fetchClientAppointments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FetchClientAppointments(childComplexity, args["clientID"].(string), args["paginationInput"].(dto.PaginationsInput), args["filters"].([]*firebasetools.FilterParam)), true

	case "Query.fetchNotificationTypeFilters":
		if e.complexity.Query.FetchNotificationTypeFilters == nil {
			break
		}

		args, err := ec.field_Query_fetchNotificationTypeFilters_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FetchNotificationTypeFilters(childComplexity, args["flavour"].(feedlib.Flavour)), true

	case "Query.fetchNotifications":
		if e.complexity.Query.FetchNotifications == nil {
			break
		}

		args, err := ec.field_Query_fetchNotifications_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FetchNotifications(childComplexity, args["userID"].(string), args["flavour"].(feedlib.Flavour), args["paginationInput"].(dto.PaginationsInput), args["filters"].(*domain.NotificationFilters)), true

	case "Query.getAllAuthorityRoles":
		if e.complexity.Query.GetAllAuthorityRoles == nil {
			break
		}

		return e.complexity.Query.GetAllAuthorityRoles(childComplexity), true

	case "Query.getAssessmentResponsesByToolType":
		if e.complexity.Query.GetAssessmentResponsesByToolType == nil {
			break
		}

		args, err := ec.field_Query_getAssessmentResponsesByToolType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAssessmentResponsesByToolType(childComplexity, args["facilityID"].(string), args["toolType"].(string)), true

	case "Query.getAvailableFacilityScreeningTools":
		if e.complexity.Query.GetAvailableFacilityScreeningTools == nil {
			break
		}

		args, err := ec.field_Query_getAvailableFacilityScreeningTools_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAvailableFacilityScreeningTools(childComplexity, args["facilityID"].(string)), true

	case "Query.getAvailableScreeningToolQuestions":
		if e.complexity.Query.GetAvailableScreeningToolQuestions == nil {
			break
		}

		args, err := ec.field_Query_getAvailableScreeningToolQuestions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAvailableScreeningToolQuestions(childComplexity, args["clientID"].(string)), true

	case "Query.getAvailableScreeningTools":
		if e.complexity.Query.GetAvailableScreeningTools == nil {
			break
		}

		args, err := ec.field_Query_getAvailableScreeningTools_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAvailableScreeningTools(childComplexity, args["clientID"].(string), args["facilityID"].(string)), true

	case "Query.getCaregiverManagedClients":
		if e.complexity.Query.GetCaregiverManagedClients == nil {
			break
		}

		args, err := ec.field_Query_getCaregiverManagedClients_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCaregiverManagedClients(childComplexity, args["userID"].(string), args["paginationInput"].(dto.PaginationsInput)), true

	case "Query.getClientFacilities":
		if e.complexity.Query.GetClientFacilities == nil {
			break
		}

		args, err := ec.field_Query_getClientFacilities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetClientFacilities(childComplexity, args["clientID"].(string), args["paginationInput"].(dto.PaginationsInput)), true

	case "Query.getClientHealthDiaryEntries":
		if e.complexity.Query.GetClientHealthDiaryEntries == nil {
			break
		}

		args, err := ec.field_Query_getClientHealthDiaryEntries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetClientHealthDiaryEntries(childComplexity, args["clientID"].(string), args["moodType"].(*enums.Mood), args["shared"].(*bool)), true

	case "Query.getClientProfileByCCCNumber":
		if e.complexity.Query.GetClientProfileByCCCNumber == nil {
			break
		}

		args, err := ec.field_Query_getClientProfileByCCCNumber_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetClientProfileByCCCNumber(childComplexity, args["CCCNumber"].(string)), true

	case "Query.getContent":
		if e.complexity.Query.GetContent == nil {
			break
		}

		args, err := ec.field_Query_getContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetContent(childComplexity, args["categoryID"].(*int), args["limit"].(string)), true

	case "Query.getCurrentTerms":
		if e.complexity.Query.GetCurrentTerms == nil {
			break
		}

		return e.complexity.Query.GetCurrentTerms(childComplexity), true

	case "Query.getFAQs":
		if e.complexity.Query.GetFAQs == nil {
			break
		}

		args, err := ec.field_Query_getFAQs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetFAQs(childComplexity, args["flavour"].(feedlib.Flavour)), true

	case "Query.getFacilityRespondedScreeningTools":
		if e.complexity.Query.GetFacilityRespondedScreeningTools == nil {
			break
		}

		args, err := ec.field_Query_getFacilityRespondedScreeningTools_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetFacilityRespondedScreeningTools(childComplexity, args["facilityID"].(string), args["paginationInput"].(dto.PaginationsInput)), true

	case "Query.getHealthDiaryQuote":
		if e.complexity.Query.GetHealthDiaryQuote == nil {
			break
		}

		args, err := ec.field_Query_getHealthDiaryQuote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetHealthDiaryQuote(childComplexity, args["limit"].(int)), true

	case "Query.getPendingServiceRequestsCount":
		if e.complexity.Query.GetPendingServiceRequestsCount == nil {
			break
		}

		args, err := ec.field_Query_getPendingServiceRequestsCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPendingServiceRequestsCount(childComplexity, args["facilityID"].(string)), true

	case "Query.getProgramFacilities":
		if e.complexity.Query.GetProgramFacilities == nil {
			break
		}

		args, err := ec.field_Query_getProgramFacilities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetProgramFacilities(childComplexity, args["programID"].(string)), true

	case "Query.getScreeningToolByID":
		if e.complexity.Query.GetScreeningToolByID == nil {
			break
		}

		args, err := ec.field_Query_getScreeningToolByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetScreeningToolByID(childComplexity, args["id"].(string)), true

	case "Query.getScreeningToolQuestions":
		if e.complexity.Query.GetScreeningToolQuestions == nil {
			break
		}

		args, err := ec.field_Query_getScreeningToolQuestions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetScreeningToolQuestions(childComplexity, args["toolType"].(*string)), true

	case "Query.getScreeningToolRespondents":
		if e.complexity.Query.GetScreeningToolRespondents == nil {
			break
		}

		args, err := ec.field_Query_getScreeningToolRespondents_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetScreeningToolRespondents(childComplexity, args["facilityID"].(string), args["screeningToolID"].(string), args["searchTerm"].(*string), args["paginationInput"].(dto.PaginationsInput)), true

	case "Query.getScreeningToolResponse":
		if e.complexity.Query.GetScreeningToolResponse == nil {
			break
		}

		args, err := ec.field_Query_getScreeningToolResponse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetScreeningToolResponse(childComplexity, args["id"].(string)), true

	case "Query.getScreeningToolServiceRequestResponses":
		if e.complexity.Query.GetScreeningToolServiceRequestResponses == nil {
			break
		}

		args, err := ec.field_Query_getScreeningToolServiceRequestResponses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetScreeningToolServiceRequestResponses(childComplexity, args["clientID"].(*string), args["toolType"].(*enums.ScreeningToolType)), true

	case "Query.getSecurityQuestions":
		if e.complexity.Query.GetSecurityQuestions == nil {
			break
		}

		args, err := ec.field_Query_getSecurityQuestions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSecurityQuestions(childComplexity, args["flavour"].(feedlib.Flavour)), true

	case "Query.getServiceRequests":
		if e.complexity.Query.GetServiceRequests == nil {
			break
		}

		args, err := ec.field_Query_getServiceRequests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetServiceRequests(childComplexity, args["requestType"].(*string), args["requestStatus"].(*string), args["facilityID"].(string), args["flavour"].(feedlib.Flavour)), true

	case "Query.getSharedHealthDiaryEntries":
		if e.complexity.Query.GetSharedHealthDiaryEntries == nil {
			break
		}

		args, err := ec.field_Query_getSharedHealthDiaryEntries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSharedHealthDiaryEntries(childComplexity, args["clientID"].(string), args["facilityID"].(string)), true

	case "Query.getStaffFacilities":
		if e.complexity.Query.GetStaffFacilities == nil {
			break
		}

		args, err := ec.field_Query_getStaffFacilities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetStaffFacilities(childComplexity, args["staffID"].(string), args["paginationInput"].(dto.PaginationsInput)), true

	case "Query.getSurveyResponse":
		if e.complexity.Query.GetSurveyResponse == nil {
			break
		}

		args, err := ec.field_Query_getSurveyResponse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSurveyResponse(childComplexity, args["input"].(dto.SurveyResponseInput)), true

	case "Query.getSurveyServiceRequestUser":
		if e.complexity.Query.GetSurveyServiceRequestUser == nil {
			break
		}

		args, err := ec.field_Query_getSurveyServiceRequestUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSurveyServiceRequestUser(childComplexity, args["facilityID"].(string), args["projectID"].(int), args["formID"].(string), args["paginationInput"].(dto.PaginationsInput)), true

	case "Query.getSurveyWithServiceRequest":
		if e.complexity.Query.GetSurveyWithServiceRequest == nil {
			break
		}

		args, err := ec.field_Query_getSurveyWithServiceRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSurveyWithServiceRequest(childComplexity, args["facilityID"].(string)), true

	case "Query.getUserBookmarkedContent":
		if e.complexity.Query.GetUserBookmarkedContent == nil {
			break
		}

		args, err := ec.field_Query_getUserBookmarkedContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserBookmarkedContent(childComplexity, args["clientID"].(string)), true

	case "Query.getUserRoles":
		if e.complexity.Query.GetUserRoles == nil {
			break
		}

		args, err := ec.field_Query_getUserRoles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserRoles(childComplexity, args["userID"].(string), args["organisationID"].(string)), true

	case "Query.getUserSurveyForms":
		if e.complexity.Query.GetUserSurveyForms == nil {
			break
		}

		args, err := ec.field_Query_getUserSurveyForms_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserSurveyForms(childComplexity, args["userID"].(string)), true

	case "Query.inviteMembersToCommunity":
		if e.complexity.Query.InviteMembersToCommunity == nil {
			break
		}

		args, err := ec.field_Query_inviteMembersToCommunity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.InviteMembersToCommunity(childComplexity, args["communityID"].(string), args["memberIDs"].([]string)), true

	case "Query.listClientsCaregivers":
		if e.complexity.Query.ListClientsCaregivers == nil {
			break
		}

		args, err := ec.field_Query_listClientsCaregivers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListClientsCaregivers(childComplexity, args["clientID"].(string), args["paginationInput"].(*dto.PaginationsInput)), true

	case "Query.listCommunities":
		if e.complexity.Query.ListCommunities == nil {
			break
		}

		args, err := ec.field_Query_listCommunities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListCommunities(childComplexity, args["input"].(*stream_chat.QueryOption)), true

	case "Query.listCommunityBannedMembers":
		if e.complexity.Query.ListCommunityBannedMembers == nil {
			break
		}

		args, err := ec.field_Query_listCommunityBannedMembers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListCommunityBannedMembers(childComplexity, args["communityID"].(string)), true

	case "Query.listCommunityMembers":
		if e.complexity.Query.ListCommunityMembers == nil {
			break
		}

		args, err := ec.field_Query_listCommunityMembers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListCommunityMembers(childComplexity, args["communityID"].(string), args["input"].(*stream_chat.QueryOption)), true

	case "Query.listContentCategories":
		if e.complexity.Query.ListContentCategories == nil {
			break
		}

		return e.complexity.Query.ListContentCategories(childComplexity), true

	case "Query.listFacilities":
		if e.complexity.Query.ListFacilities == nil {
			break
		}

		args, err := ec.field_Query_listFacilities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListFacilities(childComplexity, args["searchTerm"].(*string), args["filterInput"].([]*dto.FiltersInput), args["paginationInput"].(dto.PaginationsInput)), true

	case "Query.listFlaggedMessages":
		if e.complexity.Query.ListFlaggedMessages == nil {
			break
		}

		args, err := ec.field_Query_listFlaggedMessages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListFlaggedMessages(childComplexity, args["communityCID"].(*string), args["memberIDs"].([]*string)), true

	case "Query.listMembers":
		if e.complexity.Query.ListMembers == nil {
			break
		}

		args, err := ec.field_Query_listMembers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListMembers(childComplexity, args["input"].(*stream_chat.QueryOption)), true

	case "Query.listOrganisations":
		if e.complexity.Query.ListOrganisations == nil {
			break
		}

		args, err := ec.field_Query_listOrganisations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListOrganisations(childComplexity, args["paginationInput"].(dto.PaginationsInput)), true

	case "Query.listPendingInvites":
		if e.complexity.Query.ListPendingInvites == nil {
			break
		}

		args, err := ec.field_Query_listPendingInvites_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListPendingInvites(childComplexity, args["memberID"].(string), args["input"].(*stream_chat.QueryOption)), true

	case "Query.listPrograms":
		if e.complexity.Query.ListPrograms == nil {
			break
		}

		args, err := ec.field_Query_listPrograms_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListPrograms(childComplexity, args["pagination"].(dto.PaginationsInput)), true

	case "Query.listSurveyRespondents":
		if e.complexity.Query.ListSurveyRespondents == nil {
			break
		}

		args, err := ec.field_Query_listSurveyRespondents_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListSurveyRespondents(childComplexity, args["projectID"].(int), args["formID"].(string), args["paginationInput"].(dto.PaginationsInput)), true

	case "Query.listSurveys":
		if e.complexity.Query.ListSurveys == nil {
			break
		}

		args, err := ec.field_Query_listSurveys_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListSurveys(childComplexity, args["projectID"].(int)), true

	case "Query.listUserPrograms":
		if e.complexity.Query.ListUserPrograms == nil {
			break
		}

		args, err := ec.field_Query_listUserPrograms_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListUserPrograms(childComplexity, args["userID"].(string), args["flavour"].(feedlib.Flavour)), true

	case "Query.nextRefill":
		if e.complexity.Query.NextRefill == nil {
			break
		}

		args, err := ec.field_Query_nextRefill_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NextRefill(childComplexity, args["clientID"].(string)), true

	case "Query.recommendedCommunities":
		if e.complexity.Query.RecommendedCommunities == nil {
			break
		}

		args, err := ec.field_Query_recommendedCommunities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecommendedCommunities(childComplexity, args["clientID"].(string), args["limit"].(int)), true

	case "Query.retrieveFacility":
		if e.complexity.Query.RetrieveFacility == nil {
			break
		}

		args, err := ec.field_Query_retrieveFacility_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RetrieveFacility(childComplexity, args["id"].(string), args["active"].(bool)), true

	case "Query.retrieveFacilityByIdentifier":
		if e.complexity.Query.RetrieveFacilityByIdentifier == nil {
			break
		}

		args, err := ec.field_Query_retrieveFacilityByIdentifier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RetrieveFacilityByIdentifier(childComplexity, args["identifier"].(dto.FacilityIdentifierInput), args["isActive"].(bool)), true

	case "Query.searchCaregiverUser":
		if e.complexity.Query.SearchCaregiverUser == nil {
			break
		}

		args, err := ec.field_Query_searchCaregiverUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchCaregiverUser(childComplexity, args["searchParameter"].(string)), true

	case "Query.searchClientUser":
		if e.complexity.Query.SearchClientUser == nil {
			break
		}

		args, err := ec.field_Query_searchClientUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchClientUser(childComplexity, args["searchParameter"].(string)), true

	case "Query.searchFacility":
		if e.complexity.Query.SearchFacility == nil {
			break
		}

		args, err := ec.field_Query_searchFacility_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchFacility(childComplexity, args["searchParameter"].(*string)), true

	case "Query.searchOrganisations":
		if e.complexity.Query.SearchOrganisations == nil {
			break
		}

		args, err := ec.field_Query_searchOrganisations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchOrganisations(childComplexity, args["searchParameter"].(string)), true

	case "Query.searchPrograms":
		if e.complexity.Query.SearchPrograms == nil {
			break
		}

		args, err := ec.field_Query_searchPrograms_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchPrograms(childComplexity, args["searchParameter"].(string)), true

	case "Query.searchServiceRequests":
		if e.complexity.Query.SearchServiceRequests == nil {
			break
		}

		args, err := ec.field_Query_searchServiceRequests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchServiceRequests(childComplexity, args["searchTerm"].(string), args["flavour"].(feedlib.Flavour), args["requestType"].(string), args["facilityID"].(string)), true

	case "Query.searchStaffUser":
		if e.complexity.Query.SearchStaffUser == nil {
			break
		}

		args, err := ec.field_Query_searchStaffUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchStaffUser(childComplexity, args["searchParameter"].(string)), true

	case "Query.sendOTP":
		if e.complexity.Query.SendOtp == nil {
			break
		}

		args, err := ec.field_Query_sendOTP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SendOtp(childComplexity, args["username"].(string), args["flavour"].(feedlib.Flavour)), true

	case "Query.verifyPIN":
		if e.complexity.Query.VerifyPin == nil {
			break
		}

		args, err := ec.field_Query_verifyPIN_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VerifyPin(childComplexity, args["userID"].(string), args["flavour"].(feedlib.Flavour), args["pin"].(string)), true

	case "Query._service":
		if e.complexity.Query.__resolve__service == nil {
			break
		}

		return e.complexity.Query.__resolve__service(childComplexity), true

	case "Question.active":
		if e.complexity.Question.Active == nil {
			break
		}

		return e.complexity.Question.Active(childComplexity), true

	case "Question.choices":
		if e.complexity.Question.Choices == nil {
			break
		}

		return e.complexity.Question.Choices(childComplexity), true

	case "Question.id":
		if e.complexity.Question.ID == nil {
			break
		}

		return e.complexity.Question.ID(childComplexity), true

	case "Question.questionType":
		if e.complexity.Question.QuestionType == nil {
			break
		}

		return e.complexity.Question.QuestionType(childComplexity), true

	case "Question.questionnaireID":
		if e.complexity.Question.QuestionnaireID == nil {
			break
		}

		return e.complexity.Question.QuestionnaireID(childComplexity), true

	case "Question.required":
		if e.complexity.Question.Required == nil {
			break
		}

		return e.complexity.Question.Required(childComplexity), true

	case "Question.responseValueType":
		if e.complexity.Question.ResponseValueType == nil {
			break
		}

		return e.complexity.Question.ResponseValueType(childComplexity), true

	case "Question.selectMultiple":
		if e.complexity.Question.SelectMultiple == nil {
			break
		}

		return e.complexity.Question.SelectMultiple(childComplexity), true

	case "Question.sequence":
		if e.complexity.Question.Sequence == nil {
			break
		}

		return e.complexity.Question.Sequence(childComplexity), true

	case "Question.text":
		if e.complexity.Question.Text == nil {
			break
		}

		return e.complexity.Question.Text(childComplexity), true

	case "QuestionInputChoice.active":
		if e.complexity.QuestionInputChoice.Active == nil {
			break
		}

		return e.complexity.QuestionInputChoice.Active(childComplexity), true

	case "QuestionInputChoice.choice":
		if e.complexity.QuestionInputChoice.Choice == nil {
			break
		}

		return e.complexity.QuestionInputChoice.Choice(childComplexity), true

	case "QuestionInputChoice.id":
		if e.complexity.QuestionInputChoice.ID == nil {
			break
		}

		return e.complexity.QuestionInputChoice.ID(childComplexity), true

	case "QuestionInputChoice.questionID":
		if e.complexity.QuestionInputChoice.QuestionID == nil {
			break
		}

		return e.complexity.QuestionInputChoice.QuestionID(childComplexity), true

	case "QuestionInputChoice.score":
		if e.complexity.QuestionInputChoice.Score == nil {
			break
		}

		return e.complexity.QuestionInputChoice.Score(childComplexity), true

	case "QuestionInputChoice.value":
		if e.complexity.QuestionInputChoice.Value == nil {
			break
		}

		return e.complexity.QuestionInputChoice.Value(childComplexity), true

	case "Questionnaire.active":
		if e.complexity.Questionnaire.Active == nil {
			break
		}

		return e.complexity.Questionnaire.Active(childComplexity), true

	case "Questionnaire.description":
		if e.complexity.Questionnaire.Description == nil {
			break
		}

		return e.complexity.Questionnaire.Description(childComplexity), true

	case "Questionnaire.id":
		if e.complexity.Questionnaire.ID == nil {
			break
		}

		return e.complexity.Questionnaire.ID(childComplexity), true

	case "Questionnaire.name":
		if e.complexity.Questionnaire.Name == nil {
			break
		}

		return e.complexity.Questionnaire.Name(childComplexity), true

	case "Questionnaire.questions":
		if e.complexity.Questionnaire.Questions == nil {
			break
		}

		return e.complexity.Questionnaire.Questions(childComplexity), true

	case "QuestionnaireScreeningToolQuestionResponse.active":
		if e.complexity.QuestionnaireScreeningToolQuestionResponse.Active == nil {
			break
		}

		return e.complexity.QuestionnaireScreeningToolQuestionResponse.Active(childComplexity), true

	case "QuestionnaireScreeningToolQuestionResponse.id":
		if e.complexity.QuestionnaireScreeningToolQuestionResponse.ID == nil {
			break
		}

		return e.complexity.QuestionnaireScreeningToolQuestionResponse.ID(childComplexity), true

	case "QuestionnaireScreeningToolQuestionResponse.normalizedResponse":
		if e.complexity.QuestionnaireScreeningToolQuestionResponse.NormalizedResponse == nil {
			break
		}

		return e.complexity.QuestionnaireScreeningToolQuestionResponse.NormalizedResponse(childComplexity), true

	case "QuestionnaireScreeningToolQuestionResponse.questionID":
		if e.complexity.QuestionnaireScreeningToolQuestionResponse.QuestionID == nil {
			break
		}

		return e.complexity.QuestionnaireScreeningToolQuestionResponse.QuestionID(childComplexity), true

	case "QuestionnaireScreeningToolQuestionResponse.questionText":
		if e.complexity.QuestionnaireScreeningToolQuestionResponse.QuestionText == nil {
			break
		}

		return e.complexity.QuestionnaireScreeningToolQuestionResponse.QuestionText(childComplexity), true

	case "QuestionnaireScreeningToolQuestionResponse.questionType":
		if e.complexity.QuestionnaireScreeningToolQuestionResponse.QuestionType == nil {
			break
		}

		return e.complexity.QuestionnaireScreeningToolQuestionResponse.QuestionType(childComplexity), true

	case "QuestionnaireScreeningToolQuestionResponse.response":
		if e.complexity.QuestionnaireScreeningToolQuestionResponse.Response == nil {
			break
		}

		return e.complexity.QuestionnaireScreeningToolQuestionResponse.Response(childComplexity), true

	case "QuestionnaireScreeningToolQuestionResponse.responseValueType":
		if e.complexity.QuestionnaireScreeningToolQuestionResponse.ResponseValueType == nil {
			break
		}

		return e.complexity.QuestionnaireScreeningToolQuestionResponse.ResponseValueType(childComplexity), true

	case "QuestionnaireScreeningToolQuestionResponse.score":
		if e.complexity.QuestionnaireScreeningToolQuestionResponse.Score == nil {
			break
		}

		return e.complexity.QuestionnaireScreeningToolQuestionResponse.Score(childComplexity), true

	case "QuestionnaireScreeningToolQuestionResponse.screeningToolResponseID":
		if e.complexity.QuestionnaireScreeningToolQuestionResponse.ScreeningToolResponseID == nil {
			break
		}

		return e.complexity.QuestionnaireScreeningToolQuestionResponse.ScreeningToolResponseID(childComplexity), true

	case "QuestionnaireScreeningToolQuestionResponse.selectMultiple":
		if e.complexity.QuestionnaireScreeningToolQuestionResponse.SelectMultiple == nil {
			break
		}

		return e.complexity.QuestionnaireScreeningToolQuestionResponse.SelectMultiple(childComplexity), true

	case "QuestionnaireScreeningToolQuestionResponse.sequence":
		if e.complexity.QuestionnaireScreeningToolQuestionResponse.Sequence == nil {
			break
		}

		return e.complexity.QuestionnaireScreeningToolQuestionResponse.Sequence(childComplexity), true

	case "QuestionnaireScreeningToolResponse.active":
		if e.complexity.QuestionnaireScreeningToolResponse.Active == nil {
			break
		}

		return e.complexity.QuestionnaireScreeningToolResponse.Active(childComplexity), true

	case "QuestionnaireScreeningToolResponse.aggregateScore":
		if e.complexity.QuestionnaireScreeningToolResponse.AggregateScore == nil {
			break
		}

		return e.complexity.QuestionnaireScreeningToolResponse.AggregateScore(childComplexity), true

	case "QuestionnaireScreeningToolResponse.clientID":
		if e.complexity.QuestionnaireScreeningToolResponse.ClientID == nil {
			break
		}

		return e.complexity.QuestionnaireScreeningToolResponse.ClientID(childComplexity), true

	case "QuestionnaireScreeningToolResponse.facilityID":
		if e.complexity.QuestionnaireScreeningToolResponse.FacilityID == nil {
			break
		}

		return e.complexity.QuestionnaireScreeningToolResponse.FacilityID(childComplexity), true

	case "QuestionnaireScreeningToolResponse.id":
		if e.complexity.QuestionnaireScreeningToolResponse.ID == nil {
			break
		}

		return e.complexity.QuestionnaireScreeningToolResponse.ID(childComplexity), true

	case "QuestionnaireScreeningToolResponse.questionResponses":
		if e.complexity.QuestionnaireScreeningToolResponse.QuestionResponses == nil {
			break
		}

		return e.complexity.QuestionnaireScreeningToolResponse.QuestionResponses(childComplexity), true

	case "QuestionnaireScreeningToolResponse.screeningToolID":
		if e.complexity.QuestionnaireScreeningToolResponse.ScreeningToolID == nil {
			break
		}

		return e.complexity.QuestionnaireScreeningToolResponse.ScreeningToolID(childComplexity), true

	case "Reaction.message_id":
		if e.complexity.Reaction.MessageID == nil {
			break
		}

		return e.complexity.Reaction.MessageID(childComplexity), true

	case "Reaction.type":
		if e.complexity.Reaction.Type == nil {
			break
		}

		return e.complexity.Reaction.Type(childComplexity), true

	case "Reaction.user_id":
		if e.complexity.Reaction.UserID == nil {
			break
		}

		return e.complexity.Reaction.UserID(childComplexity), true

	case "RecordSecurityQuestionResponse.isCorrect":
		if e.complexity.RecordSecurityQuestionResponse.IsCorrect == nil {
			break
		}

		return e.complexity.RecordSecurityQuestionResponse.IsCorrect(childComplexity), true

	case "RecordSecurityQuestionResponse.securityQuestionID":
		if e.complexity.RecordSecurityQuestionResponse.SecurityQuestionID == nil {
			break
		}

		return e.complexity.RecordSecurityQuestionResponse.SecurityQuestionID(childComplexity), true

	case "RequestTypeCount.requestType":
		if e.complexity.RequestTypeCount.RequestType == nil {
			break
		}

		return e.complexity.RequestTypeCount.RequestType(childComplexity), true

	case "RequestTypeCount.total":
		if e.complexity.RequestTypeCount.Total == nil {
			break
		}

		return e.complexity.RequestTypeCount.Total(childComplexity), true

	case "ScreeningTool.active":
		if e.complexity.ScreeningTool.Active == nil {
			break
		}

		return e.complexity.ScreeningTool.Active(childComplexity), true

	case "ScreeningTool.ageRange":
		if e.complexity.ScreeningTool.AgeRange == nil {
			break
		}

		return e.complexity.ScreeningTool.AgeRange(childComplexity), true

	case "ScreeningTool.clientTypes":
		if e.complexity.ScreeningTool.ClientTypes == nil {
			break
		}

		return e.complexity.ScreeningTool.ClientTypes(childComplexity), true

	case "ScreeningTool.genders":
		if e.complexity.ScreeningTool.Genders == nil {
			break
		}

		return e.complexity.ScreeningTool.Genders(childComplexity), true

	case "ScreeningTool.id":
		if e.complexity.ScreeningTool.ID == nil {
			break
		}

		return e.complexity.ScreeningTool.ID(childComplexity), true

	case "ScreeningTool.questionnaire":
		if e.complexity.ScreeningTool.Questionnaire == nil {
			break
		}

		return e.complexity.ScreeningTool.Questionnaire(childComplexity), true

	case "ScreeningTool.questionnaireID":
		if e.complexity.ScreeningTool.QuestionnaireID == nil {
			break
		}

		return e.complexity.ScreeningTool.QuestionnaireID(childComplexity), true

	case "ScreeningTool.threshold":
		if e.complexity.ScreeningTool.Threshold == nil {
			break
		}

		return e.complexity.ScreeningTool.Threshold(childComplexity), true

	case "ScreeningToolAssessmentResponse.clientID":
		if e.complexity.ScreeningToolAssessmentResponse.ClientID == nil {
			break
		}

		return e.complexity.ScreeningToolAssessmentResponse.ClientID(childComplexity), true

	case "ScreeningToolAssessmentResponse.clientName":
		if e.complexity.ScreeningToolAssessmentResponse.ClientName == nil {
			break
		}

		return e.complexity.ScreeningToolAssessmentResponse.ClientName(childComplexity), true

	case "ScreeningToolAssessmentResponse.dateAnswered":
		if e.complexity.ScreeningToolAssessmentResponse.DateAnswered == nil {
			break
		}

		return e.complexity.ScreeningToolAssessmentResponse.DateAnswered(childComplexity), true

	case "ScreeningToolPage.pagination":
		if e.complexity.ScreeningToolPage.Pagination == nil {
			break
		}

		return e.complexity.ScreeningToolPage.Pagination(childComplexity), true

	case "ScreeningToolPage.screeningTools":
		if e.complexity.ScreeningToolPage.ScreeningTools == nil {
			break
		}

		return e.complexity.ScreeningToolPage.ScreeningTools(childComplexity), true

	case "ScreeningToolQuestion.active":
		if e.complexity.ScreeningToolQuestion.Active == nil {
			break
		}

		return e.complexity.ScreeningToolQuestion.Active(childComplexity), true

	case "ScreeningToolQuestion.id":
		if e.complexity.ScreeningToolQuestion.ID == nil {
			break
		}

		return e.complexity.ScreeningToolQuestion.ID(childComplexity), true

	case "ScreeningToolQuestion.meta":
		if e.complexity.ScreeningToolQuestion.Meta == nil {
			break
		}

		return e.complexity.ScreeningToolQuestion.Meta(childComplexity), true

	case "ScreeningToolQuestion.question":
		if e.complexity.ScreeningToolQuestion.Question == nil {
			break
		}

		return e.complexity.ScreeningToolQuestion.Question(childComplexity), true

	case "ScreeningToolQuestion.responseCategory":
		if e.complexity.ScreeningToolQuestion.ResponseCategory == nil {
			break
		}

		return e.complexity.ScreeningToolQuestion.ResponseCategory(childComplexity), true

	case "ScreeningToolQuestion.responseChoices":
		if e.complexity.ScreeningToolQuestion.ResponseChoices == nil {
			break
		}

		return e.complexity.ScreeningToolQuestion.ResponseChoices(childComplexity), true

	case "ScreeningToolQuestion.responseType":
		if e.complexity.ScreeningToolQuestion.ResponseType == nil {
			break
		}

		return e.complexity.ScreeningToolQuestion.ResponseType(childComplexity), true

	case "ScreeningToolQuestion.sequence":
		if e.complexity.ScreeningToolQuestion.Sequence == nil {
			break
		}

		return e.complexity.ScreeningToolQuestion.Sequence(childComplexity), true

	case "ScreeningToolQuestion.toolType":
		if e.complexity.ScreeningToolQuestion.ToolType == nil {
			break
		}

		return e.complexity.ScreeningToolQuestion.ToolType(childComplexity), true

	case "ScreeningToolRespondent.clientID":
		if e.complexity.ScreeningToolRespondent.ClientID == nil {
			break
		}

		return e.complexity.ScreeningToolRespondent.ClientID(childComplexity), true

	case "ScreeningToolRespondent.name":
		if e.complexity.ScreeningToolRespondent.Name == nil {
			break
		}

		return e.complexity.ScreeningToolRespondent.Name(childComplexity), true

	case "ScreeningToolRespondent.phoneNumber":
		if e.complexity.ScreeningToolRespondent.PhoneNumber == nil {
			break
		}

		return e.complexity.ScreeningToolRespondent.PhoneNumber(childComplexity), true

	case "ScreeningToolRespondent.screeningToolResponseID":
		if e.complexity.ScreeningToolRespondent.ScreeningToolResponseID == nil {
			break
		}

		return e.complexity.ScreeningToolRespondent.ScreeningToolResponseID(childComplexity), true

	case "ScreeningToolRespondent.serviceRequest":
		if e.complexity.ScreeningToolRespondent.ServiceRequest == nil {
			break
		}

		return e.complexity.ScreeningToolRespondent.ServiceRequest(childComplexity), true

	case "ScreeningToolRespondent.serviceRequestID":
		if e.complexity.ScreeningToolRespondent.ServiceRequestID == nil {
			break
		}

		return e.complexity.ScreeningToolRespondent.ServiceRequestID(childComplexity), true

	case "ScreeningToolRespondentsPage.pagination":
		if e.complexity.ScreeningToolRespondentsPage.Pagination == nil {
			break
		}

		return e.complexity.ScreeningToolRespondentsPage.Pagination(childComplexity), true

	case "ScreeningToolRespondentsPage.screeningToolRespondents":
		if e.complexity.ScreeningToolRespondentsPage.ScreeningToolRespondents == nil {
			break
		}

		return e.complexity.ScreeningToolRespondentsPage.ScreeningToolRespondents(childComplexity), true

	case "ScreeningToolResponse.response":
		if e.complexity.ScreeningToolResponse.Response == nil {
			break
		}

		return e.complexity.ScreeningToolResponse.Response(childComplexity), true

	case "ScreeningToolResponse.tool":
		if e.complexity.ScreeningToolResponse.Tool == nil {
			break
		}

		return e.complexity.ScreeningToolResponse.Tool(childComplexity), true

	case "ScreeningToolResponse.toolIndex":
		if e.complexity.ScreeningToolResponse.ToolIndex == nil {
			break
		}

		return e.complexity.ScreeningToolResponse.ToolIndex(childComplexity), true

	case "ScreeningToolResponsePayload.clientContact":
		if e.complexity.ScreeningToolResponsePayload.ClientContact == nil {
			break
		}

		return e.complexity.ScreeningToolResponsePayload.ClientContact(childComplexity), true

	case "ScreeningToolResponsePayload.screeningToolResponses":
		if e.complexity.ScreeningToolResponsePayload.ScreeningToolResponses == nil {
			break
		}

		return e.complexity.ScreeningToolResponsePayload.ScreeningToolResponses(childComplexity), true

	case "ScreeningToolResponsePayload.serviceRequestID":
		if e.complexity.ScreeningToolResponsePayload.ServiceRequestID == nil {
			break
		}

		return e.complexity.ScreeningToolResponsePayload.ServiceRequestID(childComplexity), true

	case "SecurityQuestion.active":
		if e.complexity.SecurityQuestion.Active == nil {
			break
		}

		return e.complexity.SecurityQuestion.Active(childComplexity), true

	case "SecurityQuestion.description":
		if e.complexity.SecurityQuestion.Description == nil {
			break
		}

		return e.complexity.SecurityQuestion.Description(childComplexity), true

	case "SecurityQuestion.questionStem":
		if e.complexity.SecurityQuestion.QuestionStem == nil {
			break
		}

		return e.complexity.SecurityQuestion.QuestionStem(childComplexity), true

	case "SecurityQuestion.responseType":
		if e.complexity.SecurityQuestion.ResponseType == nil {
			break
		}

		return e.complexity.SecurityQuestion.ResponseType(childComplexity), true

	case "SecurityQuestion.securityQuestionID":
		if e.complexity.SecurityQuestion.SecurityQuestionID == nil {
			break
		}

		return e.complexity.SecurityQuestion.SecurityQuestionID(childComplexity), true

	case "ServiceRequest.clientContact":
		if e.complexity.ServiceRequest.ClientContact == nil {
			break
		}

		return e.complexity.ServiceRequest.ClientContact(childComplexity), true

	case "ServiceRequest.clientID":
		if e.complexity.ServiceRequest.ClientID == nil {
			break
		}

		return e.complexity.ServiceRequest.ClientID(childComplexity), true

	case "ServiceRequest.clientName":
		if e.complexity.ServiceRequest.ClientName == nil {
			break
		}

		return e.complexity.ServiceRequest.ClientName(childComplexity), true

	case "ServiceRequest.createdAt":
		if e.complexity.ServiceRequest.CreatedAt == nil {
			break
		}

		return e.complexity.ServiceRequest.CreatedAt(childComplexity), true

	case "ServiceRequest.facilityID":
		if e.complexity.ServiceRequest.FacilityID == nil {
			break
		}

		return e.complexity.ServiceRequest.FacilityID(childComplexity), true

	case "ServiceRequest.id":
		if e.complexity.ServiceRequest.ID == nil {
			break
		}

		return e.complexity.ServiceRequest.ID(childComplexity), true

	case "ServiceRequest.inProgressAt":
		if e.complexity.ServiceRequest.InProgressAt == nil {
			break
		}

		return e.complexity.ServiceRequest.InProgressAt(childComplexity), true

	case "ServiceRequest.inProgressBy":
		if e.complexity.ServiceRequest.InProgressBy == nil {
			break
		}

		return e.complexity.ServiceRequest.InProgressBy(childComplexity), true

	case "ServiceRequest.meta":
		if e.complexity.ServiceRequest.Meta == nil {
			break
		}

		return e.complexity.ServiceRequest.Meta(childComplexity), true

	case "ServiceRequest.request":
		if e.complexity.ServiceRequest.Request == nil {
			break
		}

		return e.complexity.ServiceRequest.Request(childComplexity), true

	case "ServiceRequest.requestType":
		if e.complexity.ServiceRequest.RequestType == nil {
			break
		}

		return e.complexity.ServiceRequest.RequestType(childComplexity), true

	case "ServiceRequest.resolvedAt":
		if e.complexity.ServiceRequest.ResolvedAt == nil {
			break
		}

		return e.complexity.ServiceRequest.ResolvedAt(childComplexity), true

	case "ServiceRequest.resolvedBy":
		if e.complexity.ServiceRequest.ResolvedBy == nil {
			break
		}

		return e.complexity.ServiceRequest.ResolvedBy(childComplexity), true

	case "ServiceRequest.resolvedByName":
		if e.complexity.ServiceRequest.ResolvedByName == nil {
			break
		}

		return e.complexity.ServiceRequest.ResolvedByName(childComplexity), true

	case "ServiceRequest.staffContact":
		if e.complexity.ServiceRequest.StaffContact == nil {
			break
		}

		return e.complexity.ServiceRequest.StaffContact(childComplexity), true

	case "ServiceRequest.staffID":
		if e.complexity.ServiceRequest.StaffID == nil {
			break
		}

		return e.complexity.ServiceRequest.StaffID(childComplexity), true

	case "ServiceRequest.staffName":
		if e.complexity.ServiceRequest.StaffName == nil {
			break
		}

		return e.complexity.ServiceRequest.StaffName(childComplexity), true

	case "ServiceRequest.status":
		if e.complexity.ServiceRequest.Status == nil {
			break
		}

		return e.complexity.ServiceRequest.Status(childComplexity), true

	case "ServiceRequestsCount.requestsTypeCount":
		if e.complexity.ServiceRequestsCount.RequestsTypeCount == nil {
			break
		}

		return e.complexity.ServiceRequestsCount.RequestsTypeCount(childComplexity), true

	case "ServiceRequestsCountResponse.clientsServiceRequestCount":
		if e.complexity.ServiceRequestsCountResponse.ClientsServiceRequestCount == nil {
			break
		}

		return e.complexity.ServiceRequestsCountResponse.ClientsServiceRequestCount(childComplexity), true

	case "ServiceRequestsCountResponse.staffServiceRequestCount":
		if e.complexity.ServiceRequestsCountResponse.StaffServiceRequestCount == nil {
			break
		}

		return e.complexity.ServiceRequestsCountResponse.StaffServiceRequestCount(childComplexity), true

	case "Spam.block":
		if e.complexity.Spam.Block == nil {
			break
		}

		return e.complexity.Spam.Block(childComplexity), true

	case "Spam.flag":
		if e.complexity.Spam.Flag == nil {
			break
		}

		return e.complexity.Spam.Flag(childComplexity), true

	case "StaffProfile.active":
		if e.complexity.StaffProfile.Active == nil {
			break
		}

		return e.complexity.StaffProfile.Active(childComplexity), true

	case "StaffProfile.defaultFacility":
		if e.complexity.StaffProfile.DefaultFacility == nil {
			break
		}

		return e.complexity.StaffProfile.DefaultFacility(childComplexity), true

	case "StaffProfile.id":
		if e.complexity.StaffProfile.ID == nil {
			break
		}

		return e.complexity.StaffProfile.ID(childComplexity), true

	case "StaffProfile.staffNumber":
		if e.complexity.StaffProfile.StaffNumber == nil {
			break
		}

		return e.complexity.StaffProfile.StaffNumber(childComplexity), true

	case "StaffProfile.user":
		if e.complexity.StaffProfile.User == nil {
			break
		}

		return e.complexity.StaffProfile.User(childComplexity), true

	case "StaffProfile.userID":
		if e.complexity.StaffProfile.UserID == nil {
			break
		}

		return e.complexity.StaffProfile.UserID(childComplexity), true

	case "StaffRegistrationOutput.active":
		if e.complexity.StaffRegistrationOutput.Active == nil {
			break
		}

		return e.complexity.StaffRegistrationOutput.Active(childComplexity), true

	case "StaffRegistrationOutput.defaultFacility":
		if e.complexity.StaffRegistrationOutput.DefaultFacility == nil {
			break
		}

		return e.complexity.StaffRegistrationOutput.DefaultFacility(childComplexity), true

	case "StaffRegistrationOutput.id":
		if e.complexity.StaffRegistrationOutput.ID == nil {
			break
		}

		return e.complexity.StaffRegistrationOutput.ID(childComplexity), true

	case "StaffRegistrationOutput.staffNumber":
		if e.complexity.StaffRegistrationOutput.StaffNumber == nil {
			break
		}

		return e.complexity.StaffRegistrationOutput.StaffNumber(childComplexity), true

	case "StaffRegistrationOutput.userID":
		if e.complexity.StaffRegistrationOutput.UserID == nil {
			break
		}

		return e.complexity.StaffRegistrationOutput.UserID(childComplexity), true

	case "StaffResponse.communityToken":
		if e.complexity.StaffResponse.CommunityToken == nil {
			break
		}

		return e.complexity.StaffResponse.CommunityToken(childComplexity), true

	case "StaffResponse.permissions":
		if e.complexity.StaffResponse.Permissions == nil {
			break
		}

		return e.complexity.StaffResponse.Permissions(childComplexity), true

	case "StaffResponse.roles":
		if e.complexity.StaffResponse.Roles == nil {
			break
		}

		return e.complexity.StaffResponse.Roles(childComplexity), true

	case "StaffResponse.staffProfile":
		if e.complexity.StaffResponse.StaffProfile == nil {
			break
		}

		return e.complexity.StaffResponse.StaffProfile(childComplexity), true

	case "SurveyForm.name":
		if e.complexity.SurveyForm.Name == nil {
			break
		}

		return e.complexity.SurveyForm.Name(childComplexity), true

	case "SurveyForm.projectID":
		if e.complexity.SurveyForm.ProjectID == nil {
			break
		}

		return e.complexity.SurveyForm.ProjectID(childComplexity), true

	case "SurveyForm.xmlFormID":
		if e.complexity.SurveyForm.XMLFormID == nil {
			break
		}

		return e.complexity.SurveyForm.XMLFormID(childComplexity), true

	case "SurveyRespondent.formID":
		if e.complexity.SurveyRespondent.FormID == nil {
			break
		}

		return e.complexity.SurveyRespondent.FormID(childComplexity), true

	case "SurveyRespondent.id":
		if e.complexity.SurveyRespondent.ID == nil {
			break
		}

		return e.complexity.SurveyRespondent.ID(childComplexity), true

	case "SurveyRespondent.name":
		if e.complexity.SurveyRespondent.Name == nil {
			break
		}

		return e.complexity.SurveyRespondent.Name(childComplexity), true

	case "SurveyRespondent.projectID":
		if e.complexity.SurveyRespondent.ProjectID == nil {
			break
		}

		return e.complexity.SurveyRespondent.ProjectID(childComplexity), true

	case "SurveyRespondent.submittedAt":
		if e.complexity.SurveyRespondent.SubmittedAt == nil {
			break
		}

		return e.complexity.SurveyRespondent.SubmittedAt(childComplexity), true

	case "SurveyRespondent.submitterID":
		if e.complexity.SurveyRespondent.SubmitterID == nil {
			break
		}

		return e.complexity.SurveyRespondent.SubmitterID(childComplexity), true

	case "SurveyRespondentPage.pagination":
		if e.complexity.SurveyRespondentPage.Pagination == nil {
			break
		}

		return e.complexity.SurveyRespondentPage.Pagination(childComplexity), true

	case "SurveyRespondentPage.surveyRespondents":
		if e.complexity.SurveyRespondentPage.SurveyRespondents == nil {
			break
		}

		return e.complexity.SurveyRespondentPage.SurveyRespondents(childComplexity), true

	case "SurveyResponse.answer":
		if e.complexity.SurveyResponse.Answer == nil {
			break
		}

		return e.complexity.SurveyResponse.Answer(childComplexity), true

	case "SurveyResponse.question":
		if e.complexity.SurveyResponse.Question == nil {
			break
		}

		return e.complexity.SurveyResponse.Question(childComplexity), true

	case "SurveyResponse.questionType":
		if e.complexity.SurveyResponse.QuestionType == nil {
			break
		}

		return e.complexity.SurveyResponse.QuestionType(childComplexity), true

	case "SurveyServiceRequestUser.formID":
		if e.complexity.SurveyServiceRequestUser.FormID == nil {
			break
		}

		return e.complexity.SurveyServiceRequestUser.FormID(childComplexity), true

	case "SurveyServiceRequestUser.name":
		if e.complexity.SurveyServiceRequestUser.Name == nil {
			break
		}

		return e.complexity.SurveyServiceRequestUser.Name(childComplexity), true

	case "SurveyServiceRequestUser.phoneNumber":
		if e.complexity.SurveyServiceRequestUser.PhoneNumber == nil {
			break
		}

		return e.complexity.SurveyServiceRequestUser.PhoneNumber(childComplexity), true

	case "SurveyServiceRequestUser.projectID":
		if e.complexity.SurveyServiceRequestUser.ProjectID == nil {
			break
		}

		return e.complexity.SurveyServiceRequestUser.ProjectID(childComplexity), true

	case "SurveyServiceRequestUser.serviceRequestID":
		if e.complexity.SurveyServiceRequestUser.ServiceRequestID == nil {
			break
		}

		return e.complexity.SurveyServiceRequestUser.ServiceRequestID(childComplexity), true

	case "SurveyServiceRequestUser.submitterID":
		if e.complexity.SurveyServiceRequestUser.SubmitterID == nil {
			break
		}

		return e.complexity.SurveyServiceRequestUser.SubmitterID(childComplexity), true

	case "SurveyServiceRequestUser.surveyName":
		if e.complexity.SurveyServiceRequestUser.SurveyName == nil {
			break
		}

		return e.complexity.SurveyServiceRequestUser.SurveyName(childComplexity), true

	case "SurveyServiceRequestUserPage.pagination":
		if e.complexity.SurveyServiceRequestUserPage.Pagination == nil {
			break
		}

		return e.complexity.SurveyServiceRequestUserPage.Pagination(childComplexity), true

	case "SurveyServiceRequestUserPage.users":
		if e.complexity.SurveyServiceRequestUserPage.Users == nil {
			break
		}

		return e.complexity.SurveyServiceRequestUserPage.Users(childComplexity), true

	case "SurveysWithServiceRequest.formID":
		if e.complexity.SurveysWithServiceRequest.FormID == nil {
			break
		}

		return e.complexity.SurveysWithServiceRequest.FormID(childComplexity), true

	case "SurveysWithServiceRequest.linkID":
		if e.complexity.SurveysWithServiceRequest.LinkID == nil {
			break
		}

		return e.complexity.SurveysWithServiceRequest.LinkID(childComplexity), true

	case "SurveysWithServiceRequest.projectID":
		if e.complexity.SurveysWithServiceRequest.ProjectID == nil {
			break
		}

		return e.complexity.SurveysWithServiceRequest.ProjectID(childComplexity), true

	case "SurveysWithServiceRequest.title":
		if e.complexity.SurveysWithServiceRequest.Title == nil {
			break
		}

		return e.complexity.SurveysWithServiceRequest.Title(childComplexity), true

	case "TermsOfService.termsID":
		if e.complexity.TermsOfService.TermsID == nil {
			break
		}

		return e.complexity.TermsOfService.TermsID(childComplexity), true

	case "TermsOfService.text":
		if e.complexity.TermsOfService.Text == nil {
			break
		}

		return e.complexity.TermsOfService.Text(childComplexity), true

	case "Toxic.block":
		if e.complexity.Toxic.Block == nil {
			break
		}

		return e.complexity.Toxic.Block(childComplexity), true

	case "Toxic.flag":
		if e.complexity.Toxic.Flag == nil {
			break
		}

		return e.complexity.Toxic.Flag(childComplexity), true

	case "User.acceptedTermsID":
		if e.complexity.User.AcceptedTermsID == nil {
			break
		}

		return e.complexity.User.AcceptedTermsID(childComplexity), true

	case "User.active":
		if e.complexity.User.Active == nil {
			break
		}

		return e.complexity.User.Active(childComplexity), true

	case "User.contacts":
		if e.complexity.User.Contacts == nil {
			break
		}

		return e.complexity.User.Contacts(childComplexity), true

	case "User.currentOrganizationID":
		if e.complexity.User.CurrentOrganizationID == nil {
			break
		}

		return e.complexity.User.CurrentOrganizationID(childComplexity), true

	case "User.currentProgramID":
		if e.complexity.User.CurrentProgramID == nil {
			break
		}

		return e.complexity.User.CurrentProgramID(childComplexity), true

	case "User.dateOfBirth":
		if e.complexity.User.DateOfBirth == nil {
			break
		}

		return e.complexity.User.DateOfBirth(childComplexity), true

	case "User.gender":
		if e.complexity.User.Gender == nil {
			break
		}

		return e.complexity.User.Gender(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.isPhoneVerified":
		if e.complexity.User.IsPhoneVerified == nil {
			break
		}

		return e.complexity.User.IsPhoneVerified(childComplexity), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.suspended":
		if e.complexity.User.Suspended == nil {
			break
		}

		return e.complexity.User.Suspended(childComplexity), true

	case "User.termsAccepted":
		if e.complexity.User.TermsAccepted == nil {
			break
		}

		return e.complexity.User.TermsAccepted(childComplexity), true

	case "User.username":
		if e.complexity.User.Username == nil {
			break
		}

		return e.complexity.User.Username(childComplexity), true

	case "UserSurvey.active":
		if e.complexity.UserSurvey.Active == nil {
			break
		}

		return e.complexity.UserSurvey.Active(childComplexity), true

	case "UserSurvey.created":
		if e.complexity.UserSurvey.Created == nil {
			break
		}

		return e.complexity.UserSurvey.Created(childComplexity), true

	case "UserSurvey.description":
		if e.complexity.UserSurvey.Description == nil {
			break
		}

		return e.complexity.UserSurvey.Description(childComplexity), true

	case "UserSurvey.formID":
		if e.complexity.UserSurvey.FormID == nil {
			break
		}

		return e.complexity.UserSurvey.FormID(childComplexity), true

	case "UserSurvey.hasSubmitted":
		if e.complexity.UserSurvey.HasSubmitted == nil {
			break
		}

		return e.complexity.UserSurvey.HasSubmitted(childComplexity), true

	case "UserSurvey.id":
		if e.complexity.UserSurvey.ID == nil {
			break
		}

		return e.complexity.UserSurvey.ID(childComplexity), true

	case "UserSurvey.link":
		if e.complexity.UserSurvey.Link == nil {
			break
		}

		return e.complexity.UserSurvey.Link(childComplexity), true

	case "UserSurvey.linkID":
		if e.complexity.UserSurvey.LinkID == nil {
			break
		}

		return e.complexity.UserSurvey.LinkID(childComplexity), true

	case "UserSurvey.organisationID":
		if e.complexity.UserSurvey.OrganisationID == nil {
			break
		}

		return e.complexity.UserSurvey.OrganisationID(childComplexity), true

	case "UserSurvey.programID":
		if e.complexity.UserSurvey.ProgramID == nil {
			break
		}

		return e.complexity.UserSurvey.ProgramID(childComplexity), true

	case "UserSurvey.projectID":
		if e.complexity.UserSurvey.ProjectID == nil {
			break
		}

		return e.complexity.UserSurvey.ProjectID(childComplexity), true

	case "UserSurvey.title":
		if e.complexity.UserSurvey.Title == nil {
			break
		}

		return e.complexity.UserSurvey.Title(childComplexity), true

	case "UserSurvey.token":
		if e.complexity.UserSurvey.Token == nil {
			break
		}

		return e.complexity.UserSurvey.Token(childComplexity), true

	case "UserSurvey.userID":
		if e.complexity.UserSurvey.UserID == nil {
			break
		}

		return e.complexity.UserSurvey.UserID(childComplexity), true

	case "WorkStationDetails.articles":
		if e.complexity.WorkStationDetails.Articles == nil {
			break
		}

		return e.complexity.WorkStationDetails.Articles(childComplexity), true

	case "WorkStationDetails.messages":
		if e.complexity.WorkStationDetails.Messages == nil {
			break
		}

		return e.complexity.WorkStationDetails.Messages(childComplexity), true

	case "WorkStationDetails.notifications":
		if e.complexity.WorkStationDetails.Notifications == nil {
			break
		}

		return e.complexity.WorkStationDetails.Notifications(childComplexity), true

	case "WorkStationDetails.serviceRequests":
		if e.complexity.WorkStationDetails.ServiceRequests == nil {
			break
		}

		return e.complexity.WorkStationDetails.ServiceRequests(childComplexity), true

	case "WorkStationDetails.surveys":
		if e.complexity.WorkStationDetails.Surveys == nil {
			break
		}

		return e.complexity.WorkStationDetails.Surveys(childComplexity), true

	case "_Service.sdl":
		if e.complexity._Service.SDL == nil {
			break
		}

		return e.complexity._Service.SDL(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAgeRangeInput,
		ec.unmarshalInputCaregiverInput,
		ec.unmarshalInputClientCaregiverInput,
		ec.unmarshalInputClientFilterParamsInput,
		ec.unmarshalInputClientRegistrationInput,
		ec.unmarshalInputCommunityInput,
		ec.unmarshalInputExistingUserClientInput,
		ec.unmarshalInputExistingUserStaffInput,
		ec.unmarshalInputFacilityIdentifierInput,
		ec.unmarshalInputFacilityInput,
		ec.unmarshalInputFeedbackResponseInput,
		ec.unmarshalInputFilterParam,
		ec.unmarshalInputFiltersInput,
		ec.unmarshalInputFirebaseSimpleNotificationInput,
		ec.unmarshalInputMetricInput,
		ec.unmarshalInputNotificationFilters,
		ec.unmarshalInputOrganisationInput,
		ec.unmarshalInputPINInput,
		ec.unmarshalInputPaginationsInput,
		ec.unmarshalInputProgramInput,
		ec.unmarshalInputQueryOption,
		ec.unmarshalInputQuestionInput,
		ec.unmarshalInputQuestionInputChoiceInput,
		ec.unmarshalInputQuestionnaireInput,
		ec.unmarshalInputQuestionnaireScreeningToolQuestionResponseInput,
		ec.unmarshalInputQuestionnaireScreeningToolResponseInput,
		ec.unmarshalInputScreeningToolInput,
		ec.unmarshalInputScreeningToolQuestionResponseInput,
		ec.unmarshalInputSecurityQuestionResponseInput,
		ec.unmarshalInputServiceRequestInput,
		ec.unmarshalInputShareContentInput,
		ec.unmarshalInputSortOption,
		ec.unmarshalInputSortsInput,
		ec.unmarshalInputStaffRegistrationInput,
		ec.unmarshalInputSurveyResponseInput,
		ec.unmarshalInputVerifySurveySubmissionInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../appointments.graphql", Input: `extend type Query {
  fetchClientAppointments(
    clientID: ID!
    paginationInput: PaginationsInput!
    filters: [FilterParam!]
  ): AppointmentsPage
  nextRefill(clientID: ID!): Date
}

extend type Mutation {
  rescheduleAppointment(appointmentID: String!, date: Date!): Boolean!
}
`, BuiltIn: false},
	{Name: "../authority.graphql", Input: `extend type Mutation {
  assignOrRevokeRoles(userID: String!, roles: [UserRoleType]): Boolean!
}

extend type Query{
  getUserRoles(userID: String!, organisationID: String!): [AuthorityRole!]
  getAllAuthorityRoles: [AuthorityRole!]
}`, BuiltIn: false},
	{Name: "../communities.graphql", Input: `extend type Query {
  listMembers(input: QueryOption): [Member]
  listCommunityBannedMembers(communityID: String!): [Member]
  inviteMembersToCommunity(communityID: String!, memberIDs: [String!]!): Boolean!
  listCommunities(input: QueryOption): [Community]
  listCommunityMembers(communityID: ID!, input: QueryOption): [CommunityMember]
  listPendingInvites(memberID: String!, input: QueryOption): [Community]
  recommendedCommunities(clientID: String!, limit: Int!): [Community]
  listFlaggedMessages(communityCID: String, memberIDs: [String]): [MessageFlag]
}

extend type Mutation {
  createCommunity(input: CommunityInput!): Community!
  deleteCommunities(communityIDs: [String!]!, hardDelete: Boolean!): Boolean!
  rejectInvitation(memberID: String!, communityID: String!): Boolean!
  acceptInvitation(memberID: String!, communityID: String!): Boolean!
  addMembersToCommunity(memberIDs: [String!]!, communityID: String!): Boolean!
  removeMembersFromCommunity(communityID: String!, memberIDs: [String!]): Boolean!
  addModerators(memberIDs: [String!]!, communityID: String!): Boolean!
  demoteModerators(communityID: String!, memberIDs: [String!]!): Boolean!
  banUser(memberID: String!, bannedBy: String!, communityID: String!): Boolean!
  unBanUser(memberID: String!, communityID: String!): Boolean!
  deleteCommunityMessage(messageID: String!): Boolean!
}
`, BuiltIn: false},
	{Name: "../content.graphql", Input: `extend type Query {
  getContent(categoryID: Int, limit: String!): Content!
  listContentCategories: [ContentItemCategory!]!
  getUserBookmarkedContent(clientID: String!): Content
  checkIfUserHasLikedContent(clientID: String!, contentID: Int!): Boolean!
  checkIfUserBookmarkedContent(clientID: String!, contentID: Int!): Boolean!
  getFAQs(flavour: Flavour!): Content!
}

extend type Mutation {
  shareContent(input: ShareContentInput!): Boolean!
  bookmarkContent(clientID: String!, contentItemID: Int!): Boolean!
  unBookmarkContent(clientID: String!, contentItemID: Int!): Boolean!
  likeContent(clientID: String!, contentID: Int!): Boolean!
  unlikeContent(clientID: String!, contentID: Int!): Boolean!
  viewContent(clientID: String!, contentID: Int!): Boolean!
}
`, BuiltIn: false},
	{Name: "../enums.graphql", Input: `scalar Time

enum FilterSortDataType {
  created_at
  updated_at
  name
  mfl_code
  active
}

enum SortDataType {
  asc
  desc
}

enum Flavour {
  CONSUMER
  PRO
}

enum SecurityQuestionResponseType {
  TEXT
  NUMBER
  DATE
  BOOLEAN
}

enum CaregiverType {
  FATHER
  MOTHER
  SIBLING
  HEALTHCARE_PROFESSIONAL
}

enum Gender {
  male
  female
  other
  unknown
}

enum ClientType {
  PMTCT
  OVC
  OTZ
  OTZ_PLUS
  HVL
  DREAMS
  HIGH_RISK
  SPOUSES
  YOUTH
  KenyaEMR
}

enum ServiceRequestType {
  RED_FLAG
  PIN_RESET
  SURVEY_RED_FLAG
  STAFF_PIN_RESET
  HOME_PAGE_HEALTH_DIARY_ENTRY
  APPOINTMENTS
  SCREENING_TOOLS_RED_FLAG
}

enum UserRoleType {
  SYSTEM_ADMINISTRATOR
  COMMUNITY_MANAGEMENT
  CONTENT_MANAGEMENT
  CLIENT_MANAGEMENT
}

enum ScreeningToolResponseCategory {
  SINGLE_CHOICE
  MULTI_CHOICE
  OPEN_ENDED
}

enum ScreeningToolResponseType {
  INTEGER
  TEXT
  DATE
}

enum ScreeningToolType {
  TB_ASSESSMENT
  VIOLENCE_ASSESSMENT
  CONTRACEPTIVE_ASSESSMENT
  ALCOHOL_SUBSTANCE_ASSESSMENT
}

enum MessageType {
  regular
  error
  reply
  system
  ephemeral
}

enum FieldType {
  BOOLEAN
  TIMESTAMP
  NUMBER
  INTEGER
  STRING
}

enum FeedbackType {
  GENERAL_FEEDBACK
  SERVICES_OFFERED
}

enum Operation {
  LESS_THAN
  LESS_THAN_OR_EQUAL_TO
  EQUAL
  GREATER_THAN
  GREATER_THAN_OR_EQUAL_TO
  IN
  CONTAINS
}

enum NotificationType {
  APPOINTMENT
  SERVICE_REQUEST
  COMMUNITIES
  SURVEYS
  ROLE_ASSIGNMENT
  ROLE_REVOCATION
  DEMOTE_MODERATOR
  PROMOTE_TO_MODERATOR
}

enum MetricType {
  CONTENT
  ENGAGEMENT
  SYSTEM
}

enum Mood {
  VERY_SAD
  SAD
  HAPPY
  VERY_HAPPY
  NEUTRAL
}

enum QuestionType {
  OPEN_ENDED
  CLOSE_ENDED
}

enum QuestionResponseValueType {
  STRING
  NUMBER
  BOOLEAN
  TIME
  DATE
  DATE_TIME
}

enum ConsentState {
  PENDING
  ACCEPTED
  REJECTED
}

enum FacilityIdentifierType{
  MFL_CODE
}

enum ClientIdentifierType {
  CCC
  NATIONAL_ID
}`, BuiltIn: false},
	{Name: "../facility.graphql", Input: `extend type Mutation {
  deleteFacility(identifier: FacilityIdentifierInput!): Boolean!
  reactivateFacility(identifier: FacilityIdentifierInput!): Boolean!
  inactivateFacility(identifier: FacilityIdentifierInput!): Boolean!
  addFacilityContact(facilityID: ID!, contact: String!): Boolean!
  addFacilityToProgram(facilityIDs: [ID!]!): Boolean!
}

extend type Query {
  searchFacility(searchParameter: String): [Facility]
  retrieveFacility(id: String!, active: Boolean!): Facility
  retrieveFacilityByIdentifier(identifier: FacilityIdentifierInput!, isActive: Boolean!): Facility!
  listFacilities(
    searchTerm: String
    filterInput: [FiltersInput]
    paginationInput: PaginationsInput!
  ): FacilityPage
}
`, BuiltIn: false},
	{Name: "../feedback.graphql", Input: `extend type Mutation{
    sendFeedback(input: FeedbackResponseInput!): Boolean!
}`, BuiltIn: false},
	{Name: "../healthdiary.graphql", Input: `extend type Mutation {
  createHealthDiaryEntry(
    clientID: String!
    note: String
    mood: String!
    reportToStaff: Boolean!
  ): Boolean!
  shareHealthDiaryEntry(healthDiaryEntryID: String!, shareEntireHealthDiary: Boolean!): Boolean!
}
extend type Query {
  canRecordMood(clientID: String!): Boolean!
  getHealthDiaryQuote(limit: Int!): [ClientHealthDiaryQuote!]!
  getClientHealthDiaryEntries(clientID: String!, moodType: Mood, shared: Boolean): [ClientHealthDiaryEntry!]!
  getSharedHealthDiaryEntries(clientID: String!, facilityID: String!): [ClientHealthDiaryEntry]!
}
`, BuiltIn: false},
	{Name: "../input.graphql", Input: `scalar Date
scalar Map
scalar Any

input FacilityInput {
  name: String!
  phone: String!
  active: Boolean!
  country: String!
  description: String!
}

input FacilityIdentifierInput {
  type: FacilityIdentifierType!
  value: String!
  facilityID: String
}

input PaginationsInput {
  limit: Int
  currentPage: Int!
  sort: SortsInput
}

input FiltersInput {
  dataType: FilterSortDataType
  value: String
}

input SortsInput {
  direction: SortDataType
  field: FilterSortDataType
}

input PINInput {
  userID: String!
  pin: String!
  confirmPIN: String!
  flavour: Flavour!
}

input SecurityQuestionResponseInput {
  userID: String!
  securityQuestionID: String!
  response: String!
}

input ShareContentInput {
  clientID: String!
  contentID: Int!
  channel: String!
}

input FeedbackResponseInput {
  userID: String!
  feedbackType: FeedbackType!
  satisfactionLevel: Int!
  serviceName: String
  feedback: String!
  requiresFollowUp: Boolean!
}

input CaregiverInput {
  username: String!
  name: String!
  gender: Gender!
  dateOfBirth: Date!
  phoneNumber: String!
  caregiverNumber: String
  sendInvite: Boolean
  assignedClients: [ClientCaregiverInput]
}

input ClientRegistrationInput {
  username: String!
  facility: String!
  clientTypes: [ClientType!]!
  clientName: String!
  gender: Gender!
  dateOfBirth: Date!
  phoneNumber: String!
  enrollmentDate: Date!
  cccNumber: String!
  counselled: Boolean!
  inviteClient: Boolean!
  programID: String
}

input ExistingUserClientInput {
  facilityID: String!
  clientTypes: [ClientType!]!
  enrollmentDate: Date!
  cccNumber: String!
  counselled: Boolean!
  inviteClient: Boolean!
  userID: String
}

input QueryOption {
  filter: Map
  sort: [SortOption!]
  userID: String
  limit: Int
  offset: Int
  messageLimit: Int
  memberLimit: Int
}

input SortOption {
  field: String!
  direction: Int!
}

input CommunityInput {
  name: String!
  description: String!
  ageRange: AgeRangeInput
  gender: [Gender!]!
  clientType: [ClientType!]!
  inviteOnly: Boolean!
}

input AgeRangeInput {
  lowerBound: Int!
  upperBound: Int!
}

input ScreeningToolQuestionResponseInput {
  clientID: String!
  questionID: String!
  response: String!
}

input StaffRegistrationInput {
  username: String!
  facility: String!
  staffName: String!
  gender: Gender!
  dateOfBirth: Date!
  phoneNumber: String!
  idNumber: String!
  staffNumber: String!
  staffRoles: String
  inviteStaff: Boolean!
}

input ExistingUserStaffInput {
  facilityID: ID!
  idNumber: String!
  staffNumber: String!
  staffRoles: String
  inviteStaff: Boolean!
  userID: ID!
}

input ServiceRequestInput {
  active: Boolean
  requestType: String!
  status: String
  request: String!
  clientID: String!
  inProgressBy: String
  resolvedBy: String
  facilityID: String
  clientName: String
  flavour: Flavour!
  meta: Map
}

input FilterParam {
  fieldName: String!
  fieldType: FieldType!
  comparisonOperation: Operation!
  fieldValue: Any!
}


input FirebaseSimpleNotificationInput {
  title: String!
  body: String!
  imageURL: String!
  data: Map
}

input ClientFilterParamsInput {
  clientTypes: [ClientType]
  ageRange: AgeRangeInput
  gender: [Gender]
}

input MetricInput {
  userID: ID
  type: MetricType!
  event: Map!
}

input VerifySurveySubmissionInput {
  projectID: Int!
  formID: String!
  submitterID: Int! #also termed as linkID
}

input NotificationFilters {
  isRead: Boolean
  notificationTypes: [NotificationType!]
}

input QuestionnaireInput {
  name: String!
  description: String!
  questions: [QuestionInput!]!
}

input ScreeningToolInput {
  questionnaire: QuestionnaireInput!
  threshold: Int!
  clientTypes: [ClientType]
  genders: [Gender]
  ageRange: AgeRangeInput
}

input QuestionInput {
  text: String!
  questionType: QuestionType!
  responseValueType: QuestionResponseValueType!
  required: Boolean!
  selectMultiple: Boolean
  sequence: Int!
  choices: [QuestionInputChoiceInput]
}

input QuestionInputChoiceInput {
  choice: String!
  value: String!
  score: Int
}

input QuestionnaireScreeningToolResponseInput {
  screeningToolID: String!
  clientID: String!
  questionResponses: [QuestionnaireScreeningToolQuestionResponseInput!]!
}

input QuestionnaireScreeningToolQuestionResponseInput {
  questionID: String!
  response: String!
}

input SurveyResponseInput {
  projectID: Int!
  formID: String!
  submitterID: Int!
}

input ClientCaregiverInput {
  clientID: String!
  caregiverID: String
  caregiverType: CaregiverType!
}

input ProgramInput {
	name: String!
	organisationID: String!
}

input OrganisationInput {
  organisationCode: String!
  name: String!
  description: String
  emailAddress: String
  phoneNumber: String!
  postalAddress: String
  physicalAddress: String
  defaultCountry: String!
}`, BuiltIn: false},
	{Name: "../metrics.graphql", Input: `extend type Mutation {
  collectMetric(input: MetricInput!): Boolean!
}
`, BuiltIn: false},
	{Name: "../notifications.graphql", Input: `extend type Query {
  fetchNotifications(
    userID: ID!
    flavour: Flavour!
    paginationInput: PaginationsInput!
    filters: NotificationFilters
  ): NotificationsPage
  fetchNotificationTypeFilters(flavour: Flavour!): [NotificationTypeFilter]
}

extend type Mutation {
  sendFCMNotification(
    registrationTokens: [String!]!
    data: Map!
    notification: FirebaseSimpleNotificationInput!
  ): Boolean!

  readNotifications(ids: [ID!]!): Boolean!
}
`, BuiltIn: false},
	{Name: "../organisation.graphql", Input: `extend type Mutation {
    createOrganisation(input: OrganisationInput!): Boolean!
    deleteOrganisation(organisationID: ID!): Boolean! 
}

extend type Query {
    listOrganisations(paginationInput: PaginationsInput!): OrganisationOutputPage!
    searchOrganisations(searchParameter: String!): [Organisation!]
}`, BuiltIn: false},
	{Name: "../otp.graphql", Input: `extend type Query {
  sendOTP(username: String!, flavour: Flavour!): OTPResponse!
}
`, BuiltIn: false},
	{Name: "../programs.graphql", Input: `extend type Mutation {
  createProgram(input: ProgramInput!): Boolean!
  setStaffProgram(programID: ID!): StaffResponse!
  setClientProgram(programID: ID!): ClientResponse!
}

extend type Query {
  listUserPrograms(userID: ID!, flavour: Flavour!): ProgramOutput!
  getProgramFacilities(programID: ID!): [Facility]
  searchPrograms(searchParameter: String!): [Program]
  listPrograms(pagination: PaginationsInput!): ProgramPage!
}`, BuiltIn: false},
	{Name: "../questionnaire.graphql", Input: `extend type Mutation{
    createScreeningTool(input: ScreeningToolInput!): Boolean!
    respondToScreeningTool(input: QuestionnaireScreeningToolResponseInput!): Boolean!
}

extend type Query{
    getAvailableScreeningTools(clientID: String!, facilityID: String!): [ScreeningTool!]!
    getScreeningToolByID(id: ID!): ScreeningTool
    getFacilityRespondedScreeningTools(facilityID: String!, paginationInput: PaginationsInput!): ScreeningToolPage
    getScreeningToolRespondents(facilityID: String!, screeningToolID: String!, searchTerm: String, paginationInput: PaginationsInput!): ScreeningToolRespondentsPage
    getScreeningToolResponse(id: String!): QuestionnaireScreeningToolResponse!
}`, BuiltIn: false},
	{Name: "../screeningtools.graphql", Input: `extend type Query {
  getScreeningToolQuestions(toolType: String): [ScreeningToolQuestion!]!
  getAvailableScreeningToolQuestions(
    clientID: String!
  ): [AvailableScreeningTools!]!
  getAvailableFacilityScreeningTools(
    facilityID: String!
  ): [AvailableScreeningTools!]!
  getAssessmentResponsesByToolType(
    facilityID: String!
    toolType: String!
  ): [ScreeningToolAssessmentResponse!]
  getScreeningToolServiceRequestResponses(
    clientID: String
    toolType: ScreeningToolType
  ): ScreeningToolResponsePayload!
}

extend type Mutation {
  answerScreeningToolQuestion(
    screeningToolResponses: [ScreeningToolQuestionResponseInput!]!
  ): Boolean!
}
`, BuiltIn: false},
	{Name: "../securityquestion.graphql", Input: `extend type Query {
  getSecurityQuestions(flavour: Flavour!): [SecurityQuestion!]!
}

extend type Mutation {
  recordSecurityQuestionResponses(
    input: [SecurityQuestionResponseInput!]!
  ): [RecordSecurityQuestionResponse!]!
}
`, BuiltIn: false},
	{Name: "../servicerequest.graphql", Input: `extend type Mutation {
  setInProgressBy(serviceRequestID: String!, staffID: String!): Boolean!
  createServiceRequest(input: ServiceRequestInput!): Boolean!
  resolveServiceRequest(
    staffID: String!
    requestID: String!
    action: [String!]!
    comment: String
  ): Boolean!

  verifyClientPinResetServiceRequest(
    clientID: String!
    serviceRequestID: String!
    cccNumber: String!
    phoneNumber: String!
    physicalIdentityVerified: Boolean!
    state: String!
  ): Boolean!

  verifyStaffPinResetServiceRequest(
    phoneNumber: String!
    serviceRequestID: String!
    verificationStatus: String!
  ): Boolean!
}

extend type Query {
  getServiceRequests(
    requestType: String
    requestStatus: String
    facilityID: String!
    flavour: Flavour!
  ): [ServiceRequest]
  getPendingServiceRequestsCount(
    facilityID: String!
  ): ServiceRequestsCountResponse!
  searchServiceRequests(
    searchTerm: String!
    flavour: Flavour!
    requestType: String!
    facilityID: String!
  ): [ServiceRequest]
}
`, BuiltIn: false},
	{Name: "../surveys.graphql", Input: `extend type Query {
  listSurveys(projectID: Int!): [SurveyForm!]
  getUserSurveyForms(userID: String!): [UserSurvey!]
  listSurveyRespondents(
    projectID: Int!
    formID: String!
    paginationInput: PaginationsInput!
  ): SurveyRespondentPage
  getSurveyServiceRequestUser(
    facilityID: String!
    projectID: Int!
    formID: String!
    paginationInput: PaginationsInput!
  ): SurveyServiceRequestUserPage
  getSurveyResponse(input: SurveyResponseInput!): [SurveyResponse!]
  getSurveyWithServiceRequest(facilityID: String!): [SurveysWithServiceRequest!]
}

extend type Mutation {
  sendClientSurveyLinks(
    facilityID: String!
    formID: String!
    projectID: Int!
    filterParams: ClientFilterParamsInput
  ): Boolean!
  verifySurveySubmission(input: VerifySurveySubmissionInput!): Boolean!
}
`, BuiltIn: false},
	{Name: "../types.graphql", Input: `type Facility {
  id: String!
  name: String!
  phone: String!
  active: Boolean!
  country: String!
  description: String!
  fhirOrganisationID: String!
  identifier: FacilityIdentifier!
  workStationDetails: WorkStationDetails!
}

type FacilityIdentifier {
  id: ID!
  active: Boolean!
  type: FacilityIdentifierType!
  value: String!
}

type WorkStationDetails  {
	notifications:  Int!
	surveys: Int!
	articles: Int!
	messages: Int!
	serviceRequests: Int!
}

type Pagination {
  limit: Int!
  currentPage: Int!
  count: Int
  totalPages: Int
  nextPage: Int
  previousPage: Int
}

type FacilityPage {
  pagination: Pagination!
  facilities: [Facility]!
}

type OrganisationOutputPage {
  pagination: Pagination!
  organisations: [Organisation]!
}

type FiltersParam {
  name: String
  dataType: FilterSortDataType
  value: String
}

type TermsOfService {
  termsID: Int!
  text: String!
}

type SecurityQuestion {
  securityQuestionID: String!
  questionStem: String!
  description: String
  active: Boolean!
  responseType: SecurityQuestionResponseType!
}

type RecordSecurityQuestionResponse {
  securityQuestionID: String!
  isCorrect: Boolean!
}

type Content {
  items: [ContentItem!]!
  meta: Meta!
}

type Meta {
  totalCount: Int!
}

type ContentItem {
  id: Int!
  title: String!
  date: String!
  meta: ContentMeta!
  intro: String!
  authorName: String!
  itemType: String!
  timeEstimateSeconds: Int
  body: String!
  heroImage: HeroImage
  heroImageRendition: HeroImageRendition
  likeCount: Int!
  bookmarkCount: Int!
  viewCount: Int!
  tagNames: [String!]!
  shareCount: Int!
  documents: [Document]
  author: Author!
  categoryDetails: [CategoryDetail]
  featuredMedia: [FeaturedMedia]
  galleryImages: [GalleryImage]
}

type HeroImage {
  id: Int!
  meta: ImageMeta!
  title: String!
}

type HeroImageRendition {
  url: String!
  width: Int!
  height: Int!
  alt: String!
}

type ContentMeta {
  contentType: String!
  contentDetailURL: String!
  contentHTMLURL: String!
  slug: String!
  showInMenus: Boolean
  seoTitle: String
  searchDescription: String
  firstPublishedAt: String!
  locale: String
}

type CategoryDetail {
  id: Int!
  categoryName: String!
  categoryIcon: String!
}

type Author {
  id: String!
}

type Document {
  id: Int!
  document: DocumentData!
  meta: DocumentMeta!
}

type DocumentMeta {
  type: String!
  documentDetailUrl: String!
  documentDownloadUrl: String!
}

type DocumentData {
  id: Int!
  title: String!
  meta: DocumentMeta!
}

type ContentItemCategory {
  id: Int!
  name: String!
  iconUrl: String!
}

type FeaturedMedia {
  id: Int!
  url: String!
  title: String!
  type: String!
  duration: Float
  width: Int
  height: Int
  thumbnail: String
}

type GalleryImage {
  id: Int!
  image: ImageDetail!
}

type ImageDetail {
  id: Int!
  title: String!
  meta: ImageMeta!
}

type ImageMeta {
  type: String!
  imageDetailUrl: String!
  imageDownloadUrl: String!
}

type ClientHealthDiaryQuote {
  author: String!
  quote: String!
}

type ClientHealthDiaryEntry {
  id: String!
  active: Boolean!
  mood: String!
  note: String!
  entryType: String!
  shareWithHealthWorker: Boolean
  sharedAt: Time
  clientID: String!
  createdAt: Time
  phoneNumber: String
  clientName: String
}

type ServiceRequest {
  id: String!
  requestType: String!
  request: String!
  status: String!
  clientID: String
  staffID: String
  createdAt: Time
  inProgressAt: Time
  inProgressBy: String
  resolvedAt: Time
  resolvedBy: String
  resolvedByName: String
  facilityID: String
  clientName: String
  staffName: String
  staffContact: String
  clientContact: String
  meta: Map
}

type ClientRegistrationOutput {
  id: String!
  active: Boolean!
  clientTypes: [ClientType!]
  enrollmentDate: Time
  fhirPatientID: String
  emrHealthRecordID: String
  treatmentBuddy: String
  counselled: Boolean!
  organisation: String!
  userID: String!
  currentFacilityID: String!
  chv: String!
  caregiver: String!
}

type RequestTypeCount {
  requestType: ServiceRequestType!
  total: Int!
}

type ServiceRequestsCount {
  requestsTypeCount: [RequestTypeCount!]!
}

type ServiceRequestsCountResponse {
  clientsServiceRequestCount: ServiceRequestsCount!
  staffServiceRequestCount: ServiceRequestsCount!
}

type Community {
  id: String!
  cid: String
  name: String!
  disabled: Boolean
  frozen: Boolean
  memberCount: Int
  createdAt: Time
  updatedAt: Time
  # Custom defined fields
  ageRange: AgeRange
  gender: [Gender!]!
  clientType: [ClientType!]
  inviteOnly: Boolean!
  description: String!
  members: [CommunityMember]
  createdBy: Member
}

type AgeRange {
  lowerBound: Int!
  upperBound: Int!
}

type PostingHours {
  start: Time!
  end: Time!
}

"""
Member represents a user and is specific to use in the context of communities
"""
type Member {
  id: ID!
  userID: ID!
  name: String!
  role: String!
  username: String!
  gender: Gender!
  userType: String
  extraData: Map
  ageUpperBound: Int
  ageLowerBound: Int
  clientTypes: [String]
}

"""
CommunityMember represents a user in a community and their associated additional details.
"""
type CommunityMember {
  userID: ID!
  user: Member!
  isModerator: Boolean!
  invited: Boolean
  inviteAcceptedAt: Time
  inviteRejectedAt: Time
  role: String
  userType: String!
}

type Appointment {
  id: ID!
  reason: String!
  date: Date!
  hasRescheduledAppointment: Boolean!
}

type AppointmentsPage {
  appointments: [Appointment]!
  pagination: Pagination!
}

type Notification {
  id: ID!
  title: String
  body: String!
  type: NotificationType!
  isRead: Boolean
  createdAt: Time
}

type NotificationsPage {
  notifications: [Notification]!
  pagination: Pagination!
}

type NotificationTypeFilter {
  enum: NotificationType!
  name: String!
}

type ScreeningToolQuestion {
  id: String
  question: String
  toolType: ScreeningToolType
  responseChoices: Map
  responseType: ScreeningToolResponseType
  responseCategory: ScreeningToolResponseCategory
  sequence: Int
  active: Boolean
  meta: Map
}

type StaffRegistrationOutput {
  id: String!
  active: Boolean!
  staffNumber: String!
  userID: String!
  defaultFacility: String!
}

type ClientProfile {
  id: String!
  user: User!
  active: Boolean
  clientTypes: [ClientType!]
  treatmentEnrollmentDate: Time
  fhirPatientID: String
  healthRecordID: String
  treatmentBuddy: String
  clientCounselled: Boolean
  defaultFacility: Facility!
  chvUserID: String
  chvUserName: String
  caregiverID: String
  cccNumber: String!
}

type StaffProfile {
  id: String!
  user: User!
  userID: String!
  active: Boolean!
  staffNumber: String!
  defaultFacility: Facility!
}

type CaregiverProfile {
  id: ID!
  user: User!
  caregiverNumber: String!
  isClient: Boolean
  consent: ConsentStatus!
  currentClient: String!
  currentFacility: String!
}

type ClientResponse {
  clientProfile: ClientProfile!
  roles: [AuthorityRole!]
  permissions: [AuthorityPermission!]
  communityToken: String!
}

type ScreeningToolAssessmentResponse {
  clientName: String!
  dateAnswered: Time!
  clientID: String!
}

type User {
  id: String!
  username: String!
  name: String!
  gender: Gender
  active: Boolean
  contacts: Contact!
  isPhoneVerified: Boolean
  termsAccepted: Boolean
  acceptedTermsID: Int
  suspended: Boolean
  dateOfBirth: Time
  currentOrganizationID: String
  currentProgramID: String
}

type Contact {
  id: String
  contactType: String
  contactValue: String
  active: Boolean
  optedIn: Boolean
}

type AuthorityRole {
  authorityRoleID: String
  name: UserRoleType
  active: Boolean
}

type AuthorityPermission  {
	permissionID:  ID
	active: Boolean
}


type Attachment {
  type: String
  author_name: String
  title: String
  title_link: String
  text: String
  image_url: String
  thumb_url: String
  asset_url: String
  og_scrape_url: String
}

type Reaction {
  message_id: String
  user_id: String
  type: String
}

type GetstreamMessage {
  id: String
  text: String
  html: String
  type: MessageType
  silent: Boolean
  user: Member
  attachments: [Attachment]
  latest_reactions: [Reaction]
  own_reactions: [Reaction]
  # reaction_counts:  Map
  parent_id: String
  show_in_channel: Boolean
  reply_count: Int
  mentioned_users: [Member]
  shadowed: Boolean
  pinned_at: Time
  pinned_by: Member
  created_at: Time
  updated_at: Time
  deleted_at: Time
}

# message Fag response
type MessageFlag {
  user: Member
  message: GetstreamMessage
}

type ModerationResult {
  message_id: String
  action: String
  moderated_by: String
  blocked_word: String
  blocklist_name: String
  moderation_thresholds: ModerationThresholds
  AI_moderation_response: AIModerationResponse
  user_karma: Float
  user_bad_karma: Boolean
  created_at: Time
  updated_at: Time
}

type ModerationThresholds {
  explicit: Explicit
  spam: Spam
  toxic: Toxic
}

type AIModerationResponse {
  toxic: Float
  explicit: Float
  spam: Float
}

type Explicit {
  flag: Float
  block: Float
}

type Spam {
  flag: Float
  block: Float
}

type Toxic {
  flag: Float
  block: Float
}

type AvailableScreeningTools {
  toolType: ScreeningToolType!
}

type ScreeningToolResponse {
  toolIndex: Int!
  tool: String!
  response: String!
}

type ScreeningToolResponsePayload {
  serviceRequestID: String!
  clientContact: String!
  screeningToolResponses: [ScreeningToolResponse!]!
}

type SurveyForm {
  projectID: Int
  xmlFormID: String
  name: String
}

type UserSurvey {
  id: String!
  active: Boolean!
  created: Time!
  link: String!
  title: String!
  description: String!
  hasSubmitted: Boolean!
  userID: String!
  token: String!
  projectID: Int!
  formID: String!
  linkID: Int
  programID: String!
  organisationID: String!
}

type SurveyRespondent {
  id: String!
  name: String!
  submittedAt: Time!
  projectID: Int!
  submitterID: Int!
  formID: String!
}

type SurveyRespondentPage {
  surveyRespondents: [SurveyRespondent]!
  pagination: Pagination!
}

type SurveyResponse {
  question: String!
  answer: [String!]
  questionType: String!
}

type Questionnaire {
  id: String!
  active: Boolean!
  name: String!
  description: String!
  questions: [Question!]!
}

type ScreeningTool {
  id: String!
  active: Boolean!
  questionnaireID: String!
  threshold: Int
  clientTypes: [ClientType]
  genders: [Gender]
  ageRange: AgeRange
  questionnaire: Questionnaire
}

type Question {
  id: String!
  active: Boolean!
  questionnaireID: String!
  text: String!
  questionType: QuestionType!
  responseValueType: QuestionResponseValueType!
  required: Boolean!
  selectMultiple: Boolean
  sequence: Int!
  choices: [QuestionInputChoice]
}

type QuestionInputChoice {
  id: String!
  active: Boolean!
  questionID: String!
  choice: String!
  value: String!
  score: Int
}

type QuestionnaireScreeningToolResponse {
  id: String!
  active: Boolean!
  screeningToolID: String!
  facilityID: String!
  clientID: String!
  aggregateScore: Int
  questionResponses: [QuestionnaireScreeningToolQuestionResponse!]!
}

type QuestionnaireScreeningToolQuestionResponse {
  id: String!
  active: Boolean!
  screeningToolResponseID: String!
  questionID: String!
  questionType: QuestionType
  selectMultiple: Boolean
  responseValueType: QuestionResponseValueType
  sequence: Int
  questionText: String
  response: String!
  normalizedResponse: Map
  score: Int
}

type ScreeningToolRespondent {
  clientID: String!
  screeningToolResponseID: String!
  serviceRequestID: String!
  name: String!
  phoneNumber: String!
  serviceRequest: String!
}

type ScreeningToolPage {
  screeningTools: [ScreeningTool]!
  pagination: Pagination!
}
type ScreeningToolRespondentsPage {
  screeningToolRespondents: [ScreeningToolRespondent]!
  pagination: Pagination!
}

type SurveysWithServiceRequest {
  title: String!
  projectID: Int!
  formID: String!
  linkID: Int!
}

type SurveyServiceRequestUser {
  name: String!
  formID: String!
  projectID: Int!
  submitterID: Int!
  surveyName: String
  serviceRequestID: String!
  phoneNumber: String!
}

type SurveyServiceRequestUserPage {
  users: [SurveyServiceRequestUser]!
  pagination: Pagination!
}

type FacilityOutputPage {
  pagination: Pagination!
  facilities: [Facility]!
}

type ManagedClient {
	clientProfile: ClientProfile 
	caregiverConsent: ConsentState
	clientConsent: ConsentState
  workStationDetails: WorkStationDetails         
}

type ManagedClientOutputPage{
	pagination: Pagination 
	managedClients: [ManagedClient]!
}

type CaregiverProfileOutputPage {
  pagination: Pagination!
  caregivers: [CaregiverProfile]!
}

type ConsentStatus {
  consentStatus: ConsentState!
}

type Organisation {
	id:          String
	name:        String
	description: String
}

type Program {
  id: ID!
  active: Boolean!
	name: String!
	organisation: Organisation!
}

type ProgramOutput {
	count:    Int!
	programs: [Program!]
}

type StaffResponse {
  staffProfile: StaffProfile!
  roles: [AuthorityRole!]
  permissions: [AuthorityPermission!]
  communityToken: String!
}

type OTPResponse {
  otp: String!
  phoneNumber: String!
}

type ProgramPage {
  programs: [Program]!
  pagination: Pagination!
}`, BuiltIn: false},
	{Name: "../user.graphql", Input: `extend type Query {
  getCurrentTerms: TermsOfService!
  verifyPIN(userID: String!, flavour: Flavour!, pin: String!): Boolean!
  searchClientUser(searchParameter: String!): [ClientProfile!]
  searchStaffUser(searchParameter: String!): [StaffProfile!]
  searchCaregiverUser(searchParameter: String!): [CaregiverProfile!]
  getClientProfileByCCCNumber(CCCNumber: String!): ClientProfile!
  getCaregiverManagedClients(userID: ID!, paginationInput: PaginationsInput!): ManagedClientOutputPage
  listClientsCaregivers(clientID: String!, paginationInput: PaginationsInput): CaregiverProfileOutputPage
  getStaffFacilities(staffID: ID!, paginationInput: PaginationsInput!): FacilityOutputPage
  getClientFacilities(clientID: ID!, paginationInput: PaginationsInput!): FacilityOutputPage
  checkIdentifierExists(identifierType: ClientIdentifierType!, identifierValue: String!): Boolean!
}

extend type Mutation {
  acceptTerms(userID: String!, termsID: Int!): Boolean!
  setNickName(userID: String!, nickname: String!): Boolean!
  completeOnboardingTour(userID: String!, flavour: Flavour!): Boolean!
  registerClient(input: ClientRegistrationInput): ClientRegistrationOutput!
  registerStaff(input: StaffRegistrationInput!): StaffRegistrationOutput!
  registerCaregiver(input: CaregiverInput!): CaregiverProfile!
  registerClientAsCaregiver(clientID: ID!, caregiverNumber: String!): CaregiverProfile!
  optOut(phoneNumber: String!, flavour: Flavour!): Boolean!
  setPushToken(token: String!): Boolean!
  inviteUser(
    userID: String!
    phoneNumber: String!
    flavour: Flavour!
    reinvite: Boolean
  ): Boolean!
  setUserPIN(input: PINInput): Boolean!
  transferClientToFacility(clientId: ID!, facilityID: ID!): Boolean!
  setStaffDefaultFacility(staffID: ID!, facilityID: ID!): Facility!
  setClientDefaultFacility(clientID: ID!, facilityID: ID!): Facility!
  addFacilitiesToStaffProfile(staffID: ID!, facilities: [ID!]!): Boolean!
  addFacilitiesToClientProfile(clientID: ID!, facilities: [ID!]!): Boolean!
  removeFacilitiesFromClientProfile(clientID: ID!, facilities: [ID!]!): Boolean!
  assignCaregiver(input: ClientCaregiverInput!): Boolean!
  removeFacilitiesFromStaffProfile(staffID: ID!, facilities: [ID!]!): Boolean!
  registerExistingUserAsStaff(input: ExistingUserStaffInput!): StaffRegistrationOutput!
  consentToAClientCaregiver(clientID: ID!, caregiverID: ID!, consent: Boolean!): Boolean!
  consentToManagingClient(caregiverID: ID!, clientID: ID!, consent: Boolean! ): Boolean!
  registerExistingUserAsClient(input: ExistingUserClientInput!): ClientRegistrationOutput!
  setCaregiverCurrentClient(clientID: ID!): ClientProfile!
  setCaregiverCurrentFacility(clientID: ID!, facilityID: ID!): Facility!
  registerExistingUserAsCaregiver(userID: ID!, caregiverNumber: String!): CaregiverProfile!
  updateProfile(
    userID: String!
    cccNumber: String
    username: String
    phoneNumber: String
    programID: String!
    flavour: Flavour!
  ): Boolean!
}
`, BuiltIn: false},
	{Name: "../../../../../federation/directives.graphql", Input: `
	scalar _Any
	scalar _FieldSet

	directive @external on FIELD_DEFINITION
	directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
	directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
	directive @extends on OBJECT | INTERFACE

	directive @key(fields: _FieldSet!) repeatable on OBJECT | INTERFACE
`, BuiltIn: true},
	{Name: "../../../../../federation/entity.graphql", Input: `
type _Service {
  sdl: String
}

extend type Query {
  _service: _Service!
}
`, BuiltIn: true},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_acceptInvitation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["memberID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["communityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("communityID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_acceptTerms_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["termsID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("termsID"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["termsID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addFacilitiesToClientProfile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["facilities"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilities"))
		arg1, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilities"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addFacilitiesToStaffProfile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["staffID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["staffID"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["facilities"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilities"))
		arg1, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilities"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addFacilityContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["facilityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilityID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["contact"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contact"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contact"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addFacilityToProgram_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["facilityIDs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityIDs"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilityIDs"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addMembersToCommunity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["memberIDs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberIDs"))
		arg0, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberIDs"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["communityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("communityID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addModerators_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["memberIDs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberIDs"))
		arg0, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberIDs"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["communityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("communityID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_answerScreeningToolQuestion_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*dto.ScreeningToolQuestionResponseInput
	if tmp, ok := rawArgs["screeningToolResponses"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("screeningToolResponses"))
		arg0, err = ec.unmarshalNScreeningToolQuestionResponseInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐScreeningToolQuestionResponseInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["screeningToolResponses"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_assignCaregiver_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ClientCaregiverInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNClientCaregiverInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐClientCaregiverInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_assignOrRevokeRoles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 []*enums.UserRoleType
	if tmp, ok := rawArgs["roles"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
		arg1, err = ec.unmarshalOUserRoleType2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐUserRoleType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roles"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_banUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["memberID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["bannedBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bannedBy"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["bannedBy"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["communityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("communityID"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityID"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_bookmarkContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["contentItemID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentItemID"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contentItemID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_collectMetric_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.Metric
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNMetricInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐMetric(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_completeOnboardingTour_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg1, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_consentToAClientCaregiver_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["caregiverID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("caregiverID"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["caregiverID"] = arg1
	var arg2 bool
	if tmp, ok := rawArgs["consent"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consent"))
		arg2, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["consent"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_consentToManagingClient_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["caregiverID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("caregiverID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["caregiverID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg1
	var arg2 bool
	if tmp, ok := rawArgs["consent"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consent"))
		arg2, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["consent"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_createCommunity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.CommunityInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCommunityInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐCommunityInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createHealthDiaryEntry_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["mood"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mood"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mood"] = arg2
	var arg3 bool
	if tmp, ok := rawArgs["reportToStaff"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reportToStaff"))
		arg3, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reportToStaff"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_createOrganisation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.OrganisationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganisationInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐOrganisationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createProgram_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ProgramInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNProgramInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐProgramInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createScreeningTool_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ScreeningToolInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNScreeningToolInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐScreeningToolInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createServiceRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ServiceRequestInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNServiceRequestInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐServiceRequestInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCommunities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["communityIDs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("communityIDs"))
		arg0, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityIDs"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["hardDelete"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hardDelete"))
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["hardDelete"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCommunityMessage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["messageID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["messageID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFacility_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.FacilityIdentifierInput
	if tmp, ok := rawArgs["identifier"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
		arg0, err = ec.unmarshalNFacilityIdentifierInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐFacilityIdentifierInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["identifier"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteOrganisation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["organisationID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organisationID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organisationID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_demoteModerators_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["communityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("communityID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityID"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["memberIDs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberIDs"))
		arg1, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberIDs"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_inactivateFacility_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.FacilityIdentifierInput
	if tmp, ok := rawArgs["identifier"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
		arg0, err = ec.unmarshalNFacilityIdentifierInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐFacilityIdentifierInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["identifier"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_inviteUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["phoneNumber"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phoneNumber"] = arg1
	var arg2 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg2, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["reinvite"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reinvite"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reinvite"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_likeContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["contentID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentID"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contentID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_optOut_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["phoneNumber"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phoneNumber"] = arg0
	var arg1 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg1, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_reactivateFacility_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.FacilityIdentifierInput
	if tmp, ok := rawArgs["identifier"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
		arg0, err = ec.unmarshalNFacilityIdentifierInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐFacilityIdentifierInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["identifier"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_readNotifications_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordSecurityQuestionResponses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*dto.SecurityQuestionResponseInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSecurityQuestionResponseInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐSecurityQuestionResponseInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerCaregiver_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.CaregiverInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCaregiverInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐCaregiverInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerClientAsCaregiver_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["caregiverNumber"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("caregiverNumber"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["caregiverNumber"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_registerClient_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *dto.ClientRegistrationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOClientRegistrationInput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐClientRegistrationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerExistingUserAsCaregiver_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["caregiverNumber"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("caregiverNumber"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["caregiverNumber"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_registerExistingUserAsClient_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ExistingUserClientInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNExistingUserClientInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐExistingUserClientInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerExistingUserAsStaff_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ExistingUserStaffInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNExistingUserStaffInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐExistingUserStaffInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerStaff_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.StaffRegistrationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNStaffRegistrationInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐStaffRegistrationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_rejectInvitation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["memberID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["communityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("communityID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_removeFacilitiesFromClientProfile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["facilities"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilities"))
		arg1, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilities"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_removeFacilitiesFromStaffProfile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["staffID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["staffID"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["facilities"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilities"))
		arg1, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilities"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_removeMembersFromCommunity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["communityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("communityID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityID"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["memberIDs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberIDs"))
		arg1, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberIDs"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_rescheduleAppointment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["appointmentID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appointmentID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["appointmentID"] = arg0
	var arg1 scalarutils.Date
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg1, err = ec.unmarshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_resolveServiceRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["staffID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["staffID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["requestID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requestID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["requestID"] = arg1
	var arg2 []string
	if tmp, ok := rawArgs["action"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("action"))
		arg2, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["action"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["comment"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["comment"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_respondToScreeningTool_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.QuestionnaireScreeningToolResponseInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNQuestionnaireScreeningToolResponseInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐQuestionnaireScreeningToolResponseInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_sendClientSurveyLinks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["facilityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilityID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["formID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["formID"] = arg1
	var arg2 int
	if tmp, ok := rawArgs["projectID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectID"))
		arg2, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectID"] = arg2
	var arg3 *dto.ClientFilterParamsInput
	if tmp, ok := rawArgs["filterParams"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filterParams"))
		arg3, err = ec.unmarshalOClientFilterParamsInput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐClientFilterParamsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filterParams"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_sendFCMNotification_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["registrationTokens"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationTokens"))
		arg0, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["registrationTokens"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["data"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
		arg1, err = ec.unmarshalNMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["data"] = arg1
	var arg2 firebasetools.FirebaseSimpleNotificationInput
	if tmp, ok := rawArgs["notification"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notification"))
		arg2, err = ec.unmarshalNFirebaseSimpleNotificationInput2githubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFirebaseSimpleNotificationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["notification"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_sendFeedback_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.FeedbackResponseInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNFeedbackResponseInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐFeedbackResponseInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setCaregiverCurrentClient_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setCaregiverCurrentFacility_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["facilityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityID"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilityID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_setClientDefaultFacility_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["facilityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityID"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilityID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_setClientProgram_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["programID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("programID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["programID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setInProgressBy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["serviceRequestID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceRequestID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["serviceRequestID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["staffID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["staffID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_setNickName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["nickname"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickname"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nickname"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_setPushToken_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setStaffDefaultFacility_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["staffID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["staffID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["facilityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityID"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilityID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_setStaffProgram_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["programID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("programID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["programID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setUserPIN_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *dto.PINInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOPINInput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐPINInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_shareContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ShareContentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNShareContentInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐShareContentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_shareHealthDiaryEntry_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["healthDiaryEntryID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("healthDiaryEntryID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["healthDiaryEntryID"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["shareEntireHealthDiary"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shareEntireHealthDiary"))
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["shareEntireHealthDiary"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_transferClientToFacility_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["facilityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityID"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilityID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_unBanUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["memberID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["communityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("communityID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_unBookmarkContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["contentItemID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentItemID"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contentItemID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_unlikeContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["contentID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentID"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contentID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProfile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["cccNumber"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cccNumber"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cccNumber"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["username"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["username"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["phoneNumber"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phoneNumber"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["programID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("programID"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["programID"] = arg4
	var arg5 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg5, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg5
	return args, nil
}

func (ec *executionContext) field_Mutation_verifyClientPinResetServiceRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["serviceRequestID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceRequestID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["serviceRequestID"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["cccNumber"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cccNumber"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cccNumber"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["phoneNumber"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phoneNumber"] = arg3
	var arg4 bool
	if tmp, ok := rawArgs["physicalIdentityVerified"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("physicalIdentityVerified"))
		arg4, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["physicalIdentityVerified"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["state"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
		arg5, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["state"] = arg5
	return args, nil
}

func (ec *executionContext) field_Mutation_verifyStaffPinResetServiceRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["phoneNumber"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phoneNumber"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["serviceRequestID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceRequestID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["serviceRequestID"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["verificationStatus"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("verificationStatus"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["verificationStatus"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_verifySurveySubmission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.VerifySurveySubmissionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNVerifySurveySubmissionInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐVerifySurveySubmissionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_viewContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["contentID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentID"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contentID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_canRecordMood_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_checkIdentifierExists_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 enums.ClientIdentifierType
	if tmp, ok := rawArgs["identifierType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifierType"))
		arg0, err = ec.unmarshalNClientIdentifierType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientIdentifierType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["identifierType"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["identifierValue"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifierValue"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["identifierValue"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_checkIfUserBookmarkedContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["contentID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentID"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contentID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_checkIfUserHasLikedContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["contentID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentID"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contentID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_fetchClientAppointments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 dto.PaginationsInput
	if tmp, ok := rawArgs["paginationInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paginationInput"))
		arg1, err = ec.unmarshalNPaginationsInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐPaginationsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paginationInput"] = arg1
	var arg2 []*firebasetools.FilterParam
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg2, err = ec.unmarshalOFilterParam2ᚕᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFilterParamᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_fetchNotificationTypeFilters_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg0, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_fetchNotifications_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg1, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg1
	var arg2 dto.PaginationsInput
	if tmp, ok := rawArgs["paginationInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paginationInput"))
		arg2, err = ec.unmarshalNPaginationsInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐPaginationsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paginationInput"] = arg2
	var arg3 *domain.NotificationFilters
	if tmp, ok := rawArgs["filters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
		arg3, err = ec.unmarshalONotificationFilters2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐNotificationFilters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filters"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getAssessmentResponsesByToolType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["facilityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilityID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["toolType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolType"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["toolType"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getAvailableFacilityScreeningTools_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["facilityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilityID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAvailableScreeningToolQuestions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAvailableScreeningTools_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["facilityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilityID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getCaregiverManagedClients_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 dto.PaginationsInput
	if tmp, ok := rawArgs["paginationInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paginationInput"))
		arg1, err = ec.unmarshalNPaginationsInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐPaginationsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paginationInput"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getClientFacilities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 dto.PaginationsInput
	if tmp, ok := rawArgs["paginationInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paginationInput"))
		arg1, err = ec.unmarshalNPaginationsInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐPaginationsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paginationInput"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getClientHealthDiaryEntries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 *enums.Mood
	if tmp, ok := rawArgs["moodType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moodType"))
		arg1, err = ec.unmarshalOMood2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐMood(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["moodType"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["shared"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shared"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["shared"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getClientProfileByCCCNumber_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["CCCNumber"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CCCNumber"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["CCCNumber"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["categoryID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryID"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["categoryID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getFAQs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg0, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getFacilityRespondedScreeningTools_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["facilityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilityID"] = arg0
	var arg1 dto.PaginationsInput
	if tmp, ok := rawArgs["paginationInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paginationInput"))
		arg1, err = ec.unmarshalNPaginationsInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐPaginationsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paginationInput"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getHealthDiaryQuote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPendingServiceRequestsCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["facilityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilityID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getProgramFacilities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["programID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("programID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["programID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getScreeningToolByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getScreeningToolQuestions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["toolType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolType"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["toolType"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getScreeningToolRespondents_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["facilityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilityID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["screeningToolID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("screeningToolID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["screeningToolID"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["searchTerm"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchTerm"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchTerm"] = arg2
	var arg3 dto.PaginationsInput
	if tmp, ok := rawArgs["paginationInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paginationInput"))
		arg3, err = ec.unmarshalNPaginationsInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐPaginationsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paginationInput"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getScreeningToolResponse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getScreeningToolServiceRequestResponses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 *enums.ScreeningToolType
	if tmp, ok := rawArgs["toolType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("toolType"))
		arg1, err = ec.unmarshalOScreeningToolType2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐScreeningToolType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["toolType"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getSecurityQuestions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg0, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getServiceRequests_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["requestType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requestType"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["requestType"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["requestStatus"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requestStatus"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["requestStatus"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["facilityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityID"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilityID"] = arg2
	var arg3 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg3, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getSharedHealthDiaryEntries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["facilityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilityID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getStaffFacilities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["staffID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["staffID"] = arg0
	var arg1 dto.PaginationsInput
	if tmp, ok := rawArgs["paginationInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paginationInput"))
		arg1, err = ec.unmarshalNPaginationsInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐPaginationsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paginationInput"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getSurveyResponse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.SurveyResponseInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSurveyResponseInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐSurveyResponseInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSurveyServiceRequestUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["facilityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilityID"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["projectID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectID"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectID"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["formID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formID"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["formID"] = arg2
	var arg3 dto.PaginationsInput
	if tmp, ok := rawArgs["paginationInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paginationInput"))
		arg3, err = ec.unmarshalNPaginationsInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐPaginationsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paginationInput"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getSurveyWithServiceRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["facilityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilityID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserBookmarkedContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserRoles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["organisationID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organisationID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organisationID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getUserSurveyForms_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_inviteMembersToCommunity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["communityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("communityID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityID"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["memberIDs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberIDs"))
		arg1, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberIDs"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listClientsCaregivers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 *dto.PaginationsInput
	if tmp, ok := rawArgs["paginationInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paginationInput"))
		arg1, err = ec.unmarshalOPaginationsInput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐPaginationsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paginationInput"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listCommunities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *stream_chat.QueryOption
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOQueryOption2ᚖgithubᚗcomᚋGetStreamᚋstreamᚑchatᚑgoᚋv5ᚐQueryOption(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_listCommunityBannedMembers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["communityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("communityID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_listCommunityMembers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["communityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("communityID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityID"] = arg0
	var arg1 *stream_chat.QueryOption
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOQueryOption2ᚖgithubᚗcomᚋGetStreamᚋstreamᚑchatᚑgoᚋv5ᚐQueryOption(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listFacilities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["searchTerm"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchTerm"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchTerm"] = arg0
	var arg1 []*dto.FiltersInput
	if tmp, ok := rawArgs["filterInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filterInput"))
		arg1, err = ec.unmarshalOFiltersInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐFiltersInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filterInput"] = arg1
	var arg2 dto.PaginationsInput
	if tmp, ok := rawArgs["paginationInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paginationInput"))
		arg2, err = ec.unmarshalNPaginationsInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐPaginationsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paginationInput"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_listFlaggedMessages_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["communityCID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("communityCID"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["communityCID"] = arg0
	var arg1 []*string
	if tmp, ok := rawArgs["memberIDs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberIDs"))
		arg1, err = ec.unmarshalOString2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberIDs"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listMembers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *stream_chat.QueryOption
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOQueryOption2ᚖgithubᚗcomᚋGetStreamᚋstreamᚑchatᚑgoᚋv5ᚐQueryOption(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_listOrganisations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.PaginationsInput
	if tmp, ok := rawArgs["paginationInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paginationInput"))
		arg0, err = ec.unmarshalNPaginationsInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐPaginationsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paginationInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_listPendingInvites_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["memberID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberID"] = arg0
	var arg1 *stream_chat.QueryOption
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOQueryOption2ᚖgithubᚗcomᚋGetStreamᚋstreamᚑchatᚑgoᚋv5ᚐQueryOption(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listPrograms_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.PaginationsInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalNPaginationsInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐPaginationsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_listSurveyRespondents_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["projectID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectID"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["formID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["formID"] = arg1
	var arg2 dto.PaginationsInput
	if tmp, ok := rawArgs["paginationInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paginationInput"))
		arg2, err = ec.unmarshalNPaginationsInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐPaginationsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paginationInput"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_listSurveys_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["projectID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectID"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_listUserPrograms_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg1, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_nextRefill_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recommendedCommunities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clientID"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_retrieveFacilityByIdentifier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.FacilityIdentifierInput
	if tmp, ok := rawArgs["identifier"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
		arg0, err = ec.unmarshalNFacilityIdentifierInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐFacilityIdentifierInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["identifier"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["isActive"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["isActive"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_retrieveFacility_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["active"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["active"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_searchCaregiverUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["searchParameter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchParameter"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchParameter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_searchClientUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["searchParameter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchParameter"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchParameter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_searchFacility_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["searchParameter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchParameter"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchParameter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_searchOrganisations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["searchParameter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchParameter"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchParameter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_searchPrograms_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["searchParameter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchParameter"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchParameter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_searchServiceRequests_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["searchTerm"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchTerm"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchTerm"] = arg0
	var arg1 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg1, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["requestType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requestType"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["requestType"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["facilityID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityID"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["facilityID"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_searchStaffUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["searchParameter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchParameter"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchParameter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_sendOTP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["username"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["username"] = arg0
	var arg1 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg1, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_verifyPIN_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg1, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["pin"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pin"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pin"] = arg2
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AIModerationResponse_toxic(ctx context.Context, field graphql.CollectedField, obj *domain.AIModerationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AIModerationResponse_toxic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Toxic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AIModerationResponse_toxic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AIModerationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AIModerationResponse_explicit(ctx context.Context, field graphql.CollectedField, obj *domain.AIModerationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AIModerationResponse_explicit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Explicit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AIModerationResponse_explicit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AIModerationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AIModerationResponse_spam(ctx context.Context, field graphql.CollectedField, obj *domain.AIModerationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AIModerationResponse_spam(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spam, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AIModerationResponse_spam(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AIModerationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AgeRange_lowerBound(ctx context.Context, field graphql.CollectedField, obj *domain.AgeRange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AgeRange_lowerBound(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LowerBound, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AgeRange_lowerBound(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AgeRange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AgeRange_upperBound(ctx context.Context, field graphql.CollectedField, obj *domain.AgeRange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AgeRange_upperBound(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpperBound, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AgeRange_upperBound(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AgeRange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Appointment_id(ctx context.Context, field graphql.CollectedField, obj *domain.Appointment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Appointment_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Appointment_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Appointment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Appointment_reason(ctx context.Context, field graphql.CollectedField, obj *domain.Appointment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Appointment_reason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Appointment_reason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Appointment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Appointment_date(ctx context.Context, field graphql.CollectedField, obj *domain.Appointment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Appointment_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(scalarutils.Date)
	fc.Result = res
	return ec.marshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Appointment_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Appointment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Date does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Appointment_hasRescheduledAppointment(ctx context.Context, field graphql.CollectedField, obj *domain.Appointment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Appointment_hasRescheduledAppointment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasRescheduledAppointment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Appointment_hasRescheduledAppointment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Appointment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AppointmentsPage_appointments(ctx context.Context, field graphql.CollectedField, obj *domain.AppointmentsPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AppointmentsPage_appointments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Appointments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.Appointment)
	fc.Result = res
	return ec.marshalNAppointment2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAppointment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AppointmentsPage_appointments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AppointmentsPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Appointment_id(ctx, field)
			case "reason":
				return ec.fieldContext_Appointment_reason(ctx, field)
			case "date":
				return ec.fieldContext_Appointment_date(ctx, field)
			case "hasRescheduledAppointment":
				return ec.fieldContext_Appointment_hasRescheduledAppointment(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Appointment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AppointmentsPage_pagination(ctx context.Context, field graphql.CollectedField, obj *domain.AppointmentsPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AppointmentsPage_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Pagination)
	fc.Result = res
	return ec.marshalNPagination2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AppointmentsPage_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AppointmentsPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_Pagination_limit(ctx, field)
			case "currentPage":
				return ec.fieldContext_Pagination_currentPage(ctx, field)
			case "count":
				return ec.fieldContext_Pagination_count(ctx, field)
			case "totalPages":
				return ec.fieldContext_Pagination_totalPages(ctx, field)
			case "nextPage":
				return ec.fieldContext_Pagination_nextPage(ctx, field)
			case "previousPage":
				return ec.fieldContext_Pagination_previousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_type(ctx context.Context, field graphql.CollectedField, obj *domain.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_author_name(ctx context.Context, field graphql.CollectedField, obj *domain.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_author_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_author_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_title(ctx context.Context, field graphql.CollectedField, obj *domain.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_title_link(ctx context.Context, field graphql.CollectedField, obj *domain.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_title_link(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TitleLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_title_link(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_text(ctx context.Context, field graphql.CollectedField, obj *domain.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_image_url(ctx context.Context, field graphql.CollectedField, obj *domain.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_image_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_image_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_thumb_url(ctx context.Context, field graphql.CollectedField, obj *domain.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_thumb_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_thumb_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_asset_url(ctx context.Context, field graphql.CollectedField, obj *domain.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_asset_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssetURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_asset_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_og_scrape_url(ctx context.Context, field graphql.CollectedField, obj *domain.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_og_scrape_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OgScrapeURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_og_scrape_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Author_id(ctx context.Context, field graphql.CollectedField, obj *domain.Author) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Author_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Author_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Author",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorityPermission_permissionID(ctx context.Context, field graphql.CollectedField, obj *domain.AuthorityPermission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorityPermission_permissionID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PermissionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorityPermission_permissionID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorityPermission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorityPermission_active(ctx context.Context, field graphql.CollectedField, obj *domain.AuthorityPermission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorityPermission_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorityPermission_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorityPermission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorityRole_authorityRoleID(ctx context.Context, field graphql.CollectedField, obj *domain.AuthorityRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorityRole_authorityRoleID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorityRoleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorityRole_authorityRoleID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorityRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorityRole_name(ctx context.Context, field graphql.CollectedField, obj *domain.AuthorityRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorityRole_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(enums.UserRoleType)
	fc.Result = res
	return ec.marshalOUserRoleType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐUserRoleType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorityRole_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorityRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UserRoleType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthorityRole_active(ctx context.Context, field graphql.CollectedField, obj *domain.AuthorityRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthorityRole_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthorityRole_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthorityRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AvailableScreeningTools_toolType(ctx context.Context, field graphql.CollectedField, obj *domain.AvailableScreeningTools) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AvailableScreeningTools_toolType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ToolType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enums.ScreeningToolType)
	fc.Result = res
	return ec.marshalNScreeningToolType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐScreeningToolType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AvailableScreeningTools_toolType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AvailableScreeningTools",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ScreeningToolType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CaregiverProfile_id(ctx context.Context, field graphql.CollectedField, obj *domain.CaregiverProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CaregiverProfile_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CaregiverProfile_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CaregiverProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CaregiverProfile_user(ctx context.Context, field graphql.CollectedField, obj *domain.CaregiverProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CaregiverProfile_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.User)
	fc.Result = res
	return ec.marshalNUser2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CaregiverProfile_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CaregiverProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "active":
				return ec.fieldContext_User_active(ctx, field)
			case "contacts":
				return ec.fieldContext_User_contacts(ctx, field)
			case "isPhoneVerified":
				return ec.fieldContext_User_isPhoneVerified(ctx, field)
			case "termsAccepted":
				return ec.fieldContext_User_termsAccepted(ctx, field)
			case "acceptedTermsID":
				return ec.fieldContext_User_acceptedTermsID(ctx, field)
			case "suspended":
				return ec.fieldContext_User_suspended(ctx, field)
			case "dateOfBirth":
				return ec.fieldContext_User_dateOfBirth(ctx, field)
			case "currentOrganizationID":
				return ec.fieldContext_User_currentOrganizationID(ctx, field)
			case "currentProgramID":
				return ec.fieldContext_User_currentProgramID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CaregiverProfile_caregiverNumber(ctx context.Context, field graphql.CollectedField, obj *domain.CaregiverProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CaregiverProfile_caregiverNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CaregiverNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CaregiverProfile_caregiverNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CaregiverProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CaregiverProfile_isClient(ctx context.Context, field graphql.CollectedField, obj *domain.CaregiverProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CaregiverProfile_isClient(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsClient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CaregiverProfile_isClient(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CaregiverProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CaregiverProfile_consent(ctx context.Context, field graphql.CollectedField, obj *domain.CaregiverProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CaregiverProfile_consent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Consent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.ConsentStatus)
	fc.Result = res
	return ec.marshalNConsentStatus2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐConsentStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CaregiverProfile_consent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CaregiverProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "consentStatus":
				return ec.fieldContext_ConsentStatus_consentStatus(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConsentStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CaregiverProfile_currentClient(ctx context.Context, field graphql.CollectedField, obj *domain.CaregiverProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CaregiverProfile_currentClient(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentClient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CaregiverProfile_currentClient(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CaregiverProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CaregiverProfile_currentFacility(ctx context.Context, field graphql.CollectedField, obj *domain.CaregiverProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CaregiverProfile_currentFacility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentFacility, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CaregiverProfile_currentFacility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CaregiverProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CaregiverProfileOutputPage_pagination(ctx context.Context, field graphql.CollectedField, obj *dto.CaregiverProfileOutputPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CaregiverProfileOutputPage_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Pagination)
	fc.Result = res
	return ec.marshalNPagination2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CaregiverProfileOutputPage_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CaregiverProfileOutputPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_Pagination_limit(ctx, field)
			case "currentPage":
				return ec.fieldContext_Pagination_currentPage(ctx, field)
			case "count":
				return ec.fieldContext_Pagination_count(ctx, field)
			case "totalPages":
				return ec.fieldContext_Pagination_totalPages(ctx, field)
			case "nextPage":
				return ec.fieldContext_Pagination_nextPage(ctx, field)
			case "previousPage":
				return ec.fieldContext_Pagination_previousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CaregiverProfileOutputPage_caregivers(ctx context.Context, field graphql.CollectedField, obj *dto.CaregiverProfileOutputPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CaregiverProfileOutputPage_caregivers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Caregivers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.CaregiverProfile)
	fc.Result = res
	return ec.marshalNCaregiverProfile2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCaregiverProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CaregiverProfileOutputPage_caregivers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CaregiverProfileOutputPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CaregiverProfile_id(ctx, field)
			case "user":
				return ec.fieldContext_CaregiverProfile_user(ctx, field)
			case "caregiverNumber":
				return ec.fieldContext_CaregiverProfile_caregiverNumber(ctx, field)
			case "isClient":
				return ec.fieldContext_CaregiverProfile_isClient(ctx, field)
			case "consent":
				return ec.fieldContext_CaregiverProfile_consent(ctx, field)
			case "currentClient":
				return ec.fieldContext_CaregiverProfile_currentClient(ctx, field)
			case "currentFacility":
				return ec.fieldContext_CaregiverProfile_currentFacility(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CaregiverProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryDetail_id(ctx context.Context, field graphql.CollectedField, obj *domain.CategoryDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryDetail_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryDetail_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryDetail_categoryName(ctx context.Context, field graphql.CollectedField, obj *domain.CategoryDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryDetail_categoryName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryDetail_categoryName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CategoryDetail_categoryIcon(ctx context.Context, field graphql.CollectedField, obj *domain.CategoryDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CategoryDetail_categoryIcon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryIcon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CategoryDetail_categoryIcon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CategoryDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientHealthDiaryEntry_id(ctx context.Context, field graphql.CollectedField, obj *domain.ClientHealthDiaryEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientHealthDiaryEntry_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientHealthDiaryEntry_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientHealthDiaryEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientHealthDiaryEntry_active(ctx context.Context, field graphql.CollectedField, obj *domain.ClientHealthDiaryEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientHealthDiaryEntry_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientHealthDiaryEntry_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientHealthDiaryEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientHealthDiaryEntry_mood(ctx context.Context, field graphql.CollectedField, obj *domain.ClientHealthDiaryEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientHealthDiaryEntry_mood(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mood, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientHealthDiaryEntry_mood(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientHealthDiaryEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientHealthDiaryEntry_note(ctx context.Context, field graphql.CollectedField, obj *domain.ClientHealthDiaryEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientHealthDiaryEntry_note(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientHealthDiaryEntry_note(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientHealthDiaryEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientHealthDiaryEntry_entryType(ctx context.Context, field graphql.CollectedField, obj *domain.ClientHealthDiaryEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientHealthDiaryEntry_entryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntryType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientHealthDiaryEntry_entryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientHealthDiaryEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientHealthDiaryEntry_shareWithHealthWorker(ctx context.Context, field graphql.CollectedField, obj *domain.ClientHealthDiaryEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientHealthDiaryEntry_shareWithHealthWorker(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShareWithHealthWorker, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientHealthDiaryEntry_shareWithHealthWorker(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientHealthDiaryEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientHealthDiaryEntry_sharedAt(ctx context.Context, field graphql.CollectedField, obj *domain.ClientHealthDiaryEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientHealthDiaryEntry_sharedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientHealthDiaryEntry_sharedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientHealthDiaryEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientHealthDiaryEntry_clientID(ctx context.Context, field graphql.CollectedField, obj *domain.ClientHealthDiaryEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientHealthDiaryEntry_clientID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientHealthDiaryEntry_clientID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientHealthDiaryEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientHealthDiaryEntry_createdAt(ctx context.Context, field graphql.CollectedField, obj *domain.ClientHealthDiaryEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientHealthDiaryEntry_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientHealthDiaryEntry_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientHealthDiaryEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientHealthDiaryEntry_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *domain.ClientHealthDiaryEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientHealthDiaryEntry_phoneNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientHealthDiaryEntry_phoneNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientHealthDiaryEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientHealthDiaryEntry_clientName(ctx context.Context, field graphql.CollectedField, obj *domain.ClientHealthDiaryEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientHealthDiaryEntry_clientName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientHealthDiaryEntry_clientName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientHealthDiaryEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientHealthDiaryQuote_author(ctx context.Context, field graphql.CollectedField, obj *domain.ClientHealthDiaryQuote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientHealthDiaryQuote_author(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Author, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientHealthDiaryQuote_author(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientHealthDiaryQuote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientHealthDiaryQuote_quote(ctx context.Context, field graphql.CollectedField, obj *domain.ClientHealthDiaryQuote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientHealthDiaryQuote_quote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientHealthDiaryQuote_quote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientHealthDiaryQuote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientProfile_id(ctx context.Context, field graphql.CollectedField, obj *domain.ClientProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientProfile_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientProfile_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientProfile_user(ctx context.Context, field graphql.CollectedField, obj *domain.ClientProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientProfile_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientProfile_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "active":
				return ec.fieldContext_User_active(ctx, field)
			case "contacts":
				return ec.fieldContext_User_contacts(ctx, field)
			case "isPhoneVerified":
				return ec.fieldContext_User_isPhoneVerified(ctx, field)
			case "termsAccepted":
				return ec.fieldContext_User_termsAccepted(ctx, field)
			case "acceptedTermsID":
				return ec.fieldContext_User_acceptedTermsID(ctx, field)
			case "suspended":
				return ec.fieldContext_User_suspended(ctx, field)
			case "dateOfBirth":
				return ec.fieldContext_User_dateOfBirth(ctx, field)
			case "currentOrganizationID":
				return ec.fieldContext_User_currentOrganizationID(ctx, field)
			case "currentProgramID":
				return ec.fieldContext_User_currentProgramID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientProfile_active(ctx context.Context, field graphql.CollectedField, obj *domain.ClientProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientProfile_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientProfile_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientProfile_clientTypes(ctx context.Context, field graphql.CollectedField, obj *domain.ClientProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientProfile_clientTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]enums.ClientType)
	fc.Result = res
	return ec.marshalOClientType2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientProfile_clientTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ClientType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientProfile_treatmentEnrollmentDate(ctx context.Context, field graphql.CollectedField, obj *domain.ClientProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientProfile_treatmentEnrollmentDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TreatmentEnrollmentDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientProfile_treatmentEnrollmentDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientProfile_fhirPatientID(ctx context.Context, field graphql.CollectedField, obj *domain.ClientProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientProfile_fhirPatientID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FHIRPatientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientProfile_fhirPatientID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientProfile_healthRecordID(ctx context.Context, field graphql.CollectedField, obj *domain.ClientProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientProfile_healthRecordID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HealthRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientProfile_healthRecordID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientProfile_treatmentBuddy(ctx context.Context, field graphql.CollectedField, obj *domain.ClientProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientProfile_treatmentBuddy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TreatmentBuddy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientProfile_treatmentBuddy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientProfile_clientCounselled(ctx context.Context, field graphql.CollectedField, obj *domain.ClientProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientProfile_clientCounselled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientCounselled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientProfile_clientCounselled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientProfile_defaultFacility(ctx context.Context, field graphql.CollectedField, obj *domain.ClientProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientProfile_defaultFacility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultFacility, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Facility)
	fc.Result = res
	return ec.marshalNFacility2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacility(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientProfile_defaultFacility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Facility_id(ctx, field)
			case "name":
				return ec.fieldContext_Facility_name(ctx, field)
			case "phone":
				return ec.fieldContext_Facility_phone(ctx, field)
			case "active":
				return ec.fieldContext_Facility_active(ctx, field)
			case "country":
				return ec.fieldContext_Facility_country(ctx, field)
			case "description":
				return ec.fieldContext_Facility_description(ctx, field)
			case "fhirOrganisationID":
				return ec.fieldContext_Facility_fhirOrganisationID(ctx, field)
			case "identifier":
				return ec.fieldContext_Facility_identifier(ctx, field)
			case "workStationDetails":
				return ec.fieldContext_Facility_workStationDetails(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Facility", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientProfile_chvUserID(ctx context.Context, field graphql.CollectedField, obj *domain.ClientProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientProfile_chvUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CHVUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientProfile_chvUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientProfile_chvUserName(ctx context.Context, field graphql.CollectedField, obj *domain.ClientProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientProfile_chvUserName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CHVUserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientProfile_chvUserName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientProfile_caregiverID(ctx context.Context, field graphql.CollectedField, obj *domain.ClientProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientProfile_caregiverID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CaregiverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientProfile_caregiverID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientProfile_cccNumber(ctx context.Context, field graphql.CollectedField, obj *domain.ClientProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientProfile_cccNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CCCNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientProfile_cccNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientRegistrationOutput_id(ctx context.Context, field graphql.CollectedField, obj *dto.ClientRegistrationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientRegistrationOutput_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientRegistrationOutput_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientRegistrationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientRegistrationOutput_active(ctx context.Context, field graphql.CollectedField, obj *dto.ClientRegistrationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientRegistrationOutput_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientRegistrationOutput_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientRegistrationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientRegistrationOutput_clientTypes(ctx context.Context, field graphql.CollectedField, obj *dto.ClientRegistrationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientRegistrationOutput_clientTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]enums.ClientType)
	fc.Result = res
	return ec.marshalOClientType2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientRegistrationOutput_clientTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientRegistrationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ClientType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientRegistrationOutput_enrollmentDate(ctx context.Context, field graphql.CollectedField, obj *dto.ClientRegistrationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientRegistrationOutput_enrollmentDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnrollmentDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientRegistrationOutput_enrollmentDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientRegistrationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientRegistrationOutput_fhirPatientID(ctx context.Context, field graphql.CollectedField, obj *dto.ClientRegistrationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientRegistrationOutput_fhirPatientID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FHIRPatientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientRegistrationOutput_fhirPatientID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientRegistrationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientRegistrationOutput_emrHealthRecordID(ctx context.Context, field graphql.CollectedField, obj *dto.ClientRegistrationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientRegistrationOutput_emrHealthRecordID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EMRHealthRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientRegistrationOutput_emrHealthRecordID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientRegistrationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientRegistrationOutput_treatmentBuddy(ctx context.Context, field graphql.CollectedField, obj *dto.ClientRegistrationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientRegistrationOutput_treatmentBuddy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TreatmentBuddy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientRegistrationOutput_treatmentBuddy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientRegistrationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientRegistrationOutput_counselled(ctx context.Context, field graphql.CollectedField, obj *dto.ClientRegistrationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientRegistrationOutput_counselled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Counselled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientRegistrationOutput_counselled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientRegistrationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientRegistrationOutput_organisation(ctx context.Context, field graphql.CollectedField, obj *dto.ClientRegistrationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientRegistrationOutput_organisation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organisation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientRegistrationOutput_organisation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientRegistrationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientRegistrationOutput_userID(ctx context.Context, field graphql.CollectedField, obj *dto.ClientRegistrationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientRegistrationOutput_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientRegistrationOutput_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientRegistrationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientRegistrationOutput_currentFacilityID(ctx context.Context, field graphql.CollectedField, obj *dto.ClientRegistrationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientRegistrationOutput_currentFacilityID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentFacilityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientRegistrationOutput_currentFacilityID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientRegistrationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientRegistrationOutput_chv(ctx context.Context, field graphql.CollectedField, obj *dto.ClientRegistrationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientRegistrationOutput_chv(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CHV, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientRegistrationOutput_chv(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientRegistrationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientRegistrationOutput_caregiver(ctx context.Context, field graphql.CollectedField, obj *dto.ClientRegistrationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientRegistrationOutput_caregiver(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Caregiver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientRegistrationOutput_caregiver(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientRegistrationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientResponse_clientProfile(ctx context.Context, field graphql.CollectedField, obj *domain.ClientResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientResponse_clientProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientProfile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.ClientProfile)
	fc.Result = res
	return ec.marshalNClientProfile2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientResponse_clientProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ClientProfile_id(ctx, field)
			case "user":
				return ec.fieldContext_ClientProfile_user(ctx, field)
			case "active":
				return ec.fieldContext_ClientProfile_active(ctx, field)
			case "clientTypes":
				return ec.fieldContext_ClientProfile_clientTypes(ctx, field)
			case "treatmentEnrollmentDate":
				return ec.fieldContext_ClientProfile_treatmentEnrollmentDate(ctx, field)
			case "fhirPatientID":
				return ec.fieldContext_ClientProfile_fhirPatientID(ctx, field)
			case "healthRecordID":
				return ec.fieldContext_ClientProfile_healthRecordID(ctx, field)
			case "treatmentBuddy":
				return ec.fieldContext_ClientProfile_treatmentBuddy(ctx, field)
			case "clientCounselled":
				return ec.fieldContext_ClientProfile_clientCounselled(ctx, field)
			case "defaultFacility":
				return ec.fieldContext_ClientProfile_defaultFacility(ctx, field)
			case "chvUserID":
				return ec.fieldContext_ClientProfile_chvUserID(ctx, field)
			case "chvUserName":
				return ec.fieldContext_ClientProfile_chvUserName(ctx, field)
			case "caregiverID":
				return ec.fieldContext_ClientProfile_caregiverID(ctx, field)
			case "cccNumber":
				return ec.fieldContext_ClientProfile_cccNumber(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClientProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientResponse_roles(ctx context.Context, field graphql.CollectedField, obj *domain.ClientResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientResponse_roles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.AuthorityRole)
	fc.Result = res
	return ec.marshalOAuthorityRole2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAuthorityRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientResponse_roles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "authorityRoleID":
				return ec.fieldContext_AuthorityRole_authorityRoleID(ctx, field)
			case "name":
				return ec.fieldContext_AuthorityRole_name(ctx, field)
			case "active":
				return ec.fieldContext_AuthorityRole_active(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthorityRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientResponse_permissions(ctx context.Context, field graphql.CollectedField, obj *domain.ClientResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientResponse_permissions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Permissions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.AuthorityPermission)
	fc.Result = res
	return ec.marshalOAuthorityPermission2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAuthorityPermissionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientResponse_permissions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "permissionID":
				return ec.fieldContext_AuthorityPermission_permissionID(ctx, field)
			case "active":
				return ec.fieldContext_AuthorityPermission_active(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthorityPermission", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ClientResponse_communityToken(ctx context.Context, field graphql.CollectedField, obj *domain.ClientResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ClientResponse_communityToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunityToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ClientResponse_communityToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ClientResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Community_id(ctx context.Context, field graphql.CollectedField, obj *domain.Community) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Community_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Community_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Community",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Community_cid(ctx context.Context, field graphql.CollectedField, obj *domain.Community) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Community_cid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Community_cid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Community",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Community_name(ctx context.Context, field graphql.CollectedField, obj *domain.Community) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Community_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Community_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Community",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Community_disabled(ctx context.Context, field graphql.CollectedField, obj *domain.Community) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Community_disabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Disabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Community_disabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Community",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Community_frozen(ctx context.Context, field graphql.CollectedField, obj *domain.Community) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Community_frozen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Frozen, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Community_frozen(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Community",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Community_memberCount(ctx context.Context, field graphql.CollectedField, obj *domain.Community) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Community_memberCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Community_memberCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Community",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Community_createdAt(ctx context.Context, field graphql.CollectedField, obj *domain.Community) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Community_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Community_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Community",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Community_updatedAt(ctx context.Context, field graphql.CollectedField, obj *domain.Community) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Community_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Community_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Community",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Community_ageRange(ctx context.Context, field graphql.CollectedField, obj *domain.Community) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Community_ageRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgeRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.AgeRange)
	fc.Result = res
	return ec.marshalOAgeRange2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAgeRange(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Community_ageRange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Community",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "lowerBound":
				return ec.fieldContext_AgeRange_lowerBound(ctx, field)
			case "upperBound":
				return ec.fieldContext_AgeRange_upperBound(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AgeRange", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Community_gender(ctx context.Context, field graphql.CollectedField, obj *domain.Community) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Community_gender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]enumutils.Gender)
	fc.Result = res
	return ec.marshalNGender2ᚕgithubᚗcomᚋsavannahghiᚋenumutilsᚐGenderᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Community_gender(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Community",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Gender does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Community_clientType(ctx context.Context, field graphql.CollectedField, obj *domain.Community) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Community_clientType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]enums.ClientType)
	fc.Result = res
	return ec.marshalOClientType2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Community_clientType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Community",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ClientType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Community_inviteOnly(ctx context.Context, field graphql.CollectedField, obj *domain.Community) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Community_inviteOnly(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InviteOnly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Community_inviteOnly(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Community",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Community_description(ctx context.Context, field graphql.CollectedField, obj *domain.Community) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Community_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Community_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Community",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Community_members(ctx context.Context, field graphql.CollectedField, obj *domain.Community) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Community_members(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Members, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.CommunityMember)
	fc.Result = res
	return ec.marshalOCommunityMember2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCommunityMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Community_members(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Community",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userID":
				return ec.fieldContext_CommunityMember_userID(ctx, field)
			case "user":
				return ec.fieldContext_CommunityMember_user(ctx, field)
			case "isModerator":
				return ec.fieldContext_CommunityMember_isModerator(ctx, field)
			case "invited":
				return ec.fieldContext_CommunityMember_invited(ctx, field)
			case "inviteAcceptedAt":
				return ec.fieldContext_CommunityMember_inviteAcceptedAt(ctx, field)
			case "inviteRejectedAt":
				return ec.fieldContext_CommunityMember_inviteRejectedAt(ctx, field)
			case "role":
				return ec.fieldContext_CommunityMember_role(ctx, field)
			case "userType":
				return ec.fieldContext_CommunityMember_userType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommunityMember", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Community_createdBy(ctx context.Context, field graphql.CollectedField, obj *domain.Community) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Community_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Member)
	fc.Result = res
	return ec.marshalOMember2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Community_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Community",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "userID":
				return ec.fieldContext_Member_userID(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "role":
				return ec.fieldContext_Member_role(ctx, field)
			case "username":
				return ec.fieldContext_Member_username(ctx, field)
			case "gender":
				return ec.fieldContext_Member_gender(ctx, field)
			case "userType":
				return ec.fieldContext_Member_userType(ctx, field)
			case "extraData":
				return ec.fieldContext_Member_extraData(ctx, field)
			case "ageUpperBound":
				return ec.fieldContext_Member_ageUpperBound(ctx, field)
			case "ageLowerBound":
				return ec.fieldContext_Member_ageLowerBound(ctx, field)
			case "clientTypes":
				return ec.fieldContext_Member_clientTypes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunityMember_userID(ctx context.Context, field graphql.CollectedField, obj *domain.CommunityMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunityMember_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunityMember_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunityMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunityMember_user(ctx context.Context, field graphql.CollectedField, obj *domain.CommunityMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunityMember_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Member)
	fc.Result = res
	return ec.marshalNMember2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunityMember_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunityMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "userID":
				return ec.fieldContext_Member_userID(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "role":
				return ec.fieldContext_Member_role(ctx, field)
			case "username":
				return ec.fieldContext_Member_username(ctx, field)
			case "gender":
				return ec.fieldContext_Member_gender(ctx, field)
			case "userType":
				return ec.fieldContext_Member_userType(ctx, field)
			case "extraData":
				return ec.fieldContext_Member_extraData(ctx, field)
			case "ageUpperBound":
				return ec.fieldContext_Member_ageUpperBound(ctx, field)
			case "ageLowerBound":
				return ec.fieldContext_Member_ageLowerBound(ctx, field)
			case "clientTypes":
				return ec.fieldContext_Member_clientTypes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunityMember_isModerator(ctx context.Context, field graphql.CollectedField, obj *domain.CommunityMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunityMember_isModerator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsModerator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunityMember_isModerator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunityMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunityMember_invited(ctx context.Context, field graphql.CollectedField, obj *domain.CommunityMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunityMember_invited(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Invited, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunityMember_invited(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunityMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunityMember_inviteAcceptedAt(ctx context.Context, field graphql.CollectedField, obj *domain.CommunityMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunityMember_inviteAcceptedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InviteAcceptedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunityMember_inviteAcceptedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunityMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunityMember_inviteRejectedAt(ctx context.Context, field graphql.CollectedField, obj *domain.CommunityMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunityMember_inviteRejectedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InviteRejectedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunityMember_inviteRejectedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunityMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunityMember_role(ctx context.Context, field graphql.CollectedField, obj *domain.CommunityMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunityMember_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunityMember_role(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunityMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunityMember_userType(ctx context.Context, field graphql.CollectedField, obj *domain.CommunityMember) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunityMember_userType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunityMember_userType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunityMember",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConsentStatus_consentStatus(ctx context.Context, field graphql.CollectedField, obj *domain.ConsentStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConsentStatus_consentStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConsentStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enums.ConsentState)
	fc.Result = res
	return ec.marshalNConsentState2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐConsentState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConsentStatus_consentStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConsentStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConsentState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_id(ctx context.Context, field graphql.CollectedField, obj *domain.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_contactType(ctx context.Context, field graphql.CollectedField, obj *domain.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_contactType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_contactType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_contactValue(ctx context.Context, field graphql.CollectedField, obj *domain.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_contactValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_contactValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_active(ctx context.Context, field graphql.CollectedField, obj *domain.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_optedIn(ctx context.Context, field graphql.CollectedField, obj *domain.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_optedIn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OptedIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_optedIn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Content_items(ctx context.Context, field graphql.CollectedField, obj *domain.Content) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Content_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]domain.ContentItem)
	fc.Result = res
	return ec.marshalNContentItem2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐContentItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Content_items(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Content",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ContentItem_id(ctx, field)
			case "title":
				return ec.fieldContext_ContentItem_title(ctx, field)
			case "date":
				return ec.fieldContext_ContentItem_date(ctx, field)
			case "meta":
				return ec.fieldContext_ContentItem_meta(ctx, field)
			case "intro":
				return ec.fieldContext_ContentItem_intro(ctx, field)
			case "authorName":
				return ec.fieldContext_ContentItem_authorName(ctx, field)
			case "itemType":
				return ec.fieldContext_ContentItem_itemType(ctx, field)
			case "timeEstimateSeconds":
				return ec.fieldContext_ContentItem_timeEstimateSeconds(ctx, field)
			case "body":
				return ec.fieldContext_ContentItem_body(ctx, field)
			case "heroImage":
				return ec.fieldContext_ContentItem_heroImage(ctx, field)
			case "heroImageRendition":
				return ec.fieldContext_ContentItem_heroImageRendition(ctx, field)
			case "likeCount":
				return ec.fieldContext_ContentItem_likeCount(ctx, field)
			case "bookmarkCount":
				return ec.fieldContext_ContentItem_bookmarkCount(ctx, field)
			case "viewCount":
				return ec.fieldContext_ContentItem_viewCount(ctx, field)
			case "tagNames":
				return ec.fieldContext_ContentItem_tagNames(ctx, field)
			case "shareCount":
				return ec.fieldContext_ContentItem_shareCount(ctx, field)
			case "documents":
				return ec.fieldContext_ContentItem_documents(ctx, field)
			case "author":
				return ec.fieldContext_ContentItem_author(ctx, field)
			case "categoryDetails":
				return ec.fieldContext_ContentItem_categoryDetails(ctx, field)
			case "featuredMedia":
				return ec.fieldContext_ContentItem_featuredMedia(ctx, field)
			case "galleryImages":
				return ec.fieldContext_ContentItem_galleryImages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContentItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Content_meta(ctx context.Context, field graphql.CollectedField, obj *domain.Content) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Content_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Meta)
	fc.Result = res
	return ec.marshalNMeta2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Content_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Content",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_Meta_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItem_id(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItem_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItem_title(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItem_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItem_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItem_date(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItem_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItem_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItem_meta(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItem_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.ContentMeta)
	fc.Result = res
	return ec.marshalNContentMeta2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐContentMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItem_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "contentType":
				return ec.fieldContext_ContentMeta_contentType(ctx, field)
			case "contentDetailURL":
				return ec.fieldContext_ContentMeta_contentDetailURL(ctx, field)
			case "contentHTMLURL":
				return ec.fieldContext_ContentMeta_contentHTMLURL(ctx, field)
			case "slug":
				return ec.fieldContext_ContentMeta_slug(ctx, field)
			case "showInMenus":
				return ec.fieldContext_ContentMeta_showInMenus(ctx, field)
			case "seoTitle":
				return ec.fieldContext_ContentMeta_seoTitle(ctx, field)
			case "searchDescription":
				return ec.fieldContext_ContentMeta_searchDescription(ctx, field)
			case "firstPublishedAt":
				return ec.fieldContext_ContentMeta_firstPublishedAt(ctx, field)
			case "locale":
				return ec.fieldContext_ContentMeta_locale(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContentMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItem_intro(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItem_intro(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Intro, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItem_intro(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItem_authorName(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItem_authorName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItem_authorName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItem_itemType(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItem_itemType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItem_itemType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItem_timeEstimateSeconds(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItem_timeEstimateSeconds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeEstimateSeconds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItem_timeEstimateSeconds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItem_body(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItem_body(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItem_body(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItem_heroImage(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItem_heroImage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HeroImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.HeroImage)
	fc.Result = res
	return ec.marshalOHeroImage2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐHeroImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItem_heroImage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HeroImage_id(ctx, field)
			case "meta":
				return ec.fieldContext_HeroImage_meta(ctx, field)
			case "title":
				return ec.fieldContext_HeroImage_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HeroImage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItem_heroImageRendition(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItem_heroImageRendition(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HeroImageRendition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.HeroImageRendition)
	fc.Result = res
	return ec.marshalOHeroImageRendition2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐHeroImageRendition(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItem_heroImageRendition(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_HeroImageRendition_url(ctx, field)
			case "width":
				return ec.fieldContext_HeroImageRendition_width(ctx, field)
			case "height":
				return ec.fieldContext_HeroImageRendition_height(ctx, field)
			case "alt":
				return ec.fieldContext_HeroImageRendition_alt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HeroImageRendition", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItem_likeCount(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItem_likeCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LikeCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItem_likeCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItem_bookmarkCount(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItem_bookmarkCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BookmarkCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItem_bookmarkCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItem_viewCount(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItem_viewCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViewCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItem_viewCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItem_tagNames(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItem_tagNames(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TagNames, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItem_tagNames(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItem_shareCount(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItem_shareCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShareCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItem_shareCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItem_documents(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItem_documents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Documents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.Document)
	fc.Result = res
	return ec.marshalODocument2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐDocument(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItem_documents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "document":
				return ec.fieldContext_Document_document(ctx, field)
			case "meta":
				return ec.fieldContext_Document_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItem_author(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItem_author(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Author, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Author)
	fc.Result = res
	return ec.marshalNAuthor2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAuthor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItem_author(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Author_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Author", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItem_categoryDetails(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItem_categoryDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.CategoryDetail)
	fc.Result = res
	return ec.marshalOCategoryDetail2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCategoryDetail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItem_categoryDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CategoryDetail_id(ctx, field)
			case "categoryName":
				return ec.fieldContext_CategoryDetail_categoryName(ctx, field)
			case "categoryIcon":
				return ec.fieldContext_CategoryDetail_categoryIcon(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CategoryDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItem_featuredMedia(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItem_featuredMedia(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeaturedMedia, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.FeaturedMedia)
	fc.Result = res
	return ec.marshalOFeaturedMedia2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFeaturedMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItem_featuredMedia(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FeaturedMedia_id(ctx, field)
			case "url":
				return ec.fieldContext_FeaturedMedia_url(ctx, field)
			case "title":
				return ec.fieldContext_FeaturedMedia_title(ctx, field)
			case "type":
				return ec.fieldContext_FeaturedMedia_type(ctx, field)
			case "duration":
				return ec.fieldContext_FeaturedMedia_duration(ctx, field)
			case "width":
				return ec.fieldContext_FeaturedMedia_width(ctx, field)
			case "height":
				return ec.fieldContext_FeaturedMedia_height(ctx, field)
			case "thumbnail":
				return ec.fieldContext_FeaturedMedia_thumbnail(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FeaturedMedia", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItem_galleryImages(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItem_galleryImages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GalleryImages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.GalleryImage)
	fc.Result = res
	return ec.marshalOGalleryImage2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐGalleryImage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItem_galleryImages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GalleryImage_id(ctx, field)
			case "image":
				return ec.fieldContext_GalleryImage_image(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GalleryImage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItemCategory_id(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItemCategory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItemCategory_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItemCategory_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItemCategory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItemCategory_name(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItemCategory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItemCategory_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItemCategory_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItemCategory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentItemCategory_iconUrl(ctx context.Context, field graphql.CollectedField, obj *domain.ContentItemCategory) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentItemCategory_iconUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IconURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentItemCategory_iconUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentItemCategory",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentMeta_contentType(ctx context.Context, field graphql.CollectedField, obj *domain.ContentMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentMeta_contentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentMeta_contentType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentMeta_contentDetailURL(ctx context.Context, field graphql.CollectedField, obj *domain.ContentMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentMeta_contentDetailURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentDetailURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentMeta_contentDetailURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentMeta_contentHTMLURL(ctx context.Context, field graphql.CollectedField, obj *domain.ContentMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentMeta_contentHTMLURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentHTMLURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentMeta_contentHTMLURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentMeta_slug(ctx context.Context, field graphql.CollectedField, obj *domain.ContentMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentMeta_slug(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentMeta_slug(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentMeta_showInMenus(ctx context.Context, field graphql.CollectedField, obj *domain.ContentMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentMeta_showInMenus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShowInMenus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentMeta_showInMenus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentMeta_seoTitle(ctx context.Context, field graphql.CollectedField, obj *domain.ContentMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentMeta_seoTitle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SEOTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentMeta_seoTitle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentMeta_searchDescription(ctx context.Context, field graphql.CollectedField, obj *domain.ContentMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentMeta_searchDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SearchDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentMeta_searchDescription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentMeta_firstPublishedAt(ctx context.Context, field graphql.CollectedField, obj *domain.ContentMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentMeta_firstPublishedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstPublishedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentMeta_firstPublishedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContentMeta_locale(ctx context.Context, field graphql.CollectedField, obj *domain.ContentMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContentMeta_locale(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContentMeta_locale(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContentMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Document_id(ctx context.Context, field graphql.CollectedField, obj *domain.Document) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Document_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Document_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Document",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Document_document(ctx context.Context, field graphql.CollectedField, obj *domain.Document) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Document_document(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Document, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.DocumentData)
	fc.Result = res
	return ec.marshalNDocumentData2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐDocumentData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Document_document(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Document",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DocumentData_id(ctx, field)
			case "title":
				return ec.fieldContext_DocumentData_title(ctx, field)
			case "meta":
				return ec.fieldContext_DocumentData_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DocumentData", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Document_meta(ctx context.Context, field graphql.CollectedField, obj *domain.Document) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Document_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.DocumentMeta)
	fc.Result = res
	return ec.marshalNDocumentMeta2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐDocumentMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Document_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Document",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_DocumentMeta_type(ctx, field)
			case "documentDetailUrl":
				return ec.fieldContext_DocumentMeta_documentDetailUrl(ctx, field)
			case "documentDownloadUrl":
				return ec.fieldContext_DocumentMeta_documentDownloadUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DocumentMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DocumentData_id(ctx context.Context, field graphql.CollectedField, obj *domain.DocumentData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DocumentData_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DocumentData_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DocumentData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DocumentData_title(ctx context.Context, field graphql.CollectedField, obj *domain.DocumentData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DocumentData_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DocumentData_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DocumentData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DocumentData_meta(ctx context.Context, field graphql.CollectedField, obj *domain.DocumentData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DocumentData_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.DocumentMeta)
	fc.Result = res
	return ec.marshalNDocumentMeta2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐDocumentMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DocumentData_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DocumentData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_DocumentMeta_type(ctx, field)
			case "documentDetailUrl":
				return ec.fieldContext_DocumentMeta_documentDetailUrl(ctx, field)
			case "documentDownloadUrl":
				return ec.fieldContext_DocumentMeta_documentDownloadUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DocumentMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DocumentMeta_type(ctx context.Context, field graphql.CollectedField, obj *domain.DocumentMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DocumentMeta_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DocumentMeta_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DocumentMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DocumentMeta_documentDetailUrl(ctx context.Context, field graphql.CollectedField, obj *domain.DocumentMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DocumentMeta_documentDetailUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocumentDetailURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DocumentMeta_documentDetailUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DocumentMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DocumentMeta_documentDownloadUrl(ctx context.Context, field graphql.CollectedField, obj *domain.DocumentMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DocumentMeta_documentDownloadUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocumentDownloadURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DocumentMeta_documentDownloadUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DocumentMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Explicit_flag(ctx context.Context, field graphql.CollectedField, obj *domain.Explicit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Explicit_flag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Flag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Explicit_flag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Explicit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Explicit_block(ctx context.Context, field graphql.CollectedField, obj *domain.Explicit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Explicit_block(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Block, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Explicit_block(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Explicit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Facility_id(ctx context.Context, field graphql.CollectedField, obj *domain.Facility) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Facility_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Facility_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Facility",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Facility_name(ctx context.Context, field graphql.CollectedField, obj *domain.Facility) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Facility_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Facility_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Facility",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Facility_phone(ctx context.Context, field graphql.CollectedField, obj *domain.Facility) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Facility_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Facility_phone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Facility",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Facility_active(ctx context.Context, field graphql.CollectedField, obj *domain.Facility) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Facility_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Facility_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Facility",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Facility_country(ctx context.Context, field graphql.CollectedField, obj *domain.Facility) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Facility_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Facility_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Facility",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Facility_description(ctx context.Context, field graphql.CollectedField, obj *domain.Facility) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Facility_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Facility_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Facility",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Facility_fhirOrganisationID(ctx context.Context, field graphql.CollectedField, obj *domain.Facility) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Facility_fhirOrganisationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FHIROrganisationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Facility_fhirOrganisationID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Facility",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Facility_identifier(ctx context.Context, field graphql.CollectedField, obj *domain.Facility) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Facility_identifier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.FacilityIdentifier)
	fc.Result = res
	return ec.marshalNFacilityIdentifier2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacilityIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Facility_identifier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Facility",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FacilityIdentifier_id(ctx, field)
			case "active":
				return ec.fieldContext_FacilityIdentifier_active(ctx, field)
			case "type":
				return ec.fieldContext_FacilityIdentifier_type(ctx, field)
			case "value":
				return ec.fieldContext_FacilityIdentifier_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FacilityIdentifier", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Facility_workStationDetails(ctx context.Context, field graphql.CollectedField, obj *domain.Facility) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Facility_workStationDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkStationDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.WorkStationDetails)
	fc.Result = res
	return ec.marshalNWorkStationDetails2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐWorkStationDetails(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Facility_workStationDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Facility",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "notifications":
				return ec.fieldContext_WorkStationDetails_notifications(ctx, field)
			case "surveys":
				return ec.fieldContext_WorkStationDetails_surveys(ctx, field)
			case "articles":
				return ec.fieldContext_WorkStationDetails_articles(ctx, field)
			case "messages":
				return ec.fieldContext_WorkStationDetails_messages(ctx, field)
			case "serviceRequests":
				return ec.fieldContext_WorkStationDetails_serviceRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WorkStationDetails", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacilityIdentifier_id(ctx context.Context, field graphql.CollectedField, obj *domain.FacilityIdentifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacilityIdentifier_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacilityIdentifier_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacilityIdentifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacilityIdentifier_active(ctx context.Context, field graphql.CollectedField, obj *domain.FacilityIdentifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacilityIdentifier_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacilityIdentifier_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacilityIdentifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacilityIdentifier_type(ctx context.Context, field graphql.CollectedField, obj *domain.FacilityIdentifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacilityIdentifier_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enums.FacilityIdentifierType)
	fc.Result = res
	return ec.marshalNFacilityIdentifierType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐFacilityIdentifierType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacilityIdentifier_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacilityIdentifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FacilityIdentifierType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacilityIdentifier_value(ctx context.Context, field graphql.CollectedField, obj *domain.FacilityIdentifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacilityIdentifier_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacilityIdentifier_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacilityIdentifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacilityOutputPage_pagination(ctx context.Context, field graphql.CollectedField, obj *dto.FacilityOutputPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacilityOutputPage_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Pagination)
	fc.Result = res
	return ec.marshalNPagination2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacilityOutputPage_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacilityOutputPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_Pagination_limit(ctx, field)
			case "currentPage":
				return ec.fieldContext_Pagination_currentPage(ctx, field)
			case "count":
				return ec.fieldContext_Pagination_count(ctx, field)
			case "totalPages":
				return ec.fieldContext_Pagination_totalPages(ctx, field)
			case "nextPage":
				return ec.fieldContext_Pagination_nextPage(ctx, field)
			case "previousPage":
				return ec.fieldContext_Pagination_previousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacilityOutputPage_facilities(ctx context.Context, field graphql.CollectedField, obj *dto.FacilityOutputPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacilityOutputPage_facilities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Facilities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.Facility)
	fc.Result = res
	return ec.marshalNFacility2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacility(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacilityOutputPage_facilities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacilityOutputPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Facility_id(ctx, field)
			case "name":
				return ec.fieldContext_Facility_name(ctx, field)
			case "phone":
				return ec.fieldContext_Facility_phone(ctx, field)
			case "active":
				return ec.fieldContext_Facility_active(ctx, field)
			case "country":
				return ec.fieldContext_Facility_country(ctx, field)
			case "description":
				return ec.fieldContext_Facility_description(ctx, field)
			case "fhirOrganisationID":
				return ec.fieldContext_Facility_fhirOrganisationID(ctx, field)
			case "identifier":
				return ec.fieldContext_Facility_identifier(ctx, field)
			case "workStationDetails":
				return ec.fieldContext_Facility_workStationDetails(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Facility", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacilityPage_pagination(ctx context.Context, field graphql.CollectedField, obj *domain.FacilityPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacilityPage_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Pagination)
	fc.Result = res
	return ec.marshalNPagination2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacilityPage_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacilityPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_Pagination_limit(ctx, field)
			case "currentPage":
				return ec.fieldContext_Pagination_currentPage(ctx, field)
			case "count":
				return ec.fieldContext_Pagination_count(ctx, field)
			case "totalPages":
				return ec.fieldContext_Pagination_totalPages(ctx, field)
			case "nextPage":
				return ec.fieldContext_Pagination_nextPage(ctx, field)
			case "previousPage":
				return ec.fieldContext_Pagination_previousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacilityPage_facilities(ctx context.Context, field graphql.CollectedField, obj *domain.FacilityPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FacilityPage_facilities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Facilities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.Facility)
	fc.Result = res
	return ec.marshalNFacility2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacility(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FacilityPage_facilities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacilityPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Facility_id(ctx, field)
			case "name":
				return ec.fieldContext_Facility_name(ctx, field)
			case "phone":
				return ec.fieldContext_Facility_phone(ctx, field)
			case "active":
				return ec.fieldContext_Facility_active(ctx, field)
			case "country":
				return ec.fieldContext_Facility_country(ctx, field)
			case "description":
				return ec.fieldContext_Facility_description(ctx, field)
			case "fhirOrganisationID":
				return ec.fieldContext_Facility_fhirOrganisationID(ctx, field)
			case "identifier":
				return ec.fieldContext_Facility_identifier(ctx, field)
			case "workStationDetails":
				return ec.fieldContext_Facility_workStationDetails(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Facility", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FeaturedMedia_id(ctx context.Context, field graphql.CollectedField, obj *domain.FeaturedMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FeaturedMedia_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FeaturedMedia_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FeaturedMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FeaturedMedia_url(ctx context.Context, field graphql.CollectedField, obj *domain.FeaturedMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FeaturedMedia_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FeaturedMedia_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FeaturedMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FeaturedMedia_title(ctx context.Context, field graphql.CollectedField, obj *domain.FeaturedMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FeaturedMedia_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FeaturedMedia_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FeaturedMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FeaturedMedia_type(ctx context.Context, field graphql.CollectedField, obj *domain.FeaturedMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FeaturedMedia_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FeaturedMedia_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FeaturedMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FeaturedMedia_duration(ctx context.Context, field graphql.CollectedField, obj *domain.FeaturedMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FeaturedMedia_duration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FeaturedMedia_duration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FeaturedMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FeaturedMedia_width(ctx context.Context, field graphql.CollectedField, obj *domain.FeaturedMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FeaturedMedia_width(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FeaturedMedia_width(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FeaturedMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FeaturedMedia_height(ctx context.Context, field graphql.CollectedField, obj *domain.FeaturedMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FeaturedMedia_height(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FeaturedMedia_height(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FeaturedMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FeaturedMedia_thumbnail(ctx context.Context, field graphql.CollectedField, obj *domain.FeaturedMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FeaturedMedia_thumbnail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Thumbnail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FeaturedMedia_thumbnail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FeaturedMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FiltersParam_name(ctx context.Context, field graphql.CollectedField, obj *domain.FiltersParam) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FiltersParam_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FiltersParam_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FiltersParam",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FiltersParam_dataType(ctx context.Context, field graphql.CollectedField, obj *domain.FiltersParam) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FiltersParam_dataType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(enums.FilterSortDataType)
	fc.Result = res
	return ec.marshalOFilterSortDataType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐFilterSortDataType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FiltersParam_dataType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FiltersParam",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FilterSortDataType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FiltersParam_value(ctx context.Context, field graphql.CollectedField, obj *domain.FiltersParam) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FiltersParam_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FiltersParam_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FiltersParam",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GalleryImage_id(ctx context.Context, field graphql.CollectedField, obj *domain.GalleryImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GalleryImage_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GalleryImage_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GalleryImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GalleryImage_image(ctx context.Context, field graphql.CollectedField, obj *domain.GalleryImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GalleryImage_image(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.ImageDetail)
	fc.Result = res
	return ec.marshalNImageDetail2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐImageDetail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GalleryImage_image(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GalleryImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ImageDetail_id(ctx, field)
			case "title":
				return ec.fieldContext_ImageDetail_title(ctx, field)
			case "meta":
				return ec.fieldContext_ImageDetail_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageDetail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetstreamMessage_id(ctx context.Context, field graphql.CollectedField, obj *domain.GetstreamMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetstreamMessage_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetstreamMessage_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetstreamMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetstreamMessage_text(ctx context.Context, field graphql.CollectedField, obj *domain.GetstreamMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetstreamMessage_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetstreamMessage_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetstreamMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetstreamMessage_html(ctx context.Context, field graphql.CollectedField, obj *domain.GetstreamMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetstreamMessage_html(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HTML, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetstreamMessage_html(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetstreamMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetstreamMessage_type(ctx context.Context, field graphql.CollectedField, obj *domain.GetstreamMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetstreamMessage_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(enums.MessageType)
	fc.Result = res
	return ec.marshalOMessageType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐMessageType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetstreamMessage_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetstreamMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MessageType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetstreamMessage_silent(ctx context.Context, field graphql.CollectedField, obj *domain.GetstreamMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetstreamMessage_silent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Silent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetstreamMessage_silent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetstreamMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetstreamMessage_user(ctx context.Context, field graphql.CollectedField, obj *domain.GetstreamMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetstreamMessage_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Member)
	fc.Result = res
	return ec.marshalOMember2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetstreamMessage_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetstreamMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "userID":
				return ec.fieldContext_Member_userID(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "role":
				return ec.fieldContext_Member_role(ctx, field)
			case "username":
				return ec.fieldContext_Member_username(ctx, field)
			case "gender":
				return ec.fieldContext_Member_gender(ctx, field)
			case "userType":
				return ec.fieldContext_Member_userType(ctx, field)
			case "extraData":
				return ec.fieldContext_Member_extraData(ctx, field)
			case "ageUpperBound":
				return ec.fieldContext_Member_ageUpperBound(ctx, field)
			case "ageLowerBound":
				return ec.fieldContext_Member_ageLowerBound(ctx, field)
			case "clientTypes":
				return ec.fieldContext_Member_clientTypes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetstreamMessage_attachments(ctx context.Context, field graphql.CollectedField, obj *domain.GetstreamMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetstreamMessage_attachments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attachments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.Attachment)
	fc.Result = res
	return ec.marshalOAttachment2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetstreamMessage_attachments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetstreamMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_Attachment_type(ctx, field)
			case "author_name":
				return ec.fieldContext_Attachment_author_name(ctx, field)
			case "title":
				return ec.fieldContext_Attachment_title(ctx, field)
			case "title_link":
				return ec.fieldContext_Attachment_title_link(ctx, field)
			case "text":
				return ec.fieldContext_Attachment_text(ctx, field)
			case "image_url":
				return ec.fieldContext_Attachment_image_url(ctx, field)
			case "thumb_url":
				return ec.fieldContext_Attachment_thumb_url(ctx, field)
			case "asset_url":
				return ec.fieldContext_Attachment_asset_url(ctx, field)
			case "og_scrape_url":
				return ec.fieldContext_Attachment_og_scrape_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attachment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetstreamMessage_latest_reactions(ctx context.Context, field graphql.CollectedField, obj *domain.GetstreamMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetstreamMessage_latest_reactions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestReactions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.Reaction)
	fc.Result = res
	return ec.marshalOReaction2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐReaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetstreamMessage_latest_reactions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetstreamMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message_id":
				return ec.fieldContext_Reaction_message_id(ctx, field)
			case "user_id":
				return ec.fieldContext_Reaction_user_id(ctx, field)
			case "type":
				return ec.fieldContext_Reaction_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reaction", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetstreamMessage_own_reactions(ctx context.Context, field graphql.CollectedField, obj *domain.GetstreamMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetstreamMessage_own_reactions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnReactions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.Reaction)
	fc.Result = res
	return ec.marshalOReaction2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐReaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetstreamMessage_own_reactions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetstreamMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message_id":
				return ec.fieldContext_Reaction_message_id(ctx, field)
			case "user_id":
				return ec.fieldContext_Reaction_user_id(ctx, field)
			case "type":
				return ec.fieldContext_Reaction_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reaction", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetstreamMessage_parent_id(ctx context.Context, field graphql.CollectedField, obj *domain.GetstreamMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetstreamMessage_parent_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetstreamMessage_parent_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetstreamMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetstreamMessage_show_in_channel(ctx context.Context, field graphql.CollectedField, obj *domain.GetstreamMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetstreamMessage_show_in_channel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShowInChannel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetstreamMessage_show_in_channel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetstreamMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetstreamMessage_reply_count(ctx context.Context, field graphql.CollectedField, obj *domain.GetstreamMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetstreamMessage_reply_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReplyCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetstreamMessage_reply_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetstreamMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetstreamMessage_mentioned_users(ctx context.Context, field graphql.CollectedField, obj *domain.GetstreamMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetstreamMessage_mentioned_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MentionedUsers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.Member)
	fc.Result = res
	return ec.marshalOMember2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetstreamMessage_mentioned_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetstreamMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "userID":
				return ec.fieldContext_Member_userID(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "role":
				return ec.fieldContext_Member_role(ctx, field)
			case "username":
				return ec.fieldContext_Member_username(ctx, field)
			case "gender":
				return ec.fieldContext_Member_gender(ctx, field)
			case "userType":
				return ec.fieldContext_Member_userType(ctx, field)
			case "extraData":
				return ec.fieldContext_Member_extraData(ctx, field)
			case "ageUpperBound":
				return ec.fieldContext_Member_ageUpperBound(ctx, field)
			case "ageLowerBound":
				return ec.fieldContext_Member_ageLowerBound(ctx, field)
			case "clientTypes":
				return ec.fieldContext_Member_clientTypes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetstreamMessage_shadowed(ctx context.Context, field graphql.CollectedField, obj *domain.GetstreamMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetstreamMessage_shadowed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Shadowed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetstreamMessage_shadowed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetstreamMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetstreamMessage_pinned_at(ctx context.Context, field graphql.CollectedField, obj *domain.GetstreamMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetstreamMessage_pinned_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PinnedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetstreamMessage_pinned_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetstreamMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetstreamMessage_pinned_by(ctx context.Context, field graphql.CollectedField, obj *domain.GetstreamMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetstreamMessage_pinned_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PinnedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Member)
	fc.Result = res
	return ec.marshalOMember2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetstreamMessage_pinned_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetstreamMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "userID":
				return ec.fieldContext_Member_userID(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "role":
				return ec.fieldContext_Member_role(ctx, field)
			case "username":
				return ec.fieldContext_Member_username(ctx, field)
			case "gender":
				return ec.fieldContext_Member_gender(ctx, field)
			case "userType":
				return ec.fieldContext_Member_userType(ctx, field)
			case "extraData":
				return ec.fieldContext_Member_extraData(ctx, field)
			case "ageUpperBound":
				return ec.fieldContext_Member_ageUpperBound(ctx, field)
			case "ageLowerBound":
				return ec.fieldContext_Member_ageLowerBound(ctx, field)
			case "clientTypes":
				return ec.fieldContext_Member_clientTypes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetstreamMessage_created_at(ctx context.Context, field graphql.CollectedField, obj *domain.GetstreamMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetstreamMessage_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetstreamMessage_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetstreamMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetstreamMessage_updated_at(ctx context.Context, field graphql.CollectedField, obj *domain.GetstreamMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetstreamMessage_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetstreamMessage_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetstreamMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetstreamMessage_deleted_at(ctx context.Context, field graphql.CollectedField, obj *domain.GetstreamMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetstreamMessage_deleted_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetstreamMessage_deleted_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetstreamMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HeroImage_id(ctx context.Context, field graphql.CollectedField, obj *domain.HeroImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HeroImage_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HeroImage_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HeroImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HeroImage_meta(ctx context.Context, field graphql.CollectedField, obj *domain.HeroImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HeroImage_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.ImageMeta)
	fc.Result = res
	return ec.marshalNImageMeta2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐImageMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HeroImage_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HeroImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_ImageMeta_type(ctx, field)
			case "imageDetailUrl":
				return ec.fieldContext_ImageMeta_imageDetailUrl(ctx, field)
			case "imageDownloadUrl":
				return ec.fieldContext_ImageMeta_imageDownloadUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HeroImage_title(ctx context.Context, field graphql.CollectedField, obj *domain.HeroImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HeroImage_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HeroImage_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HeroImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HeroImageRendition_url(ctx context.Context, field graphql.CollectedField, obj *domain.HeroImageRendition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HeroImageRendition_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HeroImageRendition_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HeroImageRendition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HeroImageRendition_width(ctx context.Context, field graphql.CollectedField, obj *domain.HeroImageRendition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HeroImageRendition_width(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HeroImageRendition_width(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HeroImageRendition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HeroImageRendition_height(ctx context.Context, field graphql.CollectedField, obj *domain.HeroImageRendition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HeroImageRendition_height(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HeroImageRendition_height(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HeroImageRendition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HeroImageRendition_alt(ctx context.Context, field graphql.CollectedField, obj *domain.HeroImageRendition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HeroImageRendition_alt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HeroImageRendition_alt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HeroImageRendition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageDetail_id(ctx context.Context, field graphql.CollectedField, obj *domain.ImageDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageDetail_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageDetail_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageDetail_title(ctx context.Context, field graphql.CollectedField, obj *domain.ImageDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageDetail_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageDetail_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageDetail_meta(ctx context.Context, field graphql.CollectedField, obj *domain.ImageDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageDetail_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.ImageMeta)
	fc.Result = res
	return ec.marshalNImageMeta2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐImageMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageDetail_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_ImageMeta_type(ctx, field)
			case "imageDetailUrl":
				return ec.fieldContext_ImageMeta_imageDetailUrl(ctx, field)
			case "imageDownloadUrl":
				return ec.fieldContext_ImageMeta_imageDownloadUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageMeta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMeta_type(ctx context.Context, field graphql.CollectedField, obj *domain.ImageMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMeta_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMeta_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMeta_imageDetailUrl(ctx context.Context, field graphql.CollectedField, obj *domain.ImageMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMeta_imageDetailUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageDetailURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMeta_imageDetailUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageMeta_imageDownloadUrl(ctx context.Context, field graphql.CollectedField, obj *domain.ImageMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageMeta_imageDownloadUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageDownloadURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageMeta_imageDownloadUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageMeta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ManagedClient_clientProfile(ctx context.Context, field graphql.CollectedField, obj *domain.ManagedClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ManagedClient_clientProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientProfile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.ClientProfile)
	fc.Result = res
	return ec.marshalOClientProfile2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ManagedClient_clientProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ManagedClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ClientProfile_id(ctx, field)
			case "user":
				return ec.fieldContext_ClientProfile_user(ctx, field)
			case "active":
				return ec.fieldContext_ClientProfile_active(ctx, field)
			case "clientTypes":
				return ec.fieldContext_ClientProfile_clientTypes(ctx, field)
			case "treatmentEnrollmentDate":
				return ec.fieldContext_ClientProfile_treatmentEnrollmentDate(ctx, field)
			case "fhirPatientID":
				return ec.fieldContext_ClientProfile_fhirPatientID(ctx, field)
			case "healthRecordID":
				return ec.fieldContext_ClientProfile_healthRecordID(ctx, field)
			case "treatmentBuddy":
				return ec.fieldContext_ClientProfile_treatmentBuddy(ctx, field)
			case "clientCounselled":
				return ec.fieldContext_ClientProfile_clientCounselled(ctx, field)
			case "defaultFacility":
				return ec.fieldContext_ClientProfile_defaultFacility(ctx, field)
			case "chvUserID":
				return ec.fieldContext_ClientProfile_chvUserID(ctx, field)
			case "chvUserName":
				return ec.fieldContext_ClientProfile_chvUserName(ctx, field)
			case "caregiverID":
				return ec.fieldContext_ClientProfile_caregiverID(ctx, field)
			case "cccNumber":
				return ec.fieldContext_ClientProfile_cccNumber(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClientProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ManagedClient_caregiverConsent(ctx context.Context, field graphql.CollectedField, obj *domain.ManagedClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ManagedClient_caregiverConsent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CaregiverConsent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(enums.ConsentState)
	fc.Result = res
	return ec.marshalOConsentState2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐConsentState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ManagedClient_caregiverConsent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ManagedClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConsentState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ManagedClient_clientConsent(ctx context.Context, field graphql.CollectedField, obj *domain.ManagedClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ManagedClient_clientConsent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientConsent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(enums.ConsentState)
	fc.Result = res
	return ec.marshalOConsentState2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐConsentState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ManagedClient_clientConsent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ManagedClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConsentState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ManagedClient_workStationDetails(ctx context.Context, field graphql.CollectedField, obj *domain.ManagedClient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ManagedClient_workStationDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkStationDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.WorkStationDetails)
	fc.Result = res
	return ec.marshalOWorkStationDetails2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐWorkStationDetails(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ManagedClient_workStationDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ManagedClient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "notifications":
				return ec.fieldContext_WorkStationDetails_notifications(ctx, field)
			case "surveys":
				return ec.fieldContext_WorkStationDetails_surveys(ctx, field)
			case "articles":
				return ec.fieldContext_WorkStationDetails_articles(ctx, field)
			case "messages":
				return ec.fieldContext_WorkStationDetails_messages(ctx, field)
			case "serviceRequests":
				return ec.fieldContext_WorkStationDetails_serviceRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WorkStationDetails", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ManagedClientOutputPage_pagination(ctx context.Context, field graphql.CollectedField, obj *dto.ManagedClientOutputPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ManagedClientOutputPage_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Pagination)
	fc.Result = res
	return ec.marshalOPagination2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ManagedClientOutputPage_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ManagedClientOutputPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_Pagination_limit(ctx, field)
			case "currentPage":
				return ec.fieldContext_Pagination_currentPage(ctx, field)
			case "count":
				return ec.fieldContext_Pagination_count(ctx, field)
			case "totalPages":
				return ec.fieldContext_Pagination_totalPages(ctx, field)
			case "nextPage":
				return ec.fieldContext_Pagination_nextPage(ctx, field)
			case "previousPage":
				return ec.fieldContext_Pagination_previousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ManagedClientOutputPage_managedClients(ctx context.Context, field graphql.CollectedField, obj *dto.ManagedClientOutputPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ManagedClientOutputPage_managedClients(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManagedClients, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.ManagedClient)
	fc.Result = res
	return ec.marshalNManagedClient2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐManagedClient(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ManagedClientOutputPage_managedClients(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ManagedClientOutputPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientProfile":
				return ec.fieldContext_ManagedClient_clientProfile(ctx, field)
			case "caregiverConsent":
				return ec.fieldContext_ManagedClient_caregiverConsent(ctx, field)
			case "clientConsent":
				return ec.fieldContext_ManagedClient_clientConsent(ctx, field)
			case "workStationDetails":
				return ec.fieldContext_ManagedClient_workStationDetails(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ManagedClient", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_id(ctx context.Context, field graphql.CollectedField, obj *domain.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_userID(ctx context.Context, field graphql.CollectedField, obj *domain.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_name(ctx context.Context, field graphql.CollectedField, obj *domain.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_role(ctx context.Context, field graphql.CollectedField, obj *domain.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_role(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_username(ctx context.Context, field graphql.CollectedField, obj *domain.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_username(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_gender(ctx context.Context, field graphql.CollectedField, obj *domain.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_gender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enumutils.Gender)
	fc.Result = res
	return ec.marshalNGender2githubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_gender(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Gender does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_userType(ctx context.Context, field graphql.CollectedField, obj *domain.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_userType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_userType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_extraData(ctx context.Context, field graphql.CollectedField, obj *domain.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_extraData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExtraData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_extraData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_ageUpperBound(ctx context.Context, field graphql.CollectedField, obj *domain.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_ageUpperBound(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgeUpperBound, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_ageUpperBound(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_ageLowerBound(ctx context.Context, field graphql.CollectedField, obj *domain.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_ageLowerBound(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgeLowerBound, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_ageLowerBound(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_clientTypes(ctx context.Context, field graphql.CollectedField, obj *domain.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_clientTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_clientTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageFlag_user(ctx context.Context, field graphql.CollectedField, obj *domain.MessageFlag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageFlag_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Member)
	fc.Result = res
	return ec.marshalOMember2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageFlag_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageFlag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "userID":
				return ec.fieldContext_Member_userID(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "role":
				return ec.fieldContext_Member_role(ctx, field)
			case "username":
				return ec.fieldContext_Member_username(ctx, field)
			case "gender":
				return ec.fieldContext_Member_gender(ctx, field)
			case "userType":
				return ec.fieldContext_Member_userType(ctx, field)
			case "extraData":
				return ec.fieldContext_Member_extraData(ctx, field)
			case "ageUpperBound":
				return ec.fieldContext_Member_ageUpperBound(ctx, field)
			case "ageLowerBound":
				return ec.fieldContext_Member_ageLowerBound(ctx, field)
			case "clientTypes":
				return ec.fieldContext_Member_clientTypes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageFlag_message(ctx context.Context, field graphql.CollectedField, obj *domain.MessageFlag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageFlag_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.GetstreamMessage)
	fc.Result = res
	return ec.marshalOGetstreamMessage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐGetstreamMessage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageFlag_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageFlag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GetstreamMessage_id(ctx, field)
			case "text":
				return ec.fieldContext_GetstreamMessage_text(ctx, field)
			case "html":
				return ec.fieldContext_GetstreamMessage_html(ctx, field)
			case "type":
				return ec.fieldContext_GetstreamMessage_type(ctx, field)
			case "silent":
				return ec.fieldContext_GetstreamMessage_silent(ctx, field)
			case "user":
				return ec.fieldContext_GetstreamMessage_user(ctx, field)
			case "attachments":
				return ec.fieldContext_GetstreamMessage_attachments(ctx, field)
			case "latest_reactions":
				return ec.fieldContext_GetstreamMessage_latest_reactions(ctx, field)
			case "own_reactions":
				return ec.fieldContext_GetstreamMessage_own_reactions(ctx, field)
			case "parent_id":
				return ec.fieldContext_GetstreamMessage_parent_id(ctx, field)
			case "show_in_channel":
				return ec.fieldContext_GetstreamMessage_show_in_channel(ctx, field)
			case "reply_count":
				return ec.fieldContext_GetstreamMessage_reply_count(ctx, field)
			case "mentioned_users":
				return ec.fieldContext_GetstreamMessage_mentioned_users(ctx, field)
			case "shadowed":
				return ec.fieldContext_GetstreamMessage_shadowed(ctx, field)
			case "pinned_at":
				return ec.fieldContext_GetstreamMessage_pinned_at(ctx, field)
			case "pinned_by":
				return ec.fieldContext_GetstreamMessage_pinned_by(ctx, field)
			case "created_at":
				return ec.fieldContext_GetstreamMessage_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_GetstreamMessage_updated_at(ctx, field)
			case "deleted_at":
				return ec.fieldContext_GetstreamMessage_deleted_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetstreamMessage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meta_totalCount(ctx context.Context, field graphql.CollectedField, obj *domain.Meta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meta_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meta_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModerationResult_message_id(ctx context.Context, field graphql.CollectedField, obj *domain.ModerationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModerationResult_message_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModerationResult_message_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModerationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModerationResult_action(ctx context.Context, field graphql.CollectedField, obj *domain.ModerationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModerationResult_action(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Action, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModerationResult_action(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModerationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModerationResult_moderated_by(ctx context.Context, field graphql.CollectedField, obj *domain.ModerationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModerationResult_moderated_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModeratedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModerationResult_moderated_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModerationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModerationResult_blocked_word(ctx context.Context, field graphql.CollectedField, obj *domain.ModerationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModerationResult_blocked_word(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlockedWord, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModerationResult_blocked_word(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModerationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModerationResult_blocklist_name(ctx context.Context, field graphql.CollectedField, obj *domain.ModerationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModerationResult_blocklist_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlocklistName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModerationResult_blocklist_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModerationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModerationResult_moderation_thresholds(ctx context.Context, field graphql.CollectedField, obj *domain.ModerationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModerationResult_moderation_thresholds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModerationThresholds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.ModerationThresholds)
	fc.Result = res
	return ec.marshalOModerationThresholds2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐModerationThresholds(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModerationResult_moderation_thresholds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModerationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "explicit":
				return ec.fieldContext_ModerationThresholds_explicit(ctx, field)
			case "spam":
				return ec.fieldContext_ModerationThresholds_spam(ctx, field)
			case "toxic":
				return ec.fieldContext_ModerationThresholds_toxic(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModerationThresholds", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModerationResult_AI_moderation_response(ctx context.Context, field graphql.CollectedField, obj *domain.ModerationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModerationResult_AI_moderation_response(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AiModerationResponse, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.AIModerationResponse)
	fc.Result = res
	return ec.marshalOAIModerationResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAIModerationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModerationResult_AI_moderation_response(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModerationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "toxic":
				return ec.fieldContext_AIModerationResponse_toxic(ctx, field)
			case "explicit":
				return ec.fieldContext_AIModerationResponse_explicit(ctx, field)
			case "spam":
				return ec.fieldContext_AIModerationResponse_spam(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AIModerationResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModerationResult_user_karma(ctx context.Context, field graphql.CollectedField, obj *domain.ModerationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModerationResult_user_karma(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserKarma, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModerationResult_user_karma(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModerationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModerationResult_user_bad_karma(ctx context.Context, field graphql.CollectedField, obj *domain.ModerationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModerationResult_user_bad_karma(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserBadKarma, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModerationResult_user_bad_karma(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModerationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModerationResult_created_at(ctx context.Context, field graphql.CollectedField, obj *domain.ModerationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModerationResult_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModerationResult_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModerationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModerationResult_updated_at(ctx context.Context, field graphql.CollectedField, obj *domain.ModerationResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModerationResult_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModerationResult_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModerationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModerationThresholds_explicit(ctx context.Context, field graphql.CollectedField, obj *domain.ModerationThresholds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModerationThresholds_explicit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Explicit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Explicit)
	fc.Result = res
	return ec.marshalOExplicit2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐExplicit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModerationThresholds_explicit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModerationThresholds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "flag":
				return ec.fieldContext_Explicit_flag(ctx, field)
			case "block":
				return ec.fieldContext_Explicit_block(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Explicit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModerationThresholds_spam(ctx context.Context, field graphql.CollectedField, obj *domain.ModerationThresholds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModerationThresholds_spam(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spam, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Spam)
	fc.Result = res
	return ec.marshalOSpam2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSpam(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModerationThresholds_spam(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModerationThresholds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "flag":
				return ec.fieldContext_Spam_flag(ctx, field)
			case "block":
				return ec.fieldContext_Spam_block(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Spam", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModerationThresholds_toxic(ctx context.Context, field graphql.CollectedField, obj *domain.ModerationThresholds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModerationThresholds_toxic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Toxic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Toxic)
	fc.Result = res
	return ec.marshalOToxic2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐToxic(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModerationThresholds_toxic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModerationThresholds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "flag":
				return ec.fieldContext_Toxic_flag(ctx, field)
			case "block":
				return ec.fieldContext_Toxic_block(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Toxic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rescheduleAppointment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rescheduleAppointment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RescheduleAppointment(rctx, fc.Args["appointmentID"].(string), fc.Args["date"].(scalarutils.Date))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rescheduleAppointment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rescheduleAppointment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_assignOrRevokeRoles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_assignOrRevokeRoles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AssignOrRevokeRoles(rctx, fc.Args["userID"].(string), fc.Args["roles"].([]*enums.UserRoleType))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_assignOrRevokeRoles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_assignOrRevokeRoles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCommunity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCommunity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCommunity(rctx, fc.Args["input"].(dto.CommunityInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Community)
	fc.Result = res
	return ec.marshalNCommunity2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCommunity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCommunity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Community_id(ctx, field)
			case "cid":
				return ec.fieldContext_Community_cid(ctx, field)
			case "name":
				return ec.fieldContext_Community_name(ctx, field)
			case "disabled":
				return ec.fieldContext_Community_disabled(ctx, field)
			case "frozen":
				return ec.fieldContext_Community_frozen(ctx, field)
			case "memberCount":
				return ec.fieldContext_Community_memberCount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Community_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Community_updatedAt(ctx, field)
			case "ageRange":
				return ec.fieldContext_Community_ageRange(ctx, field)
			case "gender":
				return ec.fieldContext_Community_gender(ctx, field)
			case "clientType":
				return ec.fieldContext_Community_clientType(ctx, field)
			case "inviteOnly":
				return ec.fieldContext_Community_inviteOnly(ctx, field)
			case "description":
				return ec.fieldContext_Community_description(ctx, field)
			case "members":
				return ec.fieldContext_Community_members(ctx, field)
			case "createdBy":
				return ec.fieldContext_Community_createdBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Community", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCommunity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteCommunities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteCommunities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCommunities(rctx, fc.Args["communityIDs"].([]string), fc.Args["hardDelete"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteCommunities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteCommunities_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rejectInvitation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rejectInvitation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RejectInvitation(rctx, fc.Args["memberID"].(string), fc.Args["communityID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rejectInvitation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rejectInvitation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_acceptInvitation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_acceptInvitation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AcceptInvitation(rctx, fc.Args["memberID"].(string), fc.Args["communityID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_acceptInvitation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_acceptInvitation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addMembersToCommunity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addMembersToCommunity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddMembersToCommunity(rctx, fc.Args["memberIDs"].([]string), fc.Args["communityID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addMembersToCommunity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addMembersToCommunity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeMembersFromCommunity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_removeMembersFromCommunity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveMembersFromCommunity(rctx, fc.Args["communityID"].(string), fc.Args["memberIDs"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_removeMembersFromCommunity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeMembersFromCommunity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addModerators(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addModerators(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddModerators(rctx, fc.Args["memberIDs"].([]string), fc.Args["communityID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addModerators(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addModerators_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_demoteModerators(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_demoteModerators(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DemoteModerators(rctx, fc.Args["communityID"].(string), fc.Args["memberIDs"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_demoteModerators(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_demoteModerators_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_banUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_banUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BanUser(rctx, fc.Args["memberID"].(string), fc.Args["bannedBy"].(string), fc.Args["communityID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_banUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_banUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_unBanUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_unBanUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UnBanUser(rctx, fc.Args["memberID"].(string), fc.Args["communityID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_unBanUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_unBanUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteCommunityMessage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteCommunityMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCommunityMessage(rctx, fc.Args["messageID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteCommunityMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteCommunityMessage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_shareContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_shareContent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ShareContent(rctx, fc.Args["input"].(dto.ShareContentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_shareContent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_shareContent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bookmarkContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bookmarkContent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BookmarkContent(rctx, fc.Args["clientID"].(string), fc.Args["contentItemID"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bookmarkContent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bookmarkContent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_unBookmarkContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_unBookmarkContent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UnBookmarkContent(rctx, fc.Args["clientID"].(string), fc.Args["contentItemID"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_unBookmarkContent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_unBookmarkContent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_likeContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_likeContent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().LikeContent(rctx, fc.Args["clientID"].(string), fc.Args["contentID"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_likeContent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_likeContent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_unlikeContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_unlikeContent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UnlikeContent(rctx, fc.Args["clientID"].(string), fc.Args["contentID"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_unlikeContent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_unlikeContent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_viewContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_viewContent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ViewContent(rctx, fc.Args["clientID"].(string), fc.Args["contentID"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_viewContent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_viewContent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteFacility(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteFacility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteFacility(rctx, fc.Args["identifier"].(dto.FacilityIdentifierInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteFacility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteFacility_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_reactivateFacility(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_reactivateFacility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReactivateFacility(rctx, fc.Args["identifier"].(dto.FacilityIdentifierInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_reactivateFacility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_reactivateFacility_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_inactivateFacility(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_inactivateFacility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InactivateFacility(rctx, fc.Args["identifier"].(dto.FacilityIdentifierInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_inactivateFacility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_inactivateFacility_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addFacilityContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addFacilityContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddFacilityContact(rctx, fc.Args["facilityID"].(string), fc.Args["contact"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addFacilityContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addFacilityContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addFacilityToProgram(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addFacilityToProgram(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddFacilityToProgram(rctx, fc.Args["facilityIDs"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addFacilityToProgram(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addFacilityToProgram_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_sendFeedback(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_sendFeedback(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SendFeedback(rctx, fc.Args["input"].(dto.FeedbackResponseInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_sendFeedback(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_sendFeedback_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createHealthDiaryEntry(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createHealthDiaryEntry(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateHealthDiaryEntry(rctx, fc.Args["clientID"].(string), fc.Args["note"].(*string), fc.Args["mood"].(string), fc.Args["reportToStaff"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createHealthDiaryEntry(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createHealthDiaryEntry_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_shareHealthDiaryEntry(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_shareHealthDiaryEntry(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ShareHealthDiaryEntry(rctx, fc.Args["healthDiaryEntryID"].(string), fc.Args["shareEntireHealthDiary"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_shareHealthDiaryEntry(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_shareHealthDiaryEntry_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_collectMetric(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_collectMetric(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CollectMetric(rctx, fc.Args["input"].(domain.Metric))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_collectMetric(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_collectMetric_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_sendFCMNotification(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_sendFCMNotification(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SendFCMNotification(rctx, fc.Args["registrationTokens"].([]string), fc.Args["data"].(map[string]interface{}), fc.Args["notification"].(firebasetools.FirebaseSimpleNotificationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_sendFCMNotification(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_sendFCMNotification_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_readNotifications(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_readNotifications(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReadNotifications(rctx, fc.Args["ids"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_readNotifications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_readNotifications_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createOrganisation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createOrganisation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateOrganisation(rctx, fc.Args["input"].(dto.OrganisationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createOrganisation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createOrganisation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteOrganisation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteOrganisation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteOrganisation(rctx, fc.Args["organisationID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteOrganisation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteOrganisation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createProgram(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createProgram(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProgram(rctx, fc.Args["input"].(dto.ProgramInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createProgram(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createProgram_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setStaffProgram(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setStaffProgram(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetStaffProgram(rctx, fc.Args["programID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.StaffResponse)
	fc.Result = res
	return ec.marshalNStaffResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐStaffResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setStaffProgram(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "staffProfile":
				return ec.fieldContext_StaffResponse_staffProfile(ctx, field)
			case "roles":
				return ec.fieldContext_StaffResponse_roles(ctx, field)
			case "permissions":
				return ec.fieldContext_StaffResponse_permissions(ctx, field)
			case "communityToken":
				return ec.fieldContext_StaffResponse_communityToken(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StaffResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setStaffProgram_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setClientProgram(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setClientProgram(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetClientProgram(rctx, fc.Args["programID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.ClientResponse)
	fc.Result = res
	return ec.marshalNClientResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setClientProgram(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientProfile":
				return ec.fieldContext_ClientResponse_clientProfile(ctx, field)
			case "roles":
				return ec.fieldContext_ClientResponse_roles(ctx, field)
			case "permissions":
				return ec.fieldContext_ClientResponse_permissions(ctx, field)
			case "communityToken":
				return ec.fieldContext_ClientResponse_communityToken(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClientResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setClientProgram_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createScreeningTool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createScreeningTool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateScreeningTool(rctx, fc.Args["input"].(dto.ScreeningToolInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createScreeningTool(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createScreeningTool_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_respondToScreeningTool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_respondToScreeningTool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RespondToScreeningTool(rctx, fc.Args["input"].(dto.QuestionnaireScreeningToolResponseInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_respondToScreeningTool(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_respondToScreeningTool_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_answerScreeningToolQuestion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_answerScreeningToolQuestion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AnswerScreeningToolQuestion(rctx, fc.Args["screeningToolResponses"].([]*dto.ScreeningToolQuestionResponseInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_answerScreeningToolQuestion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_answerScreeningToolQuestion_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordSecurityQuestionResponses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordSecurityQuestionResponses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordSecurityQuestionResponses(rctx, fc.Args["input"].([]*dto.SecurityQuestionResponseInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.RecordSecurityQuestionResponse)
	fc.Result = res
	return ec.marshalNRecordSecurityQuestionResponse2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐRecordSecurityQuestionResponseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordSecurityQuestionResponses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "securityQuestionID":
				return ec.fieldContext_RecordSecurityQuestionResponse_securityQuestionID(ctx, field)
			case "isCorrect":
				return ec.fieldContext_RecordSecurityQuestionResponse_isCorrect(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RecordSecurityQuestionResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordSecurityQuestionResponses_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setInProgressBy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setInProgressBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetInProgressBy(rctx, fc.Args["serviceRequestID"].(string), fc.Args["staffID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setInProgressBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setInProgressBy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createServiceRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createServiceRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateServiceRequest(rctx, fc.Args["input"].(dto.ServiceRequestInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createServiceRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createServiceRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_resolveServiceRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_resolveServiceRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ResolveServiceRequest(rctx, fc.Args["staffID"].(string), fc.Args["requestID"].(string), fc.Args["action"].([]string), fc.Args["comment"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_resolveServiceRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_resolveServiceRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_verifyClientPinResetServiceRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_verifyClientPinResetServiceRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().VerifyClientPinResetServiceRequest(rctx, fc.Args["clientID"].(string), fc.Args["serviceRequestID"].(string), fc.Args["cccNumber"].(string), fc.Args["phoneNumber"].(string), fc.Args["physicalIdentityVerified"].(bool), fc.Args["state"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_verifyClientPinResetServiceRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_verifyClientPinResetServiceRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_verifyStaffPinResetServiceRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_verifyStaffPinResetServiceRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().VerifyStaffPinResetServiceRequest(rctx, fc.Args["phoneNumber"].(string), fc.Args["serviceRequestID"].(string), fc.Args["verificationStatus"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_verifyStaffPinResetServiceRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_verifyStaffPinResetServiceRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_sendClientSurveyLinks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_sendClientSurveyLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SendClientSurveyLinks(rctx, fc.Args["facilityID"].(string), fc.Args["formID"].(string), fc.Args["projectID"].(int), fc.Args["filterParams"].(*dto.ClientFilterParamsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_sendClientSurveyLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_sendClientSurveyLinks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_verifySurveySubmission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_verifySurveySubmission(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().VerifySurveySubmission(rctx, fc.Args["input"].(dto.VerifySurveySubmissionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_verifySurveySubmission(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_verifySurveySubmission_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_acceptTerms(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_acceptTerms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AcceptTerms(rctx, fc.Args["userID"].(string), fc.Args["termsID"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_acceptTerms(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_acceptTerms_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setNickName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setNickName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetNickName(rctx, fc.Args["userID"].(string), fc.Args["nickname"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setNickName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setNickName_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_completeOnboardingTour(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_completeOnboardingTour(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CompleteOnboardingTour(rctx, fc.Args["userID"].(string), fc.Args["flavour"].(feedlib.Flavour))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_completeOnboardingTour(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_completeOnboardingTour_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerClient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerClient(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RegisterClient(rctx, fc.Args["input"].(*dto.ClientRegistrationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.ClientRegistrationOutput)
	fc.Result = res
	return ec.marshalNClientRegistrationOutput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐClientRegistrationOutput(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerClient(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ClientRegistrationOutput_id(ctx, field)
			case "active":
				return ec.fieldContext_ClientRegistrationOutput_active(ctx, field)
			case "clientTypes":
				return ec.fieldContext_ClientRegistrationOutput_clientTypes(ctx, field)
			case "enrollmentDate":
				return ec.fieldContext_ClientRegistrationOutput_enrollmentDate(ctx, field)
			case "fhirPatientID":
				return ec.fieldContext_ClientRegistrationOutput_fhirPatientID(ctx, field)
			case "emrHealthRecordID":
				return ec.fieldContext_ClientRegistrationOutput_emrHealthRecordID(ctx, field)
			case "treatmentBuddy":
				return ec.fieldContext_ClientRegistrationOutput_treatmentBuddy(ctx, field)
			case "counselled":
				return ec.fieldContext_ClientRegistrationOutput_counselled(ctx, field)
			case "organisation":
				return ec.fieldContext_ClientRegistrationOutput_organisation(ctx, field)
			case "userID":
				return ec.fieldContext_ClientRegistrationOutput_userID(ctx, field)
			case "currentFacilityID":
				return ec.fieldContext_ClientRegistrationOutput_currentFacilityID(ctx, field)
			case "chv":
				return ec.fieldContext_ClientRegistrationOutput_chv(ctx, field)
			case "caregiver":
				return ec.fieldContext_ClientRegistrationOutput_caregiver(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClientRegistrationOutput", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerClient_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerStaff(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerStaff(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RegisterStaff(rctx, fc.Args["input"].(dto.StaffRegistrationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.StaffRegistrationOutput)
	fc.Result = res
	return ec.marshalNStaffRegistrationOutput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐStaffRegistrationOutput(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerStaff(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StaffRegistrationOutput_id(ctx, field)
			case "active":
				return ec.fieldContext_StaffRegistrationOutput_active(ctx, field)
			case "staffNumber":
				return ec.fieldContext_StaffRegistrationOutput_staffNumber(ctx, field)
			case "userID":
				return ec.fieldContext_StaffRegistrationOutput_userID(ctx, field)
			case "defaultFacility":
				return ec.fieldContext_StaffRegistrationOutput_defaultFacility(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StaffRegistrationOutput", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerStaff_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerCaregiver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerCaregiver(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RegisterCaregiver(rctx, fc.Args["input"].(dto.CaregiverInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.CaregiverProfile)
	fc.Result = res
	return ec.marshalNCaregiverProfile2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCaregiverProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerCaregiver(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CaregiverProfile_id(ctx, field)
			case "user":
				return ec.fieldContext_CaregiverProfile_user(ctx, field)
			case "caregiverNumber":
				return ec.fieldContext_CaregiverProfile_caregiverNumber(ctx, field)
			case "isClient":
				return ec.fieldContext_CaregiverProfile_isClient(ctx, field)
			case "consent":
				return ec.fieldContext_CaregiverProfile_consent(ctx, field)
			case "currentClient":
				return ec.fieldContext_CaregiverProfile_currentClient(ctx, field)
			case "currentFacility":
				return ec.fieldContext_CaregiverProfile_currentFacility(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CaregiverProfile", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerCaregiver_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerClientAsCaregiver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerClientAsCaregiver(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RegisterClientAsCaregiver(rctx, fc.Args["clientID"].(string), fc.Args["caregiverNumber"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.CaregiverProfile)
	fc.Result = res
	return ec.marshalNCaregiverProfile2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCaregiverProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerClientAsCaregiver(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CaregiverProfile_id(ctx, field)
			case "user":
				return ec.fieldContext_CaregiverProfile_user(ctx, field)
			case "caregiverNumber":
				return ec.fieldContext_CaregiverProfile_caregiverNumber(ctx, field)
			case "isClient":
				return ec.fieldContext_CaregiverProfile_isClient(ctx, field)
			case "consent":
				return ec.fieldContext_CaregiverProfile_consent(ctx, field)
			case "currentClient":
				return ec.fieldContext_CaregiverProfile_currentClient(ctx, field)
			case "currentFacility":
				return ec.fieldContext_CaregiverProfile_currentFacility(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CaregiverProfile", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerClientAsCaregiver_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_optOut(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_optOut(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().OptOut(rctx, fc.Args["phoneNumber"].(string), fc.Args["flavour"].(feedlib.Flavour))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_optOut(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_optOut_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setPushToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setPushToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetPushToken(rctx, fc.Args["token"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setPushToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setPushToken_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_inviteUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_inviteUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InviteUser(rctx, fc.Args["userID"].(string), fc.Args["phoneNumber"].(string), fc.Args["flavour"].(feedlib.Flavour), fc.Args["reinvite"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_inviteUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_inviteUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setUserPIN(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setUserPIN(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetUserPin(rctx, fc.Args["input"].(*dto.PINInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setUserPIN(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setUserPIN_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_transferClientToFacility(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_transferClientToFacility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TransferClientToFacility(rctx, fc.Args["clientId"].(string), fc.Args["facilityID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_transferClientToFacility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_transferClientToFacility_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setStaffDefaultFacility(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setStaffDefaultFacility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetStaffDefaultFacility(rctx, fc.Args["staffID"].(string), fc.Args["facilityID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Facility)
	fc.Result = res
	return ec.marshalNFacility2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacility(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setStaffDefaultFacility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Facility_id(ctx, field)
			case "name":
				return ec.fieldContext_Facility_name(ctx, field)
			case "phone":
				return ec.fieldContext_Facility_phone(ctx, field)
			case "active":
				return ec.fieldContext_Facility_active(ctx, field)
			case "country":
				return ec.fieldContext_Facility_country(ctx, field)
			case "description":
				return ec.fieldContext_Facility_description(ctx, field)
			case "fhirOrganisationID":
				return ec.fieldContext_Facility_fhirOrganisationID(ctx, field)
			case "identifier":
				return ec.fieldContext_Facility_identifier(ctx, field)
			case "workStationDetails":
				return ec.fieldContext_Facility_workStationDetails(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Facility", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setStaffDefaultFacility_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setClientDefaultFacility(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setClientDefaultFacility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetClientDefaultFacility(rctx, fc.Args["clientID"].(string), fc.Args["facilityID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Facility)
	fc.Result = res
	return ec.marshalNFacility2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacility(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setClientDefaultFacility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Facility_id(ctx, field)
			case "name":
				return ec.fieldContext_Facility_name(ctx, field)
			case "phone":
				return ec.fieldContext_Facility_phone(ctx, field)
			case "active":
				return ec.fieldContext_Facility_active(ctx, field)
			case "country":
				return ec.fieldContext_Facility_country(ctx, field)
			case "description":
				return ec.fieldContext_Facility_description(ctx, field)
			case "fhirOrganisationID":
				return ec.fieldContext_Facility_fhirOrganisationID(ctx, field)
			case "identifier":
				return ec.fieldContext_Facility_identifier(ctx, field)
			case "workStationDetails":
				return ec.fieldContext_Facility_workStationDetails(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Facility", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setClientDefaultFacility_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addFacilitiesToStaffProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addFacilitiesToStaffProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddFacilitiesToStaffProfile(rctx, fc.Args["staffID"].(string), fc.Args["facilities"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addFacilitiesToStaffProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addFacilitiesToStaffProfile_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addFacilitiesToClientProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addFacilitiesToClientProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddFacilitiesToClientProfile(rctx, fc.Args["clientID"].(string), fc.Args["facilities"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addFacilitiesToClientProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addFacilitiesToClientProfile_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeFacilitiesFromClientProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_removeFacilitiesFromClientProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveFacilitiesFromClientProfile(rctx, fc.Args["clientID"].(string), fc.Args["facilities"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_removeFacilitiesFromClientProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeFacilitiesFromClientProfile_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_assignCaregiver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_assignCaregiver(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AssignCaregiver(rctx, fc.Args["input"].(dto.ClientCaregiverInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_assignCaregiver(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_assignCaregiver_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeFacilitiesFromStaffProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_removeFacilitiesFromStaffProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveFacilitiesFromStaffProfile(rctx, fc.Args["staffID"].(string), fc.Args["facilities"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_removeFacilitiesFromStaffProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeFacilitiesFromStaffProfile_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerExistingUserAsStaff(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerExistingUserAsStaff(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RegisterExistingUserAsStaff(rctx, fc.Args["input"].(dto.ExistingUserStaffInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.StaffRegistrationOutput)
	fc.Result = res
	return ec.marshalNStaffRegistrationOutput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐStaffRegistrationOutput(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerExistingUserAsStaff(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StaffRegistrationOutput_id(ctx, field)
			case "active":
				return ec.fieldContext_StaffRegistrationOutput_active(ctx, field)
			case "staffNumber":
				return ec.fieldContext_StaffRegistrationOutput_staffNumber(ctx, field)
			case "userID":
				return ec.fieldContext_StaffRegistrationOutput_userID(ctx, field)
			case "defaultFacility":
				return ec.fieldContext_StaffRegistrationOutput_defaultFacility(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StaffRegistrationOutput", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerExistingUserAsStaff_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_consentToAClientCaregiver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_consentToAClientCaregiver(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConsentToAClientCaregiver(rctx, fc.Args["clientID"].(string), fc.Args["caregiverID"].(string), fc.Args["consent"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_consentToAClientCaregiver(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_consentToAClientCaregiver_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_consentToManagingClient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_consentToManagingClient(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConsentToManagingClient(rctx, fc.Args["caregiverID"].(string), fc.Args["clientID"].(string), fc.Args["consent"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_consentToManagingClient(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_consentToManagingClient_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerExistingUserAsClient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerExistingUserAsClient(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RegisterExistingUserAsClient(rctx, fc.Args["input"].(dto.ExistingUserClientInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.ClientRegistrationOutput)
	fc.Result = res
	return ec.marshalNClientRegistrationOutput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐClientRegistrationOutput(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerExistingUserAsClient(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ClientRegistrationOutput_id(ctx, field)
			case "active":
				return ec.fieldContext_ClientRegistrationOutput_active(ctx, field)
			case "clientTypes":
				return ec.fieldContext_ClientRegistrationOutput_clientTypes(ctx, field)
			case "enrollmentDate":
				return ec.fieldContext_ClientRegistrationOutput_enrollmentDate(ctx, field)
			case "fhirPatientID":
				return ec.fieldContext_ClientRegistrationOutput_fhirPatientID(ctx, field)
			case "emrHealthRecordID":
				return ec.fieldContext_ClientRegistrationOutput_emrHealthRecordID(ctx, field)
			case "treatmentBuddy":
				return ec.fieldContext_ClientRegistrationOutput_treatmentBuddy(ctx, field)
			case "counselled":
				return ec.fieldContext_ClientRegistrationOutput_counselled(ctx, field)
			case "organisation":
				return ec.fieldContext_ClientRegistrationOutput_organisation(ctx, field)
			case "userID":
				return ec.fieldContext_ClientRegistrationOutput_userID(ctx, field)
			case "currentFacilityID":
				return ec.fieldContext_ClientRegistrationOutput_currentFacilityID(ctx, field)
			case "chv":
				return ec.fieldContext_ClientRegistrationOutput_chv(ctx, field)
			case "caregiver":
				return ec.fieldContext_ClientRegistrationOutput_caregiver(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClientRegistrationOutput", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerExistingUserAsClient_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setCaregiverCurrentClient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setCaregiverCurrentClient(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetCaregiverCurrentClient(rctx, fc.Args["clientID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.ClientProfile)
	fc.Result = res
	return ec.marshalNClientProfile2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setCaregiverCurrentClient(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ClientProfile_id(ctx, field)
			case "user":
				return ec.fieldContext_ClientProfile_user(ctx, field)
			case "active":
				return ec.fieldContext_ClientProfile_active(ctx, field)
			case "clientTypes":
				return ec.fieldContext_ClientProfile_clientTypes(ctx, field)
			case "treatmentEnrollmentDate":
				return ec.fieldContext_ClientProfile_treatmentEnrollmentDate(ctx, field)
			case "fhirPatientID":
				return ec.fieldContext_ClientProfile_fhirPatientID(ctx, field)
			case "healthRecordID":
				return ec.fieldContext_ClientProfile_healthRecordID(ctx, field)
			case "treatmentBuddy":
				return ec.fieldContext_ClientProfile_treatmentBuddy(ctx, field)
			case "clientCounselled":
				return ec.fieldContext_ClientProfile_clientCounselled(ctx, field)
			case "defaultFacility":
				return ec.fieldContext_ClientProfile_defaultFacility(ctx, field)
			case "chvUserID":
				return ec.fieldContext_ClientProfile_chvUserID(ctx, field)
			case "chvUserName":
				return ec.fieldContext_ClientProfile_chvUserName(ctx, field)
			case "caregiverID":
				return ec.fieldContext_ClientProfile_caregiverID(ctx, field)
			case "cccNumber":
				return ec.fieldContext_ClientProfile_cccNumber(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClientProfile", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setCaregiverCurrentClient_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setCaregiverCurrentFacility(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setCaregiverCurrentFacility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetCaregiverCurrentFacility(rctx, fc.Args["clientID"].(string), fc.Args["facilityID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Facility)
	fc.Result = res
	return ec.marshalNFacility2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacility(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setCaregiverCurrentFacility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Facility_id(ctx, field)
			case "name":
				return ec.fieldContext_Facility_name(ctx, field)
			case "phone":
				return ec.fieldContext_Facility_phone(ctx, field)
			case "active":
				return ec.fieldContext_Facility_active(ctx, field)
			case "country":
				return ec.fieldContext_Facility_country(ctx, field)
			case "description":
				return ec.fieldContext_Facility_description(ctx, field)
			case "fhirOrganisationID":
				return ec.fieldContext_Facility_fhirOrganisationID(ctx, field)
			case "identifier":
				return ec.fieldContext_Facility_identifier(ctx, field)
			case "workStationDetails":
				return ec.fieldContext_Facility_workStationDetails(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Facility", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setCaregiverCurrentFacility_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerExistingUserAsCaregiver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerExistingUserAsCaregiver(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RegisterExistingUserAsCaregiver(rctx, fc.Args["userID"].(string), fc.Args["caregiverNumber"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.CaregiverProfile)
	fc.Result = res
	return ec.marshalNCaregiverProfile2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCaregiverProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerExistingUserAsCaregiver(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CaregiverProfile_id(ctx, field)
			case "user":
				return ec.fieldContext_CaregiverProfile_user(ctx, field)
			case "caregiverNumber":
				return ec.fieldContext_CaregiverProfile_caregiverNumber(ctx, field)
			case "isClient":
				return ec.fieldContext_CaregiverProfile_isClient(ctx, field)
			case "consent":
				return ec.fieldContext_CaregiverProfile_consent(ctx, field)
			case "currentClient":
				return ec.fieldContext_CaregiverProfile_currentClient(ctx, field)
			case "currentFacility":
				return ec.fieldContext_CaregiverProfile_currentFacility(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CaregiverProfile", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerExistingUserAsCaregiver_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProfile(rctx, fc.Args["userID"].(string), fc.Args["cccNumber"].(*string), fc.Args["username"].(*string), fc.Args["phoneNumber"].(*string), fc.Args["programID"].(string), fc.Args["flavour"].(feedlib.Flavour))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateProfile_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Notification_id(ctx context.Context, field graphql.CollectedField, obj *domain.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_title(ctx context.Context, field graphql.CollectedField, obj *domain.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_body(ctx context.Context, field graphql.CollectedField, obj *domain.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_body(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_body(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_type(ctx context.Context, field graphql.CollectedField, obj *domain.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enums.NotificationType)
	fc.Result = res
	return ec.marshalNNotificationType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐNotificationType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NotificationType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_isRead(ctx context.Context, field graphql.CollectedField, obj *domain.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_isRead(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRead, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_isRead(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_createdAt(ctx context.Context, field graphql.CollectedField, obj *domain.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotificationTypeFilter_enum(ctx context.Context, field graphql.CollectedField, obj *domain.NotificationTypeFilter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotificationTypeFilter_enum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enums.NotificationType)
	fc.Result = res
	return ec.marshalNNotificationType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐNotificationType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotificationTypeFilter_enum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationTypeFilter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NotificationType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotificationTypeFilter_name(ctx context.Context, field graphql.CollectedField, obj *domain.NotificationTypeFilter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotificationTypeFilter_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotificationTypeFilter_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationTypeFilter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotificationsPage_notifications(ctx context.Context, field graphql.CollectedField, obj *domain.NotificationsPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotificationsPage_notifications(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notifications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.Notification)
	fc.Result = res
	return ec.marshalNNotification2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐNotification(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotificationsPage_notifications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationsPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Notification_id(ctx, field)
			case "title":
				return ec.fieldContext_Notification_title(ctx, field)
			case "body":
				return ec.fieldContext_Notification_body(ctx, field)
			case "type":
				return ec.fieldContext_Notification_type(ctx, field)
			case "isRead":
				return ec.fieldContext_Notification_isRead(ctx, field)
			case "createdAt":
				return ec.fieldContext_Notification_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notification", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotificationsPage_pagination(ctx context.Context, field graphql.CollectedField, obj *domain.NotificationsPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotificationsPage_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Pagination)
	fc.Result = res
	return ec.marshalNPagination2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotificationsPage_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationsPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_Pagination_limit(ctx, field)
			case "currentPage":
				return ec.fieldContext_Pagination_currentPage(ctx, field)
			case "count":
				return ec.fieldContext_Pagination_count(ctx, field)
			case "totalPages":
				return ec.fieldContext_Pagination_totalPages(ctx, field)
			case "nextPage":
				return ec.fieldContext_Pagination_nextPage(ctx, field)
			case "previousPage":
				return ec.fieldContext_Pagination_previousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OTPResponse_otp(ctx context.Context, field graphql.CollectedField, obj *domain.OTPResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OTPResponse_otp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OTP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OTPResponse_otp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OTPResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OTPResponse_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *domain.OTPResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OTPResponse_phoneNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OTPResponse_phoneNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OTPResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organisation_id(ctx context.Context, field graphql.CollectedField, obj *domain.Organisation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organisation_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organisation_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organisation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organisation_name(ctx context.Context, field graphql.CollectedField, obj *domain.Organisation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organisation_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organisation_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organisation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organisation_description(ctx context.Context, field graphql.CollectedField, obj *domain.Organisation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organisation_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organisation_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organisation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganisationOutputPage_pagination(ctx context.Context, field graphql.CollectedField, obj *dto.OrganisationOutputPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganisationOutputPage_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Pagination)
	fc.Result = res
	return ec.marshalNPagination2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganisationOutputPage_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganisationOutputPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_Pagination_limit(ctx, field)
			case "currentPage":
				return ec.fieldContext_Pagination_currentPage(ctx, field)
			case "count":
				return ec.fieldContext_Pagination_count(ctx, field)
			case "totalPages":
				return ec.fieldContext_Pagination_totalPages(ctx, field)
			case "nextPage":
				return ec.fieldContext_Pagination_nextPage(ctx, field)
			case "previousPage":
				return ec.fieldContext_Pagination_previousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganisationOutputPage_organisations(ctx context.Context, field graphql.CollectedField, obj *dto.OrganisationOutputPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganisationOutputPage_organisations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organisations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.Organisation)
	fc.Result = res
	return ec.marshalNOrganisation2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐOrganisation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganisationOutputPage_organisations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganisationOutputPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Organisation_id(ctx, field)
			case "name":
				return ec.fieldContext_Organisation_name(ctx, field)
			case "description":
				return ec.fieldContext_Organisation_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organisation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pagination_limit(ctx context.Context, field graphql.CollectedField, obj *domain.Pagination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pagination_limit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Limit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pagination_limit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pagination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pagination_currentPage(ctx context.Context, field graphql.CollectedField, obj *domain.Pagination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pagination_currentPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pagination_currentPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pagination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pagination_count(ctx context.Context, field graphql.CollectedField, obj *domain.Pagination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pagination_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pagination_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pagination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pagination_totalPages(ctx context.Context, field graphql.CollectedField, obj *domain.Pagination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pagination_totalPages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pagination_totalPages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pagination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pagination_nextPage(ctx context.Context, field graphql.CollectedField, obj *domain.Pagination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pagination_nextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pagination_nextPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pagination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Pagination_previousPage(ctx context.Context, field graphql.CollectedField, obj *domain.Pagination) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Pagination_previousPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Pagination_previousPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Pagination",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostingHours_start(ctx context.Context, field graphql.CollectedField, obj *domain.PostingHours) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostingHours_start(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Start, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostingHours_start(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostingHours",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PostingHours_end(ctx context.Context, field graphql.CollectedField, obj *domain.PostingHours) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PostingHours_end(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.End, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PostingHours_end(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PostingHours",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Program_id(ctx context.Context, field graphql.CollectedField, obj *domain.Program) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Program_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Program_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Program",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Program_active(ctx context.Context, field graphql.CollectedField, obj *domain.Program) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Program_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Program_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Program",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Program_name(ctx context.Context, field graphql.CollectedField, obj *domain.Program) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Program_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Program_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Program",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Program_organisation(ctx context.Context, field graphql.CollectedField, obj *domain.Program) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Program_organisation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organisation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Organisation)
	fc.Result = res
	return ec.marshalNOrganisation2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐOrganisation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Program_organisation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Program",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Organisation_id(ctx, field)
			case "name":
				return ec.fieldContext_Organisation_name(ctx, field)
			case "description":
				return ec.fieldContext_Organisation_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organisation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProgramOutput_count(ctx context.Context, field graphql.CollectedField, obj *dto.ProgramOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProgramOutput_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProgramOutput_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProgramOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProgramOutput_programs(ctx context.Context, field graphql.CollectedField, obj *dto.ProgramOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProgramOutput_programs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Programs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.Program)
	fc.Result = res
	return ec.marshalOProgram2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐProgramᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProgramOutput_programs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProgramOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Program_id(ctx, field)
			case "active":
				return ec.fieldContext_Program_active(ctx, field)
			case "name":
				return ec.fieldContext_Program_name(ctx, field)
			case "organisation":
				return ec.fieldContext_Program_organisation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Program", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProgramPage_programs(ctx context.Context, field graphql.CollectedField, obj *domain.ProgramPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProgramPage_programs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Programs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.Program)
	fc.Result = res
	return ec.marshalNProgram2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐProgram(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProgramPage_programs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProgramPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Program_id(ctx, field)
			case "active":
				return ec.fieldContext_Program_active(ctx, field)
			case "name":
				return ec.fieldContext_Program_name(ctx, field)
			case "organisation":
				return ec.fieldContext_Program_organisation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Program", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProgramPage_pagination(ctx context.Context, field graphql.CollectedField, obj *domain.ProgramPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProgramPage_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Pagination)
	fc.Result = res
	return ec.marshalNPagination2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProgramPage_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProgramPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_Pagination_limit(ctx, field)
			case "currentPage":
				return ec.fieldContext_Pagination_currentPage(ctx, field)
			case "count":
				return ec.fieldContext_Pagination_count(ctx, field)
			case "totalPages":
				return ec.fieldContext_Pagination_totalPages(ctx, field)
			case "nextPage":
				return ec.fieldContext_Pagination_nextPage(ctx, field)
			case "previousPage":
				return ec.fieldContext_Pagination_previousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_fetchClientAppointments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_fetchClientAppointments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FetchClientAppointments(rctx, fc.Args["clientID"].(string), fc.Args["paginationInput"].(dto.PaginationsInput), fc.Args["filters"].([]*firebasetools.FilterParam))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.AppointmentsPage)
	fc.Result = res
	return ec.marshalOAppointmentsPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAppointmentsPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_fetchClientAppointments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "appointments":
				return ec.fieldContext_AppointmentsPage_appointments(ctx, field)
			case "pagination":
				return ec.fieldContext_AppointmentsPage_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AppointmentsPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_fetchClientAppointments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_nextRefill(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_nextRefill(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NextRefill(rctx, fc.Args["clientID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_nextRefill(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Date does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_nextRefill_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserRoles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserRoles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserRoles(rctx, fc.Args["userID"].(string), fc.Args["organisationID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.AuthorityRole)
	fc.Result = res
	return ec.marshalOAuthorityRole2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAuthorityRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserRoles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "authorityRoleID":
				return ec.fieldContext_AuthorityRole_authorityRoleID(ctx, field)
			case "name":
				return ec.fieldContext_AuthorityRole_name(ctx, field)
			case "active":
				return ec.fieldContext_AuthorityRole_active(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthorityRole", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserRoles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllAuthorityRoles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllAuthorityRoles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllAuthorityRoles(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.AuthorityRole)
	fc.Result = res
	return ec.marshalOAuthorityRole2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAuthorityRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllAuthorityRoles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "authorityRoleID":
				return ec.fieldContext_AuthorityRole_authorityRoleID(ctx, field)
			case "name":
				return ec.fieldContext_AuthorityRole_name(ctx, field)
			case "active":
				return ec.fieldContext_AuthorityRole_active(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthorityRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listMembers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listMembers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListMembers(rctx, fc.Args["input"].(*stream_chat.QueryOption))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.Member)
	fc.Result = res
	return ec.marshalOMember2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listMembers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "userID":
				return ec.fieldContext_Member_userID(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "role":
				return ec.fieldContext_Member_role(ctx, field)
			case "username":
				return ec.fieldContext_Member_username(ctx, field)
			case "gender":
				return ec.fieldContext_Member_gender(ctx, field)
			case "userType":
				return ec.fieldContext_Member_userType(ctx, field)
			case "extraData":
				return ec.fieldContext_Member_extraData(ctx, field)
			case "ageUpperBound":
				return ec.fieldContext_Member_ageUpperBound(ctx, field)
			case "ageLowerBound":
				return ec.fieldContext_Member_ageLowerBound(ctx, field)
			case "clientTypes":
				return ec.fieldContext_Member_clientTypes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listMembers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_listCommunityBannedMembers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listCommunityBannedMembers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListCommunityBannedMembers(rctx, fc.Args["communityID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.Member)
	fc.Result = res
	return ec.marshalOMember2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listCommunityBannedMembers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "userID":
				return ec.fieldContext_Member_userID(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "role":
				return ec.fieldContext_Member_role(ctx, field)
			case "username":
				return ec.fieldContext_Member_username(ctx, field)
			case "gender":
				return ec.fieldContext_Member_gender(ctx, field)
			case "userType":
				return ec.fieldContext_Member_userType(ctx, field)
			case "extraData":
				return ec.fieldContext_Member_extraData(ctx, field)
			case "ageUpperBound":
				return ec.fieldContext_Member_ageUpperBound(ctx, field)
			case "ageLowerBound":
				return ec.fieldContext_Member_ageLowerBound(ctx, field)
			case "clientTypes":
				return ec.fieldContext_Member_clientTypes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listCommunityBannedMembers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_inviteMembersToCommunity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_inviteMembersToCommunity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().InviteMembersToCommunity(rctx, fc.Args["communityID"].(string), fc.Args["memberIDs"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_inviteMembersToCommunity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_inviteMembersToCommunity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_listCommunities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listCommunities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListCommunities(rctx, fc.Args["input"].(*stream_chat.QueryOption))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.Community)
	fc.Result = res
	return ec.marshalOCommunity2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCommunity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listCommunities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Community_id(ctx, field)
			case "cid":
				return ec.fieldContext_Community_cid(ctx, field)
			case "name":
				return ec.fieldContext_Community_name(ctx, field)
			case "disabled":
				return ec.fieldContext_Community_disabled(ctx, field)
			case "frozen":
				return ec.fieldContext_Community_frozen(ctx, field)
			case "memberCount":
				return ec.fieldContext_Community_memberCount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Community_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Community_updatedAt(ctx, field)
			case "ageRange":
				return ec.fieldContext_Community_ageRange(ctx, field)
			case "gender":
				return ec.fieldContext_Community_gender(ctx, field)
			case "clientType":
				return ec.fieldContext_Community_clientType(ctx, field)
			case "inviteOnly":
				return ec.fieldContext_Community_inviteOnly(ctx, field)
			case "description":
				return ec.fieldContext_Community_description(ctx, field)
			case "members":
				return ec.fieldContext_Community_members(ctx, field)
			case "createdBy":
				return ec.fieldContext_Community_createdBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Community", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listCommunities_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_listCommunityMembers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listCommunityMembers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListCommunityMembers(rctx, fc.Args["communityID"].(string), fc.Args["input"].(*stream_chat.QueryOption))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.CommunityMember)
	fc.Result = res
	return ec.marshalOCommunityMember2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCommunityMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listCommunityMembers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userID":
				return ec.fieldContext_CommunityMember_userID(ctx, field)
			case "user":
				return ec.fieldContext_CommunityMember_user(ctx, field)
			case "isModerator":
				return ec.fieldContext_CommunityMember_isModerator(ctx, field)
			case "invited":
				return ec.fieldContext_CommunityMember_invited(ctx, field)
			case "inviteAcceptedAt":
				return ec.fieldContext_CommunityMember_inviteAcceptedAt(ctx, field)
			case "inviteRejectedAt":
				return ec.fieldContext_CommunityMember_inviteRejectedAt(ctx, field)
			case "role":
				return ec.fieldContext_CommunityMember_role(ctx, field)
			case "userType":
				return ec.fieldContext_CommunityMember_userType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommunityMember", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listCommunityMembers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_listPendingInvites(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listPendingInvites(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListPendingInvites(rctx, fc.Args["memberID"].(string), fc.Args["input"].(*stream_chat.QueryOption))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.Community)
	fc.Result = res
	return ec.marshalOCommunity2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCommunity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listPendingInvites(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Community_id(ctx, field)
			case "cid":
				return ec.fieldContext_Community_cid(ctx, field)
			case "name":
				return ec.fieldContext_Community_name(ctx, field)
			case "disabled":
				return ec.fieldContext_Community_disabled(ctx, field)
			case "frozen":
				return ec.fieldContext_Community_frozen(ctx, field)
			case "memberCount":
				return ec.fieldContext_Community_memberCount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Community_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Community_updatedAt(ctx, field)
			case "ageRange":
				return ec.fieldContext_Community_ageRange(ctx, field)
			case "gender":
				return ec.fieldContext_Community_gender(ctx, field)
			case "clientType":
				return ec.fieldContext_Community_clientType(ctx, field)
			case "inviteOnly":
				return ec.fieldContext_Community_inviteOnly(ctx, field)
			case "description":
				return ec.fieldContext_Community_description(ctx, field)
			case "members":
				return ec.fieldContext_Community_members(ctx, field)
			case "createdBy":
				return ec.fieldContext_Community_createdBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Community", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listPendingInvites_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_recommendedCommunities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_recommendedCommunities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecommendedCommunities(rctx, fc.Args["clientID"].(string), fc.Args["limit"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.Community)
	fc.Result = res
	return ec.marshalOCommunity2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCommunity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_recommendedCommunities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Community_id(ctx, field)
			case "cid":
				return ec.fieldContext_Community_cid(ctx, field)
			case "name":
				return ec.fieldContext_Community_name(ctx, field)
			case "disabled":
				return ec.fieldContext_Community_disabled(ctx, field)
			case "frozen":
				return ec.fieldContext_Community_frozen(ctx, field)
			case "memberCount":
				return ec.fieldContext_Community_memberCount(ctx, field)
			case "createdAt":
				return ec.fieldContext_Community_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Community_updatedAt(ctx, field)
			case "ageRange":
				return ec.fieldContext_Community_ageRange(ctx, field)
			case "gender":
				return ec.fieldContext_Community_gender(ctx, field)
			case "clientType":
				return ec.fieldContext_Community_clientType(ctx, field)
			case "inviteOnly":
				return ec.fieldContext_Community_inviteOnly(ctx, field)
			case "description":
				return ec.fieldContext_Community_description(ctx, field)
			case "members":
				return ec.fieldContext_Community_members(ctx, field)
			case "createdBy":
				return ec.fieldContext_Community_createdBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Community", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_recommendedCommunities_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_listFlaggedMessages(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listFlaggedMessages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListFlaggedMessages(rctx, fc.Args["communityCID"].(*string), fc.Args["memberIDs"].([]*string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.MessageFlag)
	fc.Result = res
	return ec.marshalOMessageFlag2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐMessageFlag(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listFlaggedMessages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user":
				return ec.fieldContext_MessageFlag_user(ctx, field)
			case "message":
				return ec.fieldContext_MessageFlag_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MessageFlag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listFlaggedMessages_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getContent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetContent(rctx, fc.Args["categoryID"].(*int), fc.Args["limit"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Content)
	fc.Result = res
	return ec.marshalNContent2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐContent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getContent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_Content_items(ctx, field)
			case "meta":
				return ec.fieldContext_Content_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Content", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getContent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_listContentCategories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listContentCategories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListContentCategories(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.ContentItemCategory)
	fc.Result = res
	return ec.marshalNContentItemCategory2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐContentItemCategoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listContentCategories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ContentItemCategory_id(ctx, field)
			case "name":
				return ec.fieldContext_ContentItemCategory_name(ctx, field)
			case "iconUrl":
				return ec.fieldContext_ContentItemCategory_iconUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContentItemCategory", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserBookmarkedContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserBookmarkedContent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserBookmarkedContent(rctx, fc.Args["clientID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Content)
	fc.Result = res
	return ec.marshalOContent2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐContent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserBookmarkedContent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_Content_items(ctx, field)
			case "meta":
				return ec.fieldContext_Content_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Content", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserBookmarkedContent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_checkIfUserHasLikedContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_checkIfUserHasLikedContent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CheckIfUserHasLikedContent(rctx, fc.Args["clientID"].(string), fc.Args["contentID"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_checkIfUserHasLikedContent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_checkIfUserHasLikedContent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_checkIfUserBookmarkedContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_checkIfUserBookmarkedContent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CheckIfUserBookmarkedContent(rctx, fc.Args["clientID"].(string), fc.Args["contentID"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_checkIfUserBookmarkedContent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_checkIfUserBookmarkedContent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getFAQs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getFAQs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetFAQs(rctx, fc.Args["flavour"].(feedlib.Flavour))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Content)
	fc.Result = res
	return ec.marshalNContent2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐContent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getFAQs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_Content_items(ctx, field)
			case "meta":
				return ec.fieldContext_Content_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Content", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getFAQs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchFacility(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchFacility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchFacility(rctx, fc.Args["searchParameter"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.Facility)
	fc.Result = res
	return ec.marshalOFacility2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacility(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchFacility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Facility_id(ctx, field)
			case "name":
				return ec.fieldContext_Facility_name(ctx, field)
			case "phone":
				return ec.fieldContext_Facility_phone(ctx, field)
			case "active":
				return ec.fieldContext_Facility_active(ctx, field)
			case "country":
				return ec.fieldContext_Facility_country(ctx, field)
			case "description":
				return ec.fieldContext_Facility_description(ctx, field)
			case "fhirOrganisationID":
				return ec.fieldContext_Facility_fhirOrganisationID(ctx, field)
			case "identifier":
				return ec.fieldContext_Facility_identifier(ctx, field)
			case "workStationDetails":
				return ec.fieldContext_Facility_workStationDetails(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Facility", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchFacility_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_retrieveFacility(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_retrieveFacility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RetrieveFacility(rctx, fc.Args["id"].(string), fc.Args["active"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Facility)
	fc.Result = res
	return ec.marshalOFacility2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacility(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_retrieveFacility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Facility_id(ctx, field)
			case "name":
				return ec.fieldContext_Facility_name(ctx, field)
			case "phone":
				return ec.fieldContext_Facility_phone(ctx, field)
			case "active":
				return ec.fieldContext_Facility_active(ctx, field)
			case "country":
				return ec.fieldContext_Facility_country(ctx, field)
			case "description":
				return ec.fieldContext_Facility_description(ctx, field)
			case "fhirOrganisationID":
				return ec.fieldContext_Facility_fhirOrganisationID(ctx, field)
			case "identifier":
				return ec.fieldContext_Facility_identifier(ctx, field)
			case "workStationDetails":
				return ec.fieldContext_Facility_workStationDetails(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Facility", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_retrieveFacility_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_retrieveFacilityByIdentifier(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_retrieveFacilityByIdentifier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RetrieveFacilityByIdentifier(rctx, fc.Args["identifier"].(dto.FacilityIdentifierInput), fc.Args["isActive"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Facility)
	fc.Result = res
	return ec.marshalNFacility2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacility(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_retrieveFacilityByIdentifier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Facility_id(ctx, field)
			case "name":
				return ec.fieldContext_Facility_name(ctx, field)
			case "phone":
				return ec.fieldContext_Facility_phone(ctx, field)
			case "active":
				return ec.fieldContext_Facility_active(ctx, field)
			case "country":
				return ec.fieldContext_Facility_country(ctx, field)
			case "description":
				return ec.fieldContext_Facility_description(ctx, field)
			case "fhirOrganisationID":
				return ec.fieldContext_Facility_fhirOrganisationID(ctx, field)
			case "identifier":
				return ec.fieldContext_Facility_identifier(ctx, field)
			case "workStationDetails":
				return ec.fieldContext_Facility_workStationDetails(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Facility", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_retrieveFacilityByIdentifier_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_listFacilities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listFacilities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListFacilities(rctx, fc.Args["searchTerm"].(*string), fc.Args["filterInput"].([]*dto.FiltersInput), fc.Args["paginationInput"].(dto.PaginationsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FacilityPage)
	fc.Result = res
	return ec.marshalOFacilityPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacilityPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listFacilities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pagination":
				return ec.fieldContext_FacilityPage_pagination(ctx, field)
			case "facilities":
				return ec.fieldContext_FacilityPage_facilities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FacilityPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listFacilities_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_canRecordMood(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_canRecordMood(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CanRecordMood(rctx, fc.Args["clientID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_canRecordMood(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_canRecordMood_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getHealthDiaryQuote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getHealthDiaryQuote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetHealthDiaryQuote(rctx, fc.Args["limit"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.ClientHealthDiaryQuote)
	fc.Result = res
	return ec.marshalNClientHealthDiaryQuote2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientHealthDiaryQuoteᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getHealthDiaryQuote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "author":
				return ec.fieldContext_ClientHealthDiaryQuote_author(ctx, field)
			case "quote":
				return ec.fieldContext_ClientHealthDiaryQuote_quote(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClientHealthDiaryQuote", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getHealthDiaryQuote_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getClientHealthDiaryEntries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getClientHealthDiaryEntries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetClientHealthDiaryEntries(rctx, fc.Args["clientID"].(string), fc.Args["moodType"].(*enums.Mood), fc.Args["shared"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.ClientHealthDiaryEntry)
	fc.Result = res
	return ec.marshalNClientHealthDiaryEntry2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientHealthDiaryEntryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getClientHealthDiaryEntries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ClientHealthDiaryEntry_id(ctx, field)
			case "active":
				return ec.fieldContext_ClientHealthDiaryEntry_active(ctx, field)
			case "mood":
				return ec.fieldContext_ClientHealthDiaryEntry_mood(ctx, field)
			case "note":
				return ec.fieldContext_ClientHealthDiaryEntry_note(ctx, field)
			case "entryType":
				return ec.fieldContext_ClientHealthDiaryEntry_entryType(ctx, field)
			case "shareWithHealthWorker":
				return ec.fieldContext_ClientHealthDiaryEntry_shareWithHealthWorker(ctx, field)
			case "sharedAt":
				return ec.fieldContext_ClientHealthDiaryEntry_sharedAt(ctx, field)
			case "clientID":
				return ec.fieldContext_ClientHealthDiaryEntry_clientID(ctx, field)
			case "createdAt":
				return ec.fieldContext_ClientHealthDiaryEntry_createdAt(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_ClientHealthDiaryEntry_phoneNumber(ctx, field)
			case "clientName":
				return ec.fieldContext_ClientHealthDiaryEntry_clientName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClientHealthDiaryEntry", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getClientHealthDiaryEntries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSharedHealthDiaryEntries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getSharedHealthDiaryEntries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSharedHealthDiaryEntries(rctx, fc.Args["clientID"].(string), fc.Args["facilityID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.ClientHealthDiaryEntry)
	fc.Result = res
	return ec.marshalNClientHealthDiaryEntry2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientHealthDiaryEntry(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getSharedHealthDiaryEntries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ClientHealthDiaryEntry_id(ctx, field)
			case "active":
				return ec.fieldContext_ClientHealthDiaryEntry_active(ctx, field)
			case "mood":
				return ec.fieldContext_ClientHealthDiaryEntry_mood(ctx, field)
			case "note":
				return ec.fieldContext_ClientHealthDiaryEntry_note(ctx, field)
			case "entryType":
				return ec.fieldContext_ClientHealthDiaryEntry_entryType(ctx, field)
			case "shareWithHealthWorker":
				return ec.fieldContext_ClientHealthDiaryEntry_shareWithHealthWorker(ctx, field)
			case "sharedAt":
				return ec.fieldContext_ClientHealthDiaryEntry_sharedAt(ctx, field)
			case "clientID":
				return ec.fieldContext_ClientHealthDiaryEntry_clientID(ctx, field)
			case "createdAt":
				return ec.fieldContext_ClientHealthDiaryEntry_createdAt(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_ClientHealthDiaryEntry_phoneNumber(ctx, field)
			case "clientName":
				return ec.fieldContext_ClientHealthDiaryEntry_clientName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClientHealthDiaryEntry", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getSharedHealthDiaryEntries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_fetchNotifications(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_fetchNotifications(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FetchNotifications(rctx, fc.Args["userID"].(string), fc.Args["flavour"].(feedlib.Flavour), fc.Args["paginationInput"].(dto.PaginationsInput), fc.Args["filters"].(*domain.NotificationFilters))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.NotificationsPage)
	fc.Result = res
	return ec.marshalONotificationsPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐNotificationsPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_fetchNotifications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "notifications":
				return ec.fieldContext_NotificationsPage_notifications(ctx, field)
			case "pagination":
				return ec.fieldContext_NotificationsPage_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NotificationsPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_fetchNotifications_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_fetchNotificationTypeFilters(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_fetchNotificationTypeFilters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FetchNotificationTypeFilters(rctx, fc.Args["flavour"].(feedlib.Flavour))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.NotificationTypeFilter)
	fc.Result = res
	return ec.marshalONotificationTypeFilter2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐNotificationTypeFilter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_fetchNotificationTypeFilters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "enum":
				return ec.fieldContext_NotificationTypeFilter_enum(ctx, field)
			case "name":
				return ec.fieldContext_NotificationTypeFilter_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NotificationTypeFilter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_fetchNotificationTypeFilters_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_listOrganisations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listOrganisations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListOrganisations(rctx, fc.Args["paginationInput"].(dto.PaginationsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.OrganisationOutputPage)
	fc.Result = res
	return ec.marshalNOrganisationOutputPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐOrganisationOutputPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listOrganisations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pagination":
				return ec.fieldContext_OrganisationOutputPage_pagination(ctx, field)
			case "organisations":
				return ec.fieldContext_OrganisationOutputPage_organisations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganisationOutputPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listOrganisations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchOrganisations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchOrganisations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchOrganisations(rctx, fc.Args["searchParameter"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.Organisation)
	fc.Result = res
	return ec.marshalOOrganisation2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐOrganisationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchOrganisations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Organisation_id(ctx, field)
			case "name":
				return ec.fieldContext_Organisation_name(ctx, field)
			case "description":
				return ec.fieldContext_Organisation_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organisation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchOrganisations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_sendOTP(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_sendOTP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SendOtp(rctx, fc.Args["username"].(string), fc.Args["flavour"].(feedlib.Flavour))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.OTPResponse)
	fc.Result = res
	return ec.marshalNOTPResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐOTPResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_sendOTP(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "otp":
				return ec.fieldContext_OTPResponse_otp(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_OTPResponse_phoneNumber(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OTPResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_sendOTP_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_listUserPrograms(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listUserPrograms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListUserPrograms(rctx, fc.Args["userID"].(string), fc.Args["flavour"].(feedlib.Flavour))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.ProgramOutput)
	fc.Result = res
	return ec.marshalNProgramOutput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐProgramOutput(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listUserPrograms(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_ProgramOutput_count(ctx, field)
			case "programs":
				return ec.fieldContext_ProgramOutput_programs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProgramOutput", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listUserPrograms_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getProgramFacilities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getProgramFacilities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetProgramFacilities(rctx, fc.Args["programID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.Facility)
	fc.Result = res
	return ec.marshalOFacility2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacility(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getProgramFacilities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Facility_id(ctx, field)
			case "name":
				return ec.fieldContext_Facility_name(ctx, field)
			case "phone":
				return ec.fieldContext_Facility_phone(ctx, field)
			case "active":
				return ec.fieldContext_Facility_active(ctx, field)
			case "country":
				return ec.fieldContext_Facility_country(ctx, field)
			case "description":
				return ec.fieldContext_Facility_description(ctx, field)
			case "fhirOrganisationID":
				return ec.fieldContext_Facility_fhirOrganisationID(ctx, field)
			case "identifier":
				return ec.fieldContext_Facility_identifier(ctx, field)
			case "workStationDetails":
				return ec.fieldContext_Facility_workStationDetails(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Facility", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getProgramFacilities_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchPrograms(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchPrograms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchPrograms(rctx, fc.Args["searchParameter"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.Program)
	fc.Result = res
	return ec.marshalOProgram2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐProgram(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchPrograms(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Program_id(ctx, field)
			case "active":
				return ec.fieldContext_Program_active(ctx, field)
			case "name":
				return ec.fieldContext_Program_name(ctx, field)
			case "organisation":
				return ec.fieldContext_Program_organisation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Program", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchPrograms_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_listPrograms(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listPrograms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListPrograms(rctx, fc.Args["pagination"].(dto.PaginationsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.ProgramPage)
	fc.Result = res
	return ec.marshalNProgramPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐProgramPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listPrograms(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "programs":
				return ec.fieldContext_ProgramPage_programs(ctx, field)
			case "pagination":
				return ec.fieldContext_ProgramPage_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProgramPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listPrograms_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAvailableScreeningTools(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAvailableScreeningTools(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAvailableScreeningTools(rctx, fc.Args["clientID"].(string), fc.Args["facilityID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.ScreeningTool)
	fc.Result = res
	return ec.marshalNScreeningTool2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAvailableScreeningTools(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ScreeningTool_id(ctx, field)
			case "active":
				return ec.fieldContext_ScreeningTool_active(ctx, field)
			case "questionnaireID":
				return ec.fieldContext_ScreeningTool_questionnaireID(ctx, field)
			case "threshold":
				return ec.fieldContext_ScreeningTool_threshold(ctx, field)
			case "clientTypes":
				return ec.fieldContext_ScreeningTool_clientTypes(ctx, field)
			case "genders":
				return ec.fieldContext_ScreeningTool_genders(ctx, field)
			case "ageRange":
				return ec.fieldContext_ScreeningTool_ageRange(ctx, field)
			case "questionnaire":
				return ec.fieldContext_ScreeningTool_questionnaire(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ScreeningTool", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAvailableScreeningTools_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getScreeningToolByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getScreeningToolByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetScreeningToolByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.ScreeningTool)
	fc.Result = res
	return ec.marshalOScreeningTool2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningTool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getScreeningToolByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ScreeningTool_id(ctx, field)
			case "active":
				return ec.fieldContext_ScreeningTool_active(ctx, field)
			case "questionnaireID":
				return ec.fieldContext_ScreeningTool_questionnaireID(ctx, field)
			case "threshold":
				return ec.fieldContext_ScreeningTool_threshold(ctx, field)
			case "clientTypes":
				return ec.fieldContext_ScreeningTool_clientTypes(ctx, field)
			case "genders":
				return ec.fieldContext_ScreeningTool_genders(ctx, field)
			case "ageRange":
				return ec.fieldContext_ScreeningTool_ageRange(ctx, field)
			case "questionnaire":
				return ec.fieldContext_ScreeningTool_questionnaire(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ScreeningTool", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getScreeningToolByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getFacilityRespondedScreeningTools(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getFacilityRespondedScreeningTools(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetFacilityRespondedScreeningTools(rctx, fc.Args["facilityID"].(string), fc.Args["paginationInput"].(dto.PaginationsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.ScreeningToolPage)
	fc.Result = res
	return ec.marshalOScreeningToolPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getFacilityRespondedScreeningTools(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "screeningTools":
				return ec.fieldContext_ScreeningToolPage_screeningTools(ctx, field)
			case "pagination":
				return ec.fieldContext_ScreeningToolPage_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ScreeningToolPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getFacilityRespondedScreeningTools_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getScreeningToolRespondents(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getScreeningToolRespondents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetScreeningToolRespondents(rctx, fc.Args["facilityID"].(string), fc.Args["screeningToolID"].(string), fc.Args["searchTerm"].(*string), fc.Args["paginationInput"].(dto.PaginationsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.ScreeningToolRespondentsPage)
	fc.Result = res
	return ec.marshalOScreeningToolRespondentsPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolRespondentsPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getScreeningToolRespondents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "screeningToolRespondents":
				return ec.fieldContext_ScreeningToolRespondentsPage_screeningToolRespondents(ctx, field)
			case "pagination":
				return ec.fieldContext_ScreeningToolRespondentsPage_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ScreeningToolRespondentsPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getScreeningToolRespondents_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getScreeningToolResponse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getScreeningToolResponse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetScreeningToolResponse(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.QuestionnaireScreeningToolResponse)
	fc.Result = res
	return ec.marshalNQuestionnaireScreeningToolResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐQuestionnaireScreeningToolResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getScreeningToolResponse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_QuestionnaireScreeningToolResponse_id(ctx, field)
			case "active":
				return ec.fieldContext_QuestionnaireScreeningToolResponse_active(ctx, field)
			case "screeningToolID":
				return ec.fieldContext_QuestionnaireScreeningToolResponse_screeningToolID(ctx, field)
			case "facilityID":
				return ec.fieldContext_QuestionnaireScreeningToolResponse_facilityID(ctx, field)
			case "clientID":
				return ec.fieldContext_QuestionnaireScreeningToolResponse_clientID(ctx, field)
			case "aggregateScore":
				return ec.fieldContext_QuestionnaireScreeningToolResponse_aggregateScore(ctx, field)
			case "questionResponses":
				return ec.fieldContext_QuestionnaireScreeningToolResponse_questionResponses(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuestionnaireScreeningToolResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getScreeningToolResponse_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getScreeningToolQuestions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getScreeningToolQuestions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetScreeningToolQuestions(rctx, fc.Args["toolType"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.ScreeningToolQuestion)
	fc.Result = res
	return ec.marshalNScreeningToolQuestion2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolQuestionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getScreeningToolQuestions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ScreeningToolQuestion_id(ctx, field)
			case "question":
				return ec.fieldContext_ScreeningToolQuestion_question(ctx, field)
			case "toolType":
				return ec.fieldContext_ScreeningToolQuestion_toolType(ctx, field)
			case "responseChoices":
				return ec.fieldContext_ScreeningToolQuestion_responseChoices(ctx, field)
			case "responseType":
				return ec.fieldContext_ScreeningToolQuestion_responseType(ctx, field)
			case "responseCategory":
				return ec.fieldContext_ScreeningToolQuestion_responseCategory(ctx, field)
			case "sequence":
				return ec.fieldContext_ScreeningToolQuestion_sequence(ctx, field)
			case "active":
				return ec.fieldContext_ScreeningToolQuestion_active(ctx, field)
			case "meta":
				return ec.fieldContext_ScreeningToolQuestion_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ScreeningToolQuestion", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getScreeningToolQuestions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAvailableScreeningToolQuestions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAvailableScreeningToolQuestions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAvailableScreeningToolQuestions(rctx, fc.Args["clientID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.AvailableScreeningTools)
	fc.Result = res
	return ec.marshalNAvailableScreeningTools2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAvailableScreeningToolsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAvailableScreeningToolQuestions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "toolType":
				return ec.fieldContext_AvailableScreeningTools_toolType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AvailableScreeningTools", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAvailableScreeningToolQuestions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAvailableFacilityScreeningTools(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAvailableFacilityScreeningTools(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAvailableFacilityScreeningTools(rctx, fc.Args["facilityID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.AvailableScreeningTools)
	fc.Result = res
	return ec.marshalNAvailableScreeningTools2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAvailableScreeningToolsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAvailableFacilityScreeningTools(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "toolType":
				return ec.fieldContext_AvailableScreeningTools_toolType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AvailableScreeningTools", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAvailableFacilityScreeningTools_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAssessmentResponsesByToolType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAssessmentResponsesByToolType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAssessmentResponsesByToolType(rctx, fc.Args["facilityID"].(string), fc.Args["toolType"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.ScreeningToolAssessmentResponse)
	fc.Result = res
	return ec.marshalOScreeningToolAssessmentResponse2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolAssessmentResponseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAssessmentResponsesByToolType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientName":
				return ec.fieldContext_ScreeningToolAssessmentResponse_clientName(ctx, field)
			case "dateAnswered":
				return ec.fieldContext_ScreeningToolAssessmentResponse_dateAnswered(ctx, field)
			case "clientID":
				return ec.fieldContext_ScreeningToolAssessmentResponse_clientID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ScreeningToolAssessmentResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAssessmentResponsesByToolType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getScreeningToolServiceRequestResponses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getScreeningToolServiceRequestResponses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetScreeningToolServiceRequestResponses(rctx, fc.Args["clientID"].(*string), fc.Args["toolType"].(*enums.ScreeningToolType))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.ScreeningToolResponsePayload)
	fc.Result = res
	return ec.marshalNScreeningToolResponsePayload2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolResponsePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getScreeningToolServiceRequestResponses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "serviceRequestID":
				return ec.fieldContext_ScreeningToolResponsePayload_serviceRequestID(ctx, field)
			case "clientContact":
				return ec.fieldContext_ScreeningToolResponsePayload_clientContact(ctx, field)
			case "screeningToolResponses":
				return ec.fieldContext_ScreeningToolResponsePayload_screeningToolResponses(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ScreeningToolResponsePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getScreeningToolServiceRequestResponses_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSecurityQuestions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getSecurityQuestions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSecurityQuestions(rctx, fc.Args["flavour"].(feedlib.Flavour))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.SecurityQuestion)
	fc.Result = res
	return ec.marshalNSecurityQuestion2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSecurityQuestionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getSecurityQuestions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "securityQuestionID":
				return ec.fieldContext_SecurityQuestion_securityQuestionID(ctx, field)
			case "questionStem":
				return ec.fieldContext_SecurityQuestion_questionStem(ctx, field)
			case "description":
				return ec.fieldContext_SecurityQuestion_description(ctx, field)
			case "active":
				return ec.fieldContext_SecurityQuestion_active(ctx, field)
			case "responseType":
				return ec.fieldContext_SecurityQuestion_responseType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SecurityQuestion", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getSecurityQuestions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getServiceRequests(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getServiceRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetServiceRequests(rctx, fc.Args["requestType"].(*string), fc.Args["requestStatus"].(*string), fc.Args["facilityID"].(string), fc.Args["flavour"].(feedlib.Flavour))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.ServiceRequest)
	fc.Result = res
	return ec.marshalOServiceRequest2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐServiceRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getServiceRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ServiceRequest_id(ctx, field)
			case "requestType":
				return ec.fieldContext_ServiceRequest_requestType(ctx, field)
			case "request":
				return ec.fieldContext_ServiceRequest_request(ctx, field)
			case "status":
				return ec.fieldContext_ServiceRequest_status(ctx, field)
			case "clientID":
				return ec.fieldContext_ServiceRequest_clientID(ctx, field)
			case "staffID":
				return ec.fieldContext_ServiceRequest_staffID(ctx, field)
			case "createdAt":
				return ec.fieldContext_ServiceRequest_createdAt(ctx, field)
			case "inProgressAt":
				return ec.fieldContext_ServiceRequest_inProgressAt(ctx, field)
			case "inProgressBy":
				return ec.fieldContext_ServiceRequest_inProgressBy(ctx, field)
			case "resolvedAt":
				return ec.fieldContext_ServiceRequest_resolvedAt(ctx, field)
			case "resolvedBy":
				return ec.fieldContext_ServiceRequest_resolvedBy(ctx, field)
			case "resolvedByName":
				return ec.fieldContext_ServiceRequest_resolvedByName(ctx, field)
			case "facilityID":
				return ec.fieldContext_ServiceRequest_facilityID(ctx, field)
			case "clientName":
				return ec.fieldContext_ServiceRequest_clientName(ctx, field)
			case "staffName":
				return ec.fieldContext_ServiceRequest_staffName(ctx, field)
			case "staffContact":
				return ec.fieldContext_ServiceRequest_staffContact(ctx, field)
			case "clientContact":
				return ec.fieldContext_ServiceRequest_clientContact(ctx, field)
			case "meta":
				return ec.fieldContext_ServiceRequest_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ServiceRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getServiceRequests_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPendingServiceRequestsCount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPendingServiceRequestsCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPendingServiceRequestsCount(rctx, fc.Args["facilityID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.ServiceRequestsCountResponse)
	fc.Result = res
	return ec.marshalNServiceRequestsCountResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐServiceRequestsCountResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPendingServiceRequestsCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientsServiceRequestCount":
				return ec.fieldContext_ServiceRequestsCountResponse_clientsServiceRequestCount(ctx, field)
			case "staffServiceRequestCount":
				return ec.fieldContext_ServiceRequestsCountResponse_staffServiceRequestCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ServiceRequestsCountResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPendingServiceRequestsCount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchServiceRequests(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchServiceRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchServiceRequests(rctx, fc.Args["searchTerm"].(string), fc.Args["flavour"].(feedlib.Flavour), fc.Args["requestType"].(string), fc.Args["facilityID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.ServiceRequest)
	fc.Result = res
	return ec.marshalOServiceRequest2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐServiceRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchServiceRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ServiceRequest_id(ctx, field)
			case "requestType":
				return ec.fieldContext_ServiceRequest_requestType(ctx, field)
			case "request":
				return ec.fieldContext_ServiceRequest_request(ctx, field)
			case "status":
				return ec.fieldContext_ServiceRequest_status(ctx, field)
			case "clientID":
				return ec.fieldContext_ServiceRequest_clientID(ctx, field)
			case "staffID":
				return ec.fieldContext_ServiceRequest_staffID(ctx, field)
			case "createdAt":
				return ec.fieldContext_ServiceRequest_createdAt(ctx, field)
			case "inProgressAt":
				return ec.fieldContext_ServiceRequest_inProgressAt(ctx, field)
			case "inProgressBy":
				return ec.fieldContext_ServiceRequest_inProgressBy(ctx, field)
			case "resolvedAt":
				return ec.fieldContext_ServiceRequest_resolvedAt(ctx, field)
			case "resolvedBy":
				return ec.fieldContext_ServiceRequest_resolvedBy(ctx, field)
			case "resolvedByName":
				return ec.fieldContext_ServiceRequest_resolvedByName(ctx, field)
			case "facilityID":
				return ec.fieldContext_ServiceRequest_facilityID(ctx, field)
			case "clientName":
				return ec.fieldContext_ServiceRequest_clientName(ctx, field)
			case "staffName":
				return ec.fieldContext_ServiceRequest_staffName(ctx, field)
			case "staffContact":
				return ec.fieldContext_ServiceRequest_staffContact(ctx, field)
			case "clientContact":
				return ec.fieldContext_ServiceRequest_clientContact(ctx, field)
			case "meta":
				return ec.fieldContext_ServiceRequest_meta(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ServiceRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchServiceRequests_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_listSurveys(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listSurveys(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListSurveys(rctx, fc.Args["projectID"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.SurveyForm)
	fc.Result = res
	return ec.marshalOSurveyForm2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSurveyFormᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listSurveys(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "projectID":
				return ec.fieldContext_SurveyForm_projectID(ctx, field)
			case "xmlFormID":
				return ec.fieldContext_SurveyForm_xmlFormID(ctx, field)
			case "name":
				return ec.fieldContext_SurveyForm_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SurveyForm", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listSurveys_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getUserSurveyForms(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getUserSurveyForms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserSurveyForms(rctx, fc.Args["userID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.UserSurvey)
	fc.Result = res
	return ec.marshalOUserSurvey2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐUserSurveyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getUserSurveyForms(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserSurvey_id(ctx, field)
			case "active":
				return ec.fieldContext_UserSurvey_active(ctx, field)
			case "created":
				return ec.fieldContext_UserSurvey_created(ctx, field)
			case "link":
				return ec.fieldContext_UserSurvey_link(ctx, field)
			case "title":
				return ec.fieldContext_UserSurvey_title(ctx, field)
			case "description":
				return ec.fieldContext_UserSurvey_description(ctx, field)
			case "hasSubmitted":
				return ec.fieldContext_UserSurvey_hasSubmitted(ctx, field)
			case "userID":
				return ec.fieldContext_UserSurvey_userID(ctx, field)
			case "token":
				return ec.fieldContext_UserSurvey_token(ctx, field)
			case "projectID":
				return ec.fieldContext_UserSurvey_projectID(ctx, field)
			case "formID":
				return ec.fieldContext_UserSurvey_formID(ctx, field)
			case "linkID":
				return ec.fieldContext_UserSurvey_linkID(ctx, field)
			case "programID":
				return ec.fieldContext_UserSurvey_programID(ctx, field)
			case "organisationID":
				return ec.fieldContext_UserSurvey_organisationID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserSurvey", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getUserSurveyForms_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_listSurveyRespondents(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listSurveyRespondents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListSurveyRespondents(rctx, fc.Args["projectID"].(int), fc.Args["formID"].(string), fc.Args["paginationInput"].(dto.PaginationsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.SurveyRespondentPage)
	fc.Result = res
	return ec.marshalOSurveyRespondentPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSurveyRespondentPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listSurveyRespondents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "surveyRespondents":
				return ec.fieldContext_SurveyRespondentPage_surveyRespondents(ctx, field)
			case "pagination":
				return ec.fieldContext_SurveyRespondentPage_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SurveyRespondentPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listSurveyRespondents_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSurveyServiceRequestUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getSurveyServiceRequestUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSurveyServiceRequestUser(rctx, fc.Args["facilityID"].(string), fc.Args["projectID"].(int), fc.Args["formID"].(string), fc.Args["paginationInput"].(dto.PaginationsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.SurveyServiceRequestUserPage)
	fc.Result = res
	return ec.marshalOSurveyServiceRequestUserPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSurveyServiceRequestUserPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getSurveyServiceRequestUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "users":
				return ec.fieldContext_SurveyServiceRequestUserPage_users(ctx, field)
			case "pagination":
				return ec.fieldContext_SurveyServiceRequestUserPage_pagination(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SurveyServiceRequestUserPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getSurveyServiceRequestUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSurveyResponse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getSurveyResponse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSurveyResponse(rctx, fc.Args["input"].(dto.SurveyResponseInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.SurveyResponse)
	fc.Result = res
	return ec.marshalOSurveyResponse2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSurveyResponseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getSurveyResponse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "question":
				return ec.fieldContext_SurveyResponse_question(ctx, field)
			case "answer":
				return ec.fieldContext_SurveyResponse_answer(ctx, field)
			case "questionType":
				return ec.fieldContext_SurveyResponse_questionType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SurveyResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getSurveyResponse_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSurveyWithServiceRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getSurveyWithServiceRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSurveyWithServiceRequest(rctx, fc.Args["facilityID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.SurveysWithServiceRequest)
	fc.Result = res
	return ec.marshalOSurveysWithServiceRequest2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐSurveysWithServiceRequestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getSurveyWithServiceRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "title":
				return ec.fieldContext_SurveysWithServiceRequest_title(ctx, field)
			case "projectID":
				return ec.fieldContext_SurveysWithServiceRequest_projectID(ctx, field)
			case "formID":
				return ec.fieldContext_SurveysWithServiceRequest_formID(ctx, field)
			case "linkID":
				return ec.fieldContext_SurveysWithServiceRequest_linkID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SurveysWithServiceRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getSurveyWithServiceRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getCurrentTerms(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getCurrentTerms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCurrentTerms(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.TermsOfService)
	fc.Result = res
	return ec.marshalNTermsOfService2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐTermsOfService(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getCurrentTerms(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "termsID":
				return ec.fieldContext_TermsOfService_termsID(ctx, field)
			case "text":
				return ec.fieldContext_TermsOfService_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TermsOfService", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_verifyPIN(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_verifyPIN(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VerifyPin(rctx, fc.Args["userID"].(string), fc.Args["flavour"].(feedlib.Flavour), fc.Args["pin"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_verifyPIN(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_verifyPIN_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchClientUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchClientUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchClientUser(rctx, fc.Args["searchParameter"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.ClientProfile)
	fc.Result = res
	return ec.marshalOClientProfile2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientProfileᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchClientUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ClientProfile_id(ctx, field)
			case "user":
				return ec.fieldContext_ClientProfile_user(ctx, field)
			case "active":
				return ec.fieldContext_ClientProfile_active(ctx, field)
			case "clientTypes":
				return ec.fieldContext_ClientProfile_clientTypes(ctx, field)
			case "treatmentEnrollmentDate":
				return ec.fieldContext_ClientProfile_treatmentEnrollmentDate(ctx, field)
			case "fhirPatientID":
				return ec.fieldContext_ClientProfile_fhirPatientID(ctx, field)
			case "healthRecordID":
				return ec.fieldContext_ClientProfile_healthRecordID(ctx, field)
			case "treatmentBuddy":
				return ec.fieldContext_ClientProfile_treatmentBuddy(ctx, field)
			case "clientCounselled":
				return ec.fieldContext_ClientProfile_clientCounselled(ctx, field)
			case "defaultFacility":
				return ec.fieldContext_ClientProfile_defaultFacility(ctx, field)
			case "chvUserID":
				return ec.fieldContext_ClientProfile_chvUserID(ctx, field)
			case "chvUserName":
				return ec.fieldContext_ClientProfile_chvUserName(ctx, field)
			case "caregiverID":
				return ec.fieldContext_ClientProfile_caregiverID(ctx, field)
			case "cccNumber":
				return ec.fieldContext_ClientProfile_cccNumber(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClientProfile", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchClientUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchStaffUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchStaffUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchStaffUser(rctx, fc.Args["searchParameter"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.StaffProfile)
	fc.Result = res
	return ec.marshalOStaffProfile2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐStaffProfileᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchStaffUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StaffProfile_id(ctx, field)
			case "user":
				return ec.fieldContext_StaffProfile_user(ctx, field)
			case "userID":
				return ec.fieldContext_StaffProfile_userID(ctx, field)
			case "active":
				return ec.fieldContext_StaffProfile_active(ctx, field)
			case "staffNumber":
				return ec.fieldContext_StaffProfile_staffNumber(ctx, field)
			case "defaultFacility":
				return ec.fieldContext_StaffProfile_defaultFacility(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StaffProfile", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchStaffUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchCaregiverUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchCaregiverUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchCaregiverUser(rctx, fc.Args["searchParameter"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.CaregiverProfile)
	fc.Result = res
	return ec.marshalOCaregiverProfile2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCaregiverProfileᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchCaregiverUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CaregiverProfile_id(ctx, field)
			case "user":
				return ec.fieldContext_CaregiverProfile_user(ctx, field)
			case "caregiverNumber":
				return ec.fieldContext_CaregiverProfile_caregiverNumber(ctx, field)
			case "isClient":
				return ec.fieldContext_CaregiverProfile_isClient(ctx, field)
			case "consent":
				return ec.fieldContext_CaregiverProfile_consent(ctx, field)
			case "currentClient":
				return ec.fieldContext_CaregiverProfile_currentClient(ctx, field)
			case "currentFacility":
				return ec.fieldContext_CaregiverProfile_currentFacility(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CaregiverProfile", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchCaregiverUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getClientProfileByCCCNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getClientProfileByCCCNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetClientProfileByCCCNumber(rctx, fc.Args["CCCNumber"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.ClientProfile)
	fc.Result = res
	return ec.marshalNClientProfile2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getClientProfileByCCCNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ClientProfile_id(ctx, field)
			case "user":
				return ec.fieldContext_ClientProfile_user(ctx, field)
			case "active":
				return ec.fieldContext_ClientProfile_active(ctx, field)
			case "clientTypes":
				return ec.fieldContext_ClientProfile_clientTypes(ctx, field)
			case "treatmentEnrollmentDate":
				return ec.fieldContext_ClientProfile_treatmentEnrollmentDate(ctx, field)
			case "fhirPatientID":
				return ec.fieldContext_ClientProfile_fhirPatientID(ctx, field)
			case "healthRecordID":
				return ec.fieldContext_ClientProfile_healthRecordID(ctx, field)
			case "treatmentBuddy":
				return ec.fieldContext_ClientProfile_treatmentBuddy(ctx, field)
			case "clientCounselled":
				return ec.fieldContext_ClientProfile_clientCounselled(ctx, field)
			case "defaultFacility":
				return ec.fieldContext_ClientProfile_defaultFacility(ctx, field)
			case "chvUserID":
				return ec.fieldContext_ClientProfile_chvUserID(ctx, field)
			case "chvUserName":
				return ec.fieldContext_ClientProfile_chvUserName(ctx, field)
			case "caregiverID":
				return ec.fieldContext_ClientProfile_caregiverID(ctx, field)
			case "cccNumber":
				return ec.fieldContext_ClientProfile_cccNumber(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ClientProfile", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getClientProfileByCCCNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getCaregiverManagedClients(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getCaregiverManagedClients(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCaregiverManagedClients(rctx, fc.Args["userID"].(string), fc.Args["paginationInput"].(dto.PaginationsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.ManagedClientOutputPage)
	fc.Result = res
	return ec.marshalOManagedClientOutputPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐManagedClientOutputPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getCaregiverManagedClients(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pagination":
				return ec.fieldContext_ManagedClientOutputPage_pagination(ctx, field)
			case "managedClients":
				return ec.fieldContext_ManagedClientOutputPage_managedClients(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ManagedClientOutputPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getCaregiverManagedClients_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_listClientsCaregivers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listClientsCaregivers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListClientsCaregivers(rctx, fc.Args["clientID"].(string), fc.Args["paginationInput"].(*dto.PaginationsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.CaregiverProfileOutputPage)
	fc.Result = res
	return ec.marshalOCaregiverProfileOutputPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐCaregiverProfileOutputPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listClientsCaregivers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pagination":
				return ec.fieldContext_CaregiverProfileOutputPage_pagination(ctx, field)
			case "caregivers":
				return ec.fieldContext_CaregiverProfileOutputPage_caregivers(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CaregiverProfileOutputPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listClientsCaregivers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getStaffFacilities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getStaffFacilities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetStaffFacilities(rctx, fc.Args["staffID"].(string), fc.Args["paginationInput"].(dto.PaginationsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.FacilityOutputPage)
	fc.Result = res
	return ec.marshalOFacilityOutputPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐFacilityOutputPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getStaffFacilities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pagination":
				return ec.fieldContext_FacilityOutputPage_pagination(ctx, field)
			case "facilities":
				return ec.fieldContext_FacilityOutputPage_facilities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FacilityOutputPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getStaffFacilities_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getClientFacilities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getClientFacilities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetClientFacilities(rctx, fc.Args["clientID"].(string), fc.Args["paginationInput"].(dto.PaginationsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.FacilityOutputPage)
	fc.Result = res
	return ec.marshalOFacilityOutputPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐFacilityOutputPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getClientFacilities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pagination":
				return ec.fieldContext_FacilityOutputPage_pagination(ctx, field)
			case "facilities":
				return ec.fieldContext_FacilityOutputPage_facilities(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FacilityOutputPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getClientFacilities_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_checkIdentifierExists(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_checkIdentifierExists(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CheckIdentifierExists(rctx, fc.Args["identifierType"].(enums.ClientIdentifierType), fc.Args["identifierValue"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_checkIdentifierExists(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_checkIdentifierExists_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query__service(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query__service(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve__service(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(fedruntime.Service)
	fc.Result = res
	return ec.marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query__service(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "sdl":
				return ec.fieldContext__Service_sdl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _Service", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Question_id(ctx context.Context, field graphql.CollectedField, obj *domain.Question) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Question_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Question_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Question",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Question_active(ctx context.Context, field graphql.CollectedField, obj *domain.Question) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Question_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Question_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Question",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Question_questionnaireID(ctx context.Context, field graphql.CollectedField, obj *domain.Question) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Question_questionnaireID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuestionnaireID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Question_questionnaireID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Question",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Question_text(ctx context.Context, field graphql.CollectedField, obj *domain.Question) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Question_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Question_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Question",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Question_questionType(ctx context.Context, field graphql.CollectedField, obj *domain.Question) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Question_questionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuestionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enums.QuestionType)
	fc.Result = res
	return ec.marshalNQuestionType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐQuestionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Question_questionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Question",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type QuestionType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Question_responseValueType(ctx context.Context, field graphql.CollectedField, obj *domain.Question) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Question_responseValueType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResponseValueType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enums.QuestionResponseValueType)
	fc.Result = res
	return ec.marshalNQuestionResponseValueType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐQuestionResponseValueType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Question_responseValueType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Question",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type QuestionResponseValueType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Question_required(ctx context.Context, field graphql.CollectedField, obj *domain.Question) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Question_required(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Required, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Question_required(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Question",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Question_selectMultiple(ctx context.Context, field graphql.CollectedField, obj *domain.Question) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Question_selectMultiple(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelectMultiple, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Question_selectMultiple(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Question",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Question_sequence(ctx context.Context, field graphql.CollectedField, obj *domain.Question) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Question_sequence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sequence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Question_sequence(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Question",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Question_choices(ctx context.Context, field graphql.CollectedField, obj *domain.Question) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Question_choices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Choices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.QuestionInputChoice)
	fc.Result = res
	return ec.marshalOQuestionInputChoice2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐQuestionInputChoice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Question_choices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Question",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_QuestionInputChoice_id(ctx, field)
			case "active":
				return ec.fieldContext_QuestionInputChoice_active(ctx, field)
			case "questionID":
				return ec.fieldContext_QuestionInputChoice_questionID(ctx, field)
			case "choice":
				return ec.fieldContext_QuestionInputChoice_choice(ctx, field)
			case "value":
				return ec.fieldContext_QuestionInputChoice_value(ctx, field)
			case "score":
				return ec.fieldContext_QuestionInputChoice_score(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuestionInputChoice", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionInputChoice_id(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionInputChoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionInputChoice_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionInputChoice_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionInputChoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionInputChoice_active(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionInputChoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionInputChoice_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionInputChoice_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionInputChoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionInputChoice_questionID(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionInputChoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionInputChoice_questionID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuestionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionInputChoice_questionID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionInputChoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionInputChoice_choice(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionInputChoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionInputChoice_choice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Choice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionInputChoice_choice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionInputChoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionInputChoice_value(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionInputChoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionInputChoice_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionInputChoice_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionInputChoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionInputChoice_score(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionInputChoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionInputChoice_score(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionInputChoice_score(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionInputChoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_id(ctx context.Context, field graphql.CollectedField, obj *domain.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_active(ctx context.Context, field graphql.CollectedField, obj *domain.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_name(ctx context.Context, field graphql.CollectedField, obj *domain.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_description(ctx context.Context, field graphql.CollectedField, obj *domain.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_questions(ctx context.Context, field graphql.CollectedField, obj *domain.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_questions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Questions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]domain.Question)
	fc.Result = res
	return ec.marshalNQuestion2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐQuestionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_questions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Question_id(ctx, field)
			case "active":
				return ec.fieldContext_Question_active(ctx, field)
			case "questionnaireID":
				return ec.fieldContext_Question_questionnaireID(ctx, field)
			case "text":
				return ec.fieldContext_Question_text(ctx, field)
			case "questionType":
				return ec.fieldContext_Question_questionType(ctx, field)
			case "responseValueType":
				return ec.fieldContext_Question_responseValueType(ctx, field)
			case "required":
				return ec.fieldContext_Question_required(ctx, field)
			case "selectMultiple":
				return ec.fieldContext_Question_selectMultiple(ctx, field)
			case "sequence":
				return ec.fieldContext_Question_sequence(ctx, field)
			case "choices":
				return ec.fieldContext_Question_choices(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Question", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireScreeningToolQuestionResponse_id(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionnaireScreeningToolQuestionResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireScreeningToolQuestionResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireScreeningToolQuestionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireScreeningToolQuestionResponse_active(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionnaireScreeningToolQuestionResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireScreeningToolQuestionResponse_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireScreeningToolQuestionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireScreeningToolQuestionResponse_screeningToolResponseID(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionnaireScreeningToolQuestionResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_screeningToolResponseID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScreeningToolResponseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireScreeningToolQuestionResponse_screeningToolResponseID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireScreeningToolQuestionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireScreeningToolQuestionResponse_questionID(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionnaireScreeningToolQuestionResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_questionID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuestionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireScreeningToolQuestionResponse_questionID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireScreeningToolQuestionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireScreeningToolQuestionResponse_questionType(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionnaireScreeningToolQuestionResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_questionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuestionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(enums.QuestionType)
	fc.Result = res
	return ec.marshalOQuestionType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐQuestionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireScreeningToolQuestionResponse_questionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireScreeningToolQuestionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type QuestionType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireScreeningToolQuestionResponse_selectMultiple(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionnaireScreeningToolQuestionResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_selectMultiple(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelectMultiple, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireScreeningToolQuestionResponse_selectMultiple(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireScreeningToolQuestionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireScreeningToolQuestionResponse_responseValueType(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionnaireScreeningToolQuestionResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_responseValueType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResponseValueType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(enums.QuestionResponseValueType)
	fc.Result = res
	return ec.marshalOQuestionResponseValueType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐQuestionResponseValueType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireScreeningToolQuestionResponse_responseValueType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireScreeningToolQuestionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type QuestionResponseValueType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireScreeningToolQuestionResponse_sequence(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionnaireScreeningToolQuestionResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_sequence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sequence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireScreeningToolQuestionResponse_sequence(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireScreeningToolQuestionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireScreeningToolQuestionResponse_questionText(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionnaireScreeningToolQuestionResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_questionText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuestionText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireScreeningToolQuestionResponse_questionText(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireScreeningToolQuestionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireScreeningToolQuestionResponse_response(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionnaireScreeningToolQuestionResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_response(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Response, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireScreeningToolQuestionResponse_response(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireScreeningToolQuestionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireScreeningToolQuestionResponse_normalizedResponse(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionnaireScreeningToolQuestionResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_normalizedResponse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NormalizedResponse, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireScreeningToolQuestionResponse_normalizedResponse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireScreeningToolQuestionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireScreeningToolQuestionResponse_score(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionnaireScreeningToolQuestionResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_score(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireScreeningToolQuestionResponse_score(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireScreeningToolQuestionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireScreeningToolResponse_id(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionnaireScreeningToolResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireScreeningToolResponse_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireScreeningToolResponse_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireScreeningToolResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireScreeningToolResponse_active(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionnaireScreeningToolResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireScreeningToolResponse_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireScreeningToolResponse_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireScreeningToolResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireScreeningToolResponse_screeningToolID(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionnaireScreeningToolResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireScreeningToolResponse_screeningToolID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScreeningToolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireScreeningToolResponse_screeningToolID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireScreeningToolResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireScreeningToolResponse_facilityID(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionnaireScreeningToolResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireScreeningToolResponse_facilityID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FacilityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireScreeningToolResponse_facilityID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireScreeningToolResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireScreeningToolResponse_clientID(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionnaireScreeningToolResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireScreeningToolResponse_clientID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireScreeningToolResponse_clientID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireScreeningToolResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireScreeningToolResponse_aggregateScore(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionnaireScreeningToolResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireScreeningToolResponse_aggregateScore(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AggregateScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireScreeningToolResponse_aggregateScore(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireScreeningToolResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireScreeningToolResponse_questionResponses(ctx context.Context, field graphql.CollectedField, obj *domain.QuestionnaireScreeningToolResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireScreeningToolResponse_questionResponses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuestionResponses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.QuestionnaireScreeningToolQuestionResponse)
	fc.Result = res
	return ec.marshalNQuestionnaireScreeningToolQuestionResponse2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐQuestionnaireScreeningToolQuestionResponseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireScreeningToolResponse_questionResponses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireScreeningToolResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_id(ctx, field)
			case "active":
				return ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_active(ctx, field)
			case "screeningToolResponseID":
				return ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_screeningToolResponseID(ctx, field)
			case "questionID":
				return ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_questionID(ctx, field)
			case "questionType":
				return ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_questionType(ctx, field)
			case "selectMultiple":
				return ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_selectMultiple(ctx, field)
			case "responseValueType":
				return ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_responseValueType(ctx, field)
			case "sequence":
				return ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_sequence(ctx, field)
			case "questionText":
				return ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_questionText(ctx, field)
			case "response":
				return ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_response(ctx, field)
			case "normalizedResponse":
				return ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_normalizedResponse(ctx, field)
			case "score":
				return ec.fieldContext_QuestionnaireScreeningToolQuestionResponse_score(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuestionnaireScreeningToolQuestionResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reaction_message_id(ctx context.Context, field graphql.CollectedField, obj *domain.Reaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reaction_message_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reaction_message_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reaction_user_id(ctx context.Context, field graphql.CollectedField, obj *domain.Reaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reaction_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reaction_user_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reaction_type(ctx context.Context, field graphql.CollectedField, obj *domain.Reaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reaction_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reaction_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RecordSecurityQuestionResponse_securityQuestionID(ctx context.Context, field graphql.CollectedField, obj *domain.RecordSecurityQuestionResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RecordSecurityQuestionResponse_securityQuestionID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecurityQuestionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RecordSecurityQuestionResponse_securityQuestionID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RecordSecurityQuestionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RecordSecurityQuestionResponse_isCorrect(ctx context.Context, field graphql.CollectedField, obj *domain.RecordSecurityQuestionResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RecordSecurityQuestionResponse_isCorrect(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCorrect, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RecordSecurityQuestionResponse_isCorrect(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RecordSecurityQuestionResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RequestTypeCount_requestType(ctx context.Context, field graphql.CollectedField, obj *domain.RequestTypeCount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RequestTypeCount_requestType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enums.ServiceRequestType)
	fc.Result = res
	return ec.marshalNServiceRequestType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐServiceRequestType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RequestTypeCount_requestType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RequestTypeCount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ServiceRequestType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RequestTypeCount_total(ctx context.Context, field graphql.CollectedField, obj *domain.RequestTypeCount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RequestTypeCount_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RequestTypeCount_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RequestTypeCount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningTool_id(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningTool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningTool_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningTool_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningTool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningTool_active(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningTool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningTool_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningTool_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningTool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningTool_questionnaireID(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningTool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningTool_questionnaireID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuestionnaireID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningTool_questionnaireID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningTool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningTool_threshold(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningTool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningTool_threshold(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Threshold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningTool_threshold(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningTool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningTool_clientTypes(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningTool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningTool_clientTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]enums.ClientType)
	fc.Result = res
	return ec.marshalOClientType2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningTool_clientTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningTool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ClientType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningTool_genders(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningTool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningTool_genders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Genders, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]enumutils.Gender)
	fc.Result = res
	return ec.marshalOGender2ᚕgithubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningTool_genders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningTool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Gender does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningTool_ageRange(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningTool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningTool_ageRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgeRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.AgeRange)
	fc.Result = res
	return ec.marshalOAgeRange2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAgeRange(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningTool_ageRange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningTool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "lowerBound":
				return ec.fieldContext_AgeRange_lowerBound(ctx, field)
			case "upperBound":
				return ec.fieldContext_AgeRange_upperBound(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AgeRange", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningTool_questionnaire(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningTool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningTool_questionnaire(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Questionnaire, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Questionnaire)
	fc.Result = res
	return ec.marshalOQuestionnaire2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐQuestionnaire(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningTool_questionnaire(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningTool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Questionnaire_id(ctx, field)
			case "active":
				return ec.fieldContext_Questionnaire_active(ctx, field)
			case "name":
				return ec.fieldContext_Questionnaire_name(ctx, field)
			case "description":
				return ec.fieldContext_Questionnaire_description(ctx, field)
			case "questions":
				return ec.fieldContext_Questionnaire_questions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Questionnaire", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolAssessmentResponse_clientName(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolAssessmentResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolAssessmentResponse_clientName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolAssessmentResponse_clientName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolAssessmentResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolAssessmentResponse_dateAnswered(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolAssessmentResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolAssessmentResponse_dateAnswered(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateAnswered, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolAssessmentResponse_dateAnswered(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolAssessmentResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolAssessmentResponse_clientID(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolAssessmentResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolAssessmentResponse_clientID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolAssessmentResponse_clientID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolAssessmentResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolPage_screeningTools(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolPage_screeningTools(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScreeningTools, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.ScreeningTool)
	fc.Result = res
	return ec.marshalNScreeningTool2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningTool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolPage_screeningTools(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ScreeningTool_id(ctx, field)
			case "active":
				return ec.fieldContext_ScreeningTool_active(ctx, field)
			case "questionnaireID":
				return ec.fieldContext_ScreeningTool_questionnaireID(ctx, field)
			case "threshold":
				return ec.fieldContext_ScreeningTool_threshold(ctx, field)
			case "clientTypes":
				return ec.fieldContext_ScreeningTool_clientTypes(ctx, field)
			case "genders":
				return ec.fieldContext_ScreeningTool_genders(ctx, field)
			case "ageRange":
				return ec.fieldContext_ScreeningTool_ageRange(ctx, field)
			case "questionnaire":
				return ec.fieldContext_ScreeningTool_questionnaire(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ScreeningTool", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolPage_pagination(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolPage_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Pagination)
	fc.Result = res
	return ec.marshalNPagination2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolPage_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_Pagination_limit(ctx, field)
			case "currentPage":
				return ec.fieldContext_Pagination_currentPage(ctx, field)
			case "count":
				return ec.fieldContext_Pagination_count(ctx, field)
			case "totalPages":
				return ec.fieldContext_Pagination_totalPages(ctx, field)
			case "nextPage":
				return ec.fieldContext_Pagination_nextPage(ctx, field)
			case "previousPage":
				return ec.fieldContext_Pagination_previousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolQuestion_id(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolQuestion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolQuestion_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolQuestion_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolQuestion_question(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolQuestion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolQuestion_question(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Question, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolQuestion_question(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolQuestion_toolType(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolQuestion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolQuestion_toolType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ToolType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(enums.ScreeningToolType)
	fc.Result = res
	return ec.marshalOScreeningToolType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐScreeningToolType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolQuestion_toolType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ScreeningToolType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolQuestion_responseChoices(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolQuestion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolQuestion_responseChoices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResponseChoices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolQuestion_responseChoices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolQuestion_responseType(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolQuestion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolQuestion_responseType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResponseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(enums.ScreeningToolResponseType)
	fc.Result = res
	return ec.marshalOScreeningToolResponseType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐScreeningToolResponseType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolQuestion_responseType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ScreeningToolResponseType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolQuestion_responseCategory(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolQuestion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolQuestion_responseCategory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResponseCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(enums.ScreeningToolResponseCategory)
	fc.Result = res
	return ec.marshalOScreeningToolResponseCategory2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐScreeningToolResponseCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolQuestion_responseCategory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ScreeningToolResponseCategory does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolQuestion_sequence(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolQuestion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolQuestion_sequence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sequence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolQuestion_sequence(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolQuestion_active(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolQuestion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolQuestion_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolQuestion_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolQuestion_meta(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolQuestion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolQuestion_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolQuestion_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolRespondent_clientID(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolRespondent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolRespondent_clientID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolRespondent_clientID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolRespondent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolRespondent_screeningToolResponseID(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolRespondent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolRespondent_screeningToolResponseID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScreeningToolResponseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolRespondent_screeningToolResponseID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolRespondent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolRespondent_serviceRequestID(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolRespondent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolRespondent_serviceRequestID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceRequestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolRespondent_serviceRequestID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolRespondent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolRespondent_name(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolRespondent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolRespondent_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolRespondent_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolRespondent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolRespondent_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolRespondent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolRespondent_phoneNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolRespondent_phoneNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolRespondent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolRespondent_serviceRequest(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolRespondent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolRespondent_serviceRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceRequest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolRespondent_serviceRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolRespondent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolRespondentsPage_screeningToolRespondents(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolRespondentsPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolRespondentsPage_screeningToolRespondents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScreeningToolRespondents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.ScreeningToolRespondent)
	fc.Result = res
	return ec.marshalNScreeningToolRespondent2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolRespondent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolRespondentsPage_screeningToolRespondents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolRespondentsPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "clientID":
				return ec.fieldContext_ScreeningToolRespondent_clientID(ctx, field)
			case "screeningToolResponseID":
				return ec.fieldContext_ScreeningToolRespondent_screeningToolResponseID(ctx, field)
			case "serviceRequestID":
				return ec.fieldContext_ScreeningToolRespondent_serviceRequestID(ctx, field)
			case "name":
				return ec.fieldContext_ScreeningToolRespondent_name(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_ScreeningToolRespondent_phoneNumber(ctx, field)
			case "serviceRequest":
				return ec.fieldContext_ScreeningToolRespondent_serviceRequest(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ScreeningToolRespondent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolRespondentsPage_pagination(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolRespondentsPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolRespondentsPage_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Pagination)
	fc.Result = res
	return ec.marshalNPagination2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolRespondentsPage_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolRespondentsPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_Pagination_limit(ctx, field)
			case "currentPage":
				return ec.fieldContext_Pagination_currentPage(ctx, field)
			case "count":
				return ec.fieldContext_Pagination_count(ctx, field)
			case "totalPages":
				return ec.fieldContext_Pagination_totalPages(ctx, field)
			case "nextPage":
				return ec.fieldContext_Pagination_nextPage(ctx, field)
			case "previousPage":
				return ec.fieldContext_Pagination_previousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolResponse_toolIndex(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolResponse_toolIndex(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ToolIndex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolResponse_toolIndex(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolResponse_tool(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolResponse_tool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolResponse_tool(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolResponse_response(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolResponse_response(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Response, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolResponse_response(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolResponsePayload_serviceRequestID(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolResponsePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolResponsePayload_serviceRequestID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceRequestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolResponsePayload_serviceRequestID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolResponsePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolResponsePayload_clientContact(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolResponsePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolResponsePayload_clientContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientContact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolResponsePayload_clientContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolResponsePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScreeningToolResponsePayload_screeningToolResponses(ctx context.Context, field graphql.CollectedField, obj *domain.ScreeningToolResponsePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScreeningToolResponsePayload_screeningToolResponses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScreeningToolResponses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.ScreeningToolResponse)
	fc.Result = res
	return ec.marshalNScreeningToolResponse2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolResponseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScreeningToolResponsePayload_screeningToolResponses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScreeningToolResponsePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "toolIndex":
				return ec.fieldContext_ScreeningToolResponse_toolIndex(ctx, field)
			case "tool":
				return ec.fieldContext_ScreeningToolResponse_tool(ctx, field)
			case "response":
				return ec.fieldContext_ScreeningToolResponse_response(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ScreeningToolResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SecurityQuestion_securityQuestionID(ctx context.Context, field graphql.CollectedField, obj *domain.SecurityQuestion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SecurityQuestion_securityQuestionID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecurityQuestionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SecurityQuestion_securityQuestionID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SecurityQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SecurityQuestion_questionStem(ctx context.Context, field graphql.CollectedField, obj *domain.SecurityQuestion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SecurityQuestion_questionStem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuestionStem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SecurityQuestion_questionStem(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SecurityQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SecurityQuestion_description(ctx context.Context, field graphql.CollectedField, obj *domain.SecurityQuestion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SecurityQuestion_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SecurityQuestion_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SecurityQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SecurityQuestion_active(ctx context.Context, field graphql.CollectedField, obj *domain.SecurityQuestion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SecurityQuestion_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SecurityQuestion_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SecurityQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SecurityQuestion_responseType(ctx context.Context, field graphql.CollectedField, obj *domain.SecurityQuestion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SecurityQuestion_responseType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResponseType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(enums.SecurityQuestionResponseType)
	fc.Result = res
	return ec.marshalNSecurityQuestionResponseType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐSecurityQuestionResponseType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SecurityQuestion_responseType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SecurityQuestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SecurityQuestionResponseType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceRequest_id(ctx context.Context, field graphql.CollectedField, obj *domain.ServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceRequest_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceRequest_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceRequest_requestType(ctx context.Context, field graphql.CollectedField, obj *domain.ServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceRequest_requestType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceRequest_requestType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceRequest_request(ctx context.Context, field graphql.CollectedField, obj *domain.ServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceRequest_request(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Request, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceRequest_request(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceRequest_status(ctx context.Context, field graphql.CollectedField, obj *domain.ServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceRequest_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceRequest_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceRequest_clientID(ctx context.Context, field graphql.CollectedField, obj *domain.ServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceRequest_clientID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceRequest_clientID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceRequest_staffID(ctx context.Context, field graphql.CollectedField, obj *domain.ServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceRequest_staffID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StaffID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceRequest_staffID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceRequest_createdAt(ctx context.Context, field graphql.CollectedField, obj *domain.ServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceRequest_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceRequest_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceRequest_inProgressAt(ctx context.Context, field graphql.CollectedField, obj *domain.ServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceRequest_inProgressAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InProgressAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceRequest_inProgressAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceRequest_inProgressBy(ctx context.Context, field graphql.CollectedField, obj *domain.ServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceRequest_inProgressBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InProgressBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceRequest_inProgressBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceRequest_resolvedAt(ctx context.Context, field graphql.CollectedField, obj *domain.ServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceRequest_resolvedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResolvedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceRequest_resolvedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceRequest_resolvedBy(ctx context.Context, field graphql.CollectedField, obj *domain.ServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceRequest_resolvedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResolvedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceRequest_resolvedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceRequest_resolvedByName(ctx context.Context, field graphql.CollectedField, obj *domain.ServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceRequest_resolvedByName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResolvedByName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceRequest_resolvedByName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceRequest_facilityID(ctx context.Context, field graphql.CollectedField, obj *domain.ServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceRequest_facilityID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FacilityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceRequest_facilityID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceRequest_clientName(ctx context.Context, field graphql.CollectedField, obj *domain.ServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceRequest_clientName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceRequest_clientName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceRequest_staffName(ctx context.Context, field graphql.CollectedField, obj *domain.ServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceRequest_staffName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StaffName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceRequest_staffName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceRequest_staffContact(ctx context.Context, field graphql.CollectedField, obj *domain.ServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceRequest_staffContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StaffContact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceRequest_staffContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceRequest_clientContact(ctx context.Context, field graphql.CollectedField, obj *domain.ServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceRequest_clientContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientContact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceRequest_clientContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceRequest_meta(ctx context.Context, field graphql.CollectedField, obj *domain.ServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceRequest_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceRequest_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceRequestsCount_requestsTypeCount(ctx context.Context, field graphql.CollectedField, obj *domain.ServiceRequestsCount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceRequestsCount_requestsTypeCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestsTypeCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.RequestTypeCount)
	fc.Result = res
	return ec.marshalNRequestTypeCount2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐRequestTypeCountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceRequestsCount_requestsTypeCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceRequestsCount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "requestType":
				return ec.fieldContext_RequestTypeCount_requestType(ctx, field)
			case "total":
				return ec.fieldContext_RequestTypeCount_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RequestTypeCount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceRequestsCountResponse_clientsServiceRequestCount(ctx context.Context, field graphql.CollectedField, obj *domain.ServiceRequestsCountResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceRequestsCountResponse_clientsServiceRequestCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientsServiceRequestCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.ServiceRequestsCount)
	fc.Result = res
	return ec.marshalNServiceRequestsCount2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐServiceRequestsCount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceRequestsCountResponse_clientsServiceRequestCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceRequestsCountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "requestsTypeCount":
				return ec.fieldContext_ServiceRequestsCount_requestsTypeCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ServiceRequestsCount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceRequestsCountResponse_staffServiceRequestCount(ctx context.Context, field graphql.CollectedField, obj *domain.ServiceRequestsCountResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceRequestsCountResponse_staffServiceRequestCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StaffServiceRequestCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.ServiceRequestsCount)
	fc.Result = res
	return ec.marshalNServiceRequestsCount2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐServiceRequestsCount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceRequestsCountResponse_staffServiceRequestCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceRequestsCountResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "requestsTypeCount":
				return ec.fieldContext_ServiceRequestsCount_requestsTypeCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ServiceRequestsCount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Spam_flag(ctx context.Context, field graphql.CollectedField, obj *domain.Spam) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Spam_flag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Flag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Spam_flag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Spam",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Spam_block(ctx context.Context, field graphql.CollectedField, obj *domain.Spam) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Spam_block(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Block, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Spam_block(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Spam",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffProfile_id(ctx context.Context, field graphql.CollectedField, obj *domain.StaffProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffProfile_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffProfile_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffProfile_user(ctx context.Context, field graphql.CollectedField, obj *domain.StaffProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffProfile_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffProfile_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "active":
				return ec.fieldContext_User_active(ctx, field)
			case "contacts":
				return ec.fieldContext_User_contacts(ctx, field)
			case "isPhoneVerified":
				return ec.fieldContext_User_isPhoneVerified(ctx, field)
			case "termsAccepted":
				return ec.fieldContext_User_termsAccepted(ctx, field)
			case "acceptedTermsID":
				return ec.fieldContext_User_acceptedTermsID(ctx, field)
			case "suspended":
				return ec.fieldContext_User_suspended(ctx, field)
			case "dateOfBirth":
				return ec.fieldContext_User_dateOfBirth(ctx, field)
			case "currentOrganizationID":
				return ec.fieldContext_User_currentOrganizationID(ctx, field)
			case "currentProgramID":
				return ec.fieldContext_User_currentProgramID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffProfile_userID(ctx context.Context, field graphql.CollectedField, obj *domain.StaffProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffProfile_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffProfile_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffProfile_active(ctx context.Context, field graphql.CollectedField, obj *domain.StaffProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffProfile_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffProfile_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffProfile_staffNumber(ctx context.Context, field graphql.CollectedField, obj *domain.StaffProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffProfile_staffNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StaffNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffProfile_staffNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffProfile_defaultFacility(ctx context.Context, field graphql.CollectedField, obj *domain.StaffProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffProfile_defaultFacility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultFacility, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Facility)
	fc.Result = res
	return ec.marshalNFacility2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacility(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffProfile_defaultFacility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Facility_id(ctx, field)
			case "name":
				return ec.fieldContext_Facility_name(ctx, field)
			case "phone":
				return ec.fieldContext_Facility_phone(ctx, field)
			case "active":
				return ec.fieldContext_Facility_active(ctx, field)
			case "country":
				return ec.fieldContext_Facility_country(ctx, field)
			case "description":
				return ec.fieldContext_Facility_description(ctx, field)
			case "fhirOrganisationID":
				return ec.fieldContext_Facility_fhirOrganisationID(ctx, field)
			case "identifier":
				return ec.fieldContext_Facility_identifier(ctx, field)
			case "workStationDetails":
				return ec.fieldContext_Facility_workStationDetails(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Facility", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffRegistrationOutput_id(ctx context.Context, field graphql.CollectedField, obj *dto.StaffRegistrationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffRegistrationOutput_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffRegistrationOutput_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffRegistrationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffRegistrationOutput_active(ctx context.Context, field graphql.CollectedField, obj *dto.StaffRegistrationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffRegistrationOutput_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffRegistrationOutput_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffRegistrationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffRegistrationOutput_staffNumber(ctx context.Context, field graphql.CollectedField, obj *dto.StaffRegistrationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffRegistrationOutput_staffNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StaffNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffRegistrationOutput_staffNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffRegistrationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffRegistrationOutput_userID(ctx context.Context, field graphql.CollectedField, obj *dto.StaffRegistrationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffRegistrationOutput_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffRegistrationOutput_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffRegistrationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffRegistrationOutput_defaultFacility(ctx context.Context, field graphql.CollectedField, obj *dto.StaffRegistrationOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffRegistrationOutput_defaultFacility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultFacility, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffRegistrationOutput_defaultFacility(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffRegistrationOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffResponse_staffProfile(ctx context.Context, field graphql.CollectedField, obj *domain.StaffResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffResponse_staffProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StaffProfile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.StaffProfile)
	fc.Result = res
	return ec.marshalNStaffProfile2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐStaffProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffResponse_staffProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StaffProfile_id(ctx, field)
			case "user":
				return ec.fieldContext_StaffProfile_user(ctx, field)
			case "userID":
				return ec.fieldContext_StaffProfile_userID(ctx, field)
			case "active":
				return ec.fieldContext_StaffProfile_active(ctx, field)
			case "staffNumber":
				return ec.fieldContext_StaffProfile_staffNumber(ctx, field)
			case "defaultFacility":
				return ec.fieldContext_StaffProfile_defaultFacility(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StaffProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffResponse_roles(ctx context.Context, field graphql.CollectedField, obj *domain.StaffResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffResponse_roles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.AuthorityRole)
	fc.Result = res
	return ec.marshalOAuthorityRole2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAuthorityRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffResponse_roles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "authorityRoleID":
				return ec.fieldContext_AuthorityRole_authorityRoleID(ctx, field)
			case "name":
				return ec.fieldContext_AuthorityRole_name(ctx, field)
			case "active":
				return ec.fieldContext_AuthorityRole_active(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthorityRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffResponse_permissions(ctx context.Context, field graphql.CollectedField, obj *domain.StaffResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffResponse_permissions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Permissions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.AuthorityPermission)
	fc.Result = res
	return ec.marshalOAuthorityPermission2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAuthorityPermissionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffResponse_permissions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "permissionID":
				return ec.fieldContext_AuthorityPermission_permissionID(ctx, field)
			case "active":
				return ec.fieldContext_AuthorityPermission_active(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthorityPermission", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StaffResponse_communityToken(ctx context.Context, field graphql.CollectedField, obj *domain.StaffResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StaffResponse_communityToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunityToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StaffResponse_communityToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StaffResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyForm_projectID(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyForm_projectID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyForm_projectID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyForm_xmlFormID(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyForm_xmlFormID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XMLFormID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyForm_xmlFormID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyForm_name(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyForm_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyForm_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyRespondent_id(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyRespondent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyRespondent_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyRespondent_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyRespondent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyRespondent_name(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyRespondent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyRespondent_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyRespondent_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyRespondent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyRespondent_submittedAt(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyRespondent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyRespondent_submittedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmittedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyRespondent_submittedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyRespondent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyRespondent_projectID(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyRespondent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyRespondent_projectID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyRespondent_projectID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyRespondent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyRespondent_submitterID(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyRespondent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyRespondent_submitterID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyRespondent_submitterID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyRespondent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyRespondent_formID(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyRespondent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyRespondent_formID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FormID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyRespondent_formID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyRespondent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyRespondentPage_surveyRespondents(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyRespondentPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyRespondentPage_surveyRespondents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SurveyRespondents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.SurveyRespondent)
	fc.Result = res
	return ec.marshalNSurveyRespondent2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSurveyRespondent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyRespondentPage_surveyRespondents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyRespondentPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SurveyRespondent_id(ctx, field)
			case "name":
				return ec.fieldContext_SurveyRespondent_name(ctx, field)
			case "submittedAt":
				return ec.fieldContext_SurveyRespondent_submittedAt(ctx, field)
			case "projectID":
				return ec.fieldContext_SurveyRespondent_projectID(ctx, field)
			case "submitterID":
				return ec.fieldContext_SurveyRespondent_submitterID(ctx, field)
			case "formID":
				return ec.fieldContext_SurveyRespondent_formID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SurveyRespondent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyRespondentPage_pagination(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyRespondentPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyRespondentPage_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Pagination)
	fc.Result = res
	return ec.marshalNPagination2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyRespondentPage_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyRespondentPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_Pagination_limit(ctx, field)
			case "currentPage":
				return ec.fieldContext_Pagination_currentPage(ctx, field)
			case "count":
				return ec.fieldContext_Pagination_count(ctx, field)
			case "totalPages":
				return ec.fieldContext_Pagination_totalPages(ctx, field)
			case "nextPage":
				return ec.fieldContext_Pagination_nextPage(ctx, field)
			case "previousPage":
				return ec.fieldContext_Pagination_previousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyResponse_question(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyResponse_question(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Question, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyResponse_question(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyResponse_answer(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyResponse_answer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyResponse_answer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyResponse_questionType(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyResponse_questionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuestionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyResponse_questionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyServiceRequestUser_name(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyServiceRequestUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyServiceRequestUser_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyServiceRequestUser_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyServiceRequestUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyServiceRequestUser_formID(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyServiceRequestUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyServiceRequestUser_formID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FormID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyServiceRequestUser_formID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyServiceRequestUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyServiceRequestUser_projectID(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyServiceRequestUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyServiceRequestUser_projectID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyServiceRequestUser_projectID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyServiceRequestUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyServiceRequestUser_submitterID(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyServiceRequestUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyServiceRequestUser_submitterID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmitterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyServiceRequestUser_submitterID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyServiceRequestUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyServiceRequestUser_surveyName(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyServiceRequestUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyServiceRequestUser_surveyName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SurveyName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyServiceRequestUser_surveyName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyServiceRequestUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyServiceRequestUser_serviceRequestID(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyServiceRequestUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyServiceRequestUser_serviceRequestID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceRequestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyServiceRequestUser_serviceRequestID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyServiceRequestUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyServiceRequestUser_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyServiceRequestUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyServiceRequestUser_phoneNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyServiceRequestUser_phoneNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyServiceRequestUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyServiceRequestUserPage_users(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyServiceRequestUserPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyServiceRequestUserPage_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.SurveyServiceRequestUser)
	fc.Result = res
	return ec.marshalNSurveyServiceRequestUser2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSurveyServiceRequestUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyServiceRequestUserPage_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyServiceRequestUserPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_SurveyServiceRequestUser_name(ctx, field)
			case "formID":
				return ec.fieldContext_SurveyServiceRequestUser_formID(ctx, field)
			case "projectID":
				return ec.fieldContext_SurveyServiceRequestUser_projectID(ctx, field)
			case "submitterID":
				return ec.fieldContext_SurveyServiceRequestUser_submitterID(ctx, field)
			case "surveyName":
				return ec.fieldContext_SurveyServiceRequestUser_surveyName(ctx, field)
			case "serviceRequestID":
				return ec.fieldContext_SurveyServiceRequestUser_serviceRequestID(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_SurveyServiceRequestUser_phoneNumber(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SurveyServiceRequestUser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveyServiceRequestUserPage_pagination(ctx context.Context, field graphql.CollectedField, obj *domain.SurveyServiceRequestUserPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveyServiceRequestUserPage_pagination(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pagination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Pagination)
	fc.Result = res
	return ec.marshalNPagination2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐPagination(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveyServiceRequestUserPage_pagination(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveyServiceRequestUserPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_Pagination_limit(ctx, field)
			case "currentPage":
				return ec.fieldContext_Pagination_currentPage(ctx, field)
			case "count":
				return ec.fieldContext_Pagination_count(ctx, field)
			case "totalPages":
				return ec.fieldContext_Pagination_totalPages(ctx, field)
			case "nextPage":
				return ec.fieldContext_Pagination_nextPage(ctx, field)
			case "previousPage":
				return ec.fieldContext_Pagination_previousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Pagination", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveysWithServiceRequest_title(ctx context.Context, field graphql.CollectedField, obj *dto.SurveysWithServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveysWithServiceRequest_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveysWithServiceRequest_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveysWithServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveysWithServiceRequest_projectID(ctx context.Context, field graphql.CollectedField, obj *dto.SurveysWithServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveysWithServiceRequest_projectID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveysWithServiceRequest_projectID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveysWithServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveysWithServiceRequest_formID(ctx context.Context, field graphql.CollectedField, obj *dto.SurveysWithServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveysWithServiceRequest_formID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FormID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveysWithServiceRequest_formID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveysWithServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SurveysWithServiceRequest_linkID(ctx context.Context, field graphql.CollectedField, obj *dto.SurveysWithServiceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SurveysWithServiceRequest_linkID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SurveysWithServiceRequest_linkID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SurveysWithServiceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TermsOfService_termsID(ctx context.Context, field graphql.CollectedField, obj *domain.TermsOfService) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TermsOfService_termsID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TermsID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TermsOfService_termsID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TermsOfService",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TermsOfService_text(ctx context.Context, field graphql.CollectedField, obj *domain.TermsOfService) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TermsOfService_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TermsOfService_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TermsOfService",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Toxic_flag(ctx context.Context, field graphql.CollectedField, obj *domain.Toxic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Toxic_flag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Flag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Toxic_flag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Toxic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Toxic_block(ctx context.Context, field graphql.CollectedField, obj *domain.Toxic) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Toxic_block(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Block, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Toxic_block(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Toxic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_username(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_username(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_name(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_gender(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_gender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(enumutils.Gender)
	fc.Result = res
	return ec.marshalOGender2githubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_gender(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Gender does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_active(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_contacts(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_contacts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contacts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_contacts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "contactType":
				return ec.fieldContext_Contact_contactType(ctx, field)
			case "contactValue":
				return ec.fieldContext_Contact_contactValue(ctx, field)
			case "active":
				return ec.fieldContext_Contact_active(ctx, field)
			case "optedIn":
				return ec.fieldContext_Contact_optedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_isPhoneVerified(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_isPhoneVerified(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPhoneVerified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_isPhoneVerified(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_termsAccepted(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_termsAccepted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TermsAccepted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_termsAccepted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_acceptedTermsID(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_acceptedTermsID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AcceptedTermsID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_acceptedTermsID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_suspended(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_suspended(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suspended, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_suspended(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_dateOfBirth(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_dateOfBirth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateOfBirth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_dateOfBirth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_currentOrganizationID(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_currentOrganizationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentOrganizationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_currentOrganizationID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_currentProgramID(ctx context.Context, field graphql.CollectedField, obj *domain.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_currentProgramID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentProgramID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_currentProgramID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSurvey_id(ctx context.Context, field graphql.CollectedField, obj *domain.UserSurvey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSurvey_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSurvey_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSurvey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSurvey_active(ctx context.Context, field graphql.CollectedField, obj *domain.UserSurvey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSurvey_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSurvey_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSurvey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSurvey_created(ctx context.Context, field graphql.CollectedField, obj *domain.UserSurvey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSurvey_created(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSurvey_created(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSurvey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSurvey_link(ctx context.Context, field graphql.CollectedField, obj *domain.UserSurvey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSurvey_link(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Link, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSurvey_link(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSurvey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSurvey_title(ctx context.Context, field graphql.CollectedField, obj *domain.UserSurvey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSurvey_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSurvey_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSurvey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSurvey_description(ctx context.Context, field graphql.CollectedField, obj *domain.UserSurvey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSurvey_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSurvey_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSurvey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSurvey_hasSubmitted(ctx context.Context, field graphql.CollectedField, obj *domain.UserSurvey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSurvey_hasSubmitted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasSubmitted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSurvey_hasSubmitted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSurvey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSurvey_userID(ctx context.Context, field graphql.CollectedField, obj *domain.UserSurvey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSurvey_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSurvey_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSurvey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSurvey_token(ctx context.Context, field graphql.CollectedField, obj *domain.UserSurvey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSurvey_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSurvey_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSurvey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSurvey_projectID(ctx context.Context, field graphql.CollectedField, obj *domain.UserSurvey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSurvey_projectID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSurvey_projectID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSurvey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSurvey_formID(ctx context.Context, field graphql.CollectedField, obj *domain.UserSurvey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSurvey_formID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FormID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSurvey_formID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSurvey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSurvey_linkID(ctx context.Context, field graphql.CollectedField, obj *domain.UserSurvey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSurvey_linkID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSurvey_linkID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSurvey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSurvey_programID(ctx context.Context, field graphql.CollectedField, obj *domain.UserSurvey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSurvey_programID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProgramID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSurvey_programID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSurvey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSurvey_organisationID(ctx context.Context, field graphql.CollectedField, obj *domain.UserSurvey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSurvey_organisationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganisationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSurvey_organisationID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSurvey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WorkStationDetails_notifications(ctx context.Context, field graphql.CollectedField, obj *domain.WorkStationDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WorkStationDetails_notifications(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notifications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WorkStationDetails_notifications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WorkStationDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WorkStationDetails_surveys(ctx context.Context, field graphql.CollectedField, obj *domain.WorkStationDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WorkStationDetails_surveys(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Surveys, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WorkStationDetails_surveys(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WorkStationDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WorkStationDetails_articles(ctx context.Context, field graphql.CollectedField, obj *domain.WorkStationDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WorkStationDetails_articles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Articles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WorkStationDetails_articles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WorkStationDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WorkStationDetails_messages(ctx context.Context, field graphql.CollectedField, obj *domain.WorkStationDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WorkStationDetails_messages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Messages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WorkStationDetails_messages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WorkStationDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WorkStationDetails_serviceRequests(ctx context.Context, field graphql.CollectedField, obj *domain.WorkStationDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WorkStationDetails_serviceRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceRequests, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WorkStationDetails_serviceRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WorkStationDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __Service_sdl(ctx context.Context, field graphql.CollectedField, obj *fedruntime.Service) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__Service_sdl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SDL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__Service_sdl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_Service",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAgeRangeInput(ctx context.Context, obj interface{}) (dto.AgeRangeInput, error) {
	var it dto.AgeRangeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"lowerBound", "upperBound"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "lowerBound":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lowerBound"))
			it.LowerBound, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "upperBound":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("upperBound"))
			it.UpperBound, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCaregiverInput(ctx context.Context, obj interface{}) (dto.CaregiverInput, error) {
	var it dto.CaregiverInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"username", "name", "gender", "dateOfBirth", "phoneNumber", "caregiverNumber", "sendInvite", "assignedClients"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			it.Username, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalNGender2githubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateOfBirth":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateOfBirth"))
			it.DateOfBirth, err = ec.unmarshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			it.PhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "caregiverNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("caregiverNumber"))
			it.CaregiverNumber, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sendInvite":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sendInvite"))
			it.SendInvite, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignedClients":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignedClients"))
			it.AssignedClients, err = ec.unmarshalOClientCaregiverInput2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐClientCaregiverInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputClientCaregiverInput(ctx context.Context, obj interface{}) (dto.ClientCaregiverInput, error) {
	var it dto.ClientCaregiverInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"clientID", "caregiverID", "caregiverType"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "clientID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
			it.ClientID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "caregiverID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("caregiverID"))
			it.CaregiverID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "caregiverType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("caregiverType"))
			it.CaregiverType, err = ec.unmarshalNCaregiverType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐCaregiverType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputClientFilterParamsInput(ctx context.Context, obj interface{}) (dto.ClientFilterParamsInput, error) {
	var it dto.ClientFilterParamsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"clientTypes", "ageRange", "gender"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "clientTypes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientTypes"))
			it.ClientTypes, err = ec.unmarshalOClientType2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientType(ctx, v)
			if err != nil {
				return it, err
			}
		case "ageRange":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ageRange"))
			it.AgeRange, err = ec.unmarshalOAgeRangeInput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐAgeRangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalOGender2ᚕgithubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputClientRegistrationInput(ctx context.Context, obj interface{}) (dto.ClientRegistrationInput, error) {
	var it dto.ClientRegistrationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"username", "facility", "clientTypes", "clientName", "gender", "dateOfBirth", "phoneNumber", "enrollmentDate", "cccNumber", "counselled", "inviteClient", "programID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			it.Username, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "facility":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facility"))
			it.Facility, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientTypes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientTypes"))
			it.ClientTypes, err = ec.unmarshalNClientType2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientName"))
			it.ClientName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalNGender2githubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateOfBirth":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateOfBirth"))
			it.DateOfBirth, err = ec.unmarshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			it.PhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enrollmentDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enrollmentDate"))
			it.EnrollmentDate, err = ec.unmarshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "cccNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cccNumber"))
			it.CCCNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "counselled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("counselled"))
			it.Counselled, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "inviteClient":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inviteClient"))
			it.InviteClient, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "programID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("programID"))
			it.ProgramID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommunityInput(ctx context.Context, obj interface{}) (dto.CommunityInput, error) {
	var it dto.CommunityInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "ageRange", "gender", "clientType", "inviteOnly"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "ageRange":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ageRange"))
			it.AgeRange, err = ec.unmarshalOAgeRangeInput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐAgeRangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalNGender2ᚕᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐGenderᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientType"))
			it.ClientType, err = ec.unmarshalNClientType2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "inviteOnly":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inviteOnly"))
			it.InviteOnly, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputExistingUserClientInput(ctx context.Context, obj interface{}) (dto.ExistingUserClientInput, error) {
	var it dto.ExistingUserClientInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"facilityID", "clientTypes", "enrollmentDate", "cccNumber", "counselled", "inviteClient", "userID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "facilityID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityID"))
			it.FacilityID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientTypes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientTypes"))
			it.ClientTypes, err = ec.unmarshalNClientType2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "enrollmentDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enrollmentDate"))
			it.EnrollmentDate, err = ec.unmarshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "cccNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cccNumber"))
			it.CCCNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "counselled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("counselled"))
			it.Counselled, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "inviteClient":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inviteClient"))
			it.InviteClient, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "userID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			it.UserID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputExistingUserStaffInput(ctx context.Context, obj interface{}) (dto.ExistingUserStaffInput, error) {
	var it dto.ExistingUserStaffInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"facilityID", "idNumber", "staffNumber", "staffRoles", "inviteStaff", "userID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "facilityID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityID"))
			it.FacilityID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNumber"))
			it.IDNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffNumber"))
			it.StaffNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffRoles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffRoles"))
			it.StaffRoles, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "inviteStaff":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inviteStaff"))
			it.InviteStaff, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "userID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFacilityIdentifierInput(ctx context.Context, obj interface{}) (dto.FacilityIdentifierInput, error) {
	var it dto.FacilityIdentifierInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "value", "facilityID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNFacilityIdentifierType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐFacilityIdentifierType(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "facilityID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityID"))
			it.FacilityID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFacilityInput(ctx context.Context, obj interface{}) (dto.FacilityInput, error) {
	var it dto.FacilityInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "phone", "active", "country", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			it.Active, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFeedbackResponseInput(ctx context.Context, obj interface{}) (dto.FeedbackResponseInput, error) {
	var it dto.FeedbackResponseInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userID", "feedbackType", "satisfactionLevel", "serviceName", "feedback", "requiresFollowUp"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedbackType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedbackType"))
			it.FeedbackType, err = ec.unmarshalNFeedbackType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐFeedbackType(ctx, v)
			if err != nil {
				return it, err
			}
		case "satisfactionLevel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("satisfactionLevel"))
			it.SatisfactionLevel, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "serviceName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceName"))
			it.ServiceName, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback"))
			it.Feedback, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "requiresFollowUp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requiresFollowUp"))
			it.RequiresFollowUp, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFilterParam(ctx context.Context, obj interface{}) (firebasetools.FilterParam, error) {
	var it firebasetools.FilterParam
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"fieldName", "fieldType", "comparisonOperation", "fieldValue"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "fieldName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldName"))
			it.FieldName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fieldType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldType"))
			it.FieldType, err = ec.unmarshalNFieldType2githubᚗcomᚋsavannahghiᚋenumutilsᚐFieldType(ctx, v)
			if err != nil {
				return it, err
			}
		case "comparisonOperation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comparisonOperation"))
			it.ComparisonOperation, err = ec.unmarshalNOperation2githubᚗcomᚋsavannahghiᚋenumutilsᚐOperation(ctx, v)
			if err != nil {
				return it, err
			}
		case "fieldValue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldValue"))
			it.FieldValue, err = ec.unmarshalNAny2interface(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFiltersInput(ctx context.Context, obj interface{}) (dto.FiltersInput, error) {
	var it dto.FiltersInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"dataType", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "dataType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataType"))
			it.DataType, err = ec.unmarshalOFilterSortDataType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐFilterSortDataType(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFirebaseSimpleNotificationInput(ctx context.Context, obj interface{}) (firebasetools.FirebaseSimpleNotificationInput, error) {
	var it firebasetools.FirebaseSimpleNotificationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "body", "imageURL", "data"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "body":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("body"))
			it.Body, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "imageURL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imageURL"))
			it.ImageURL, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOMap2map(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMetricInput(ctx context.Context, obj interface{}) (domain.Metric, error) {
	var it domain.Metric
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userID", "type", "event"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			it.UserID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNMetricType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐMetricType(ctx, v)
			if err != nil {
				return it, err
			}
		case "event":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event"))
			it.Event, err = ec.unmarshalNMap2map(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNotificationFilters(ctx context.Context, obj interface{}) (domain.NotificationFilters, error) {
	var it domain.NotificationFilters
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"isRead", "notificationTypes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "isRead":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isRead"))
			it.IsRead, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "notificationTypes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notificationTypes"))
			it.NotificationTypes, err = ec.unmarshalONotificationType2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐNotificationTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganisationInput(ctx context.Context, obj interface{}) (dto.OrganisationInput, error) {
	var it dto.OrganisationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"organisationCode", "name", "description", "emailAddress", "phoneNumber", "postalAddress", "physicalAddress", "defaultCountry"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "organisationCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organisationCode"))
			it.OrganisationCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailAddress"))
			it.EmailAddress, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			it.PhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "postalAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalAddress"))
			it.PostalAddress, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "physicalAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("physicalAddress"))
			it.PhysicalAddress, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "defaultCountry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultCountry"))
			it.DefaultCountry, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPINInput(ctx context.Context, obj interface{}) (dto.PINInput, error) {
	var it dto.PINInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userID", "pin", "confirmPIN", "flavour"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			it.UserID, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pin"))
			it.PIN, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "confirmPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("confirmPIN"))
			it.ConfirmPIN, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "flavour":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
			it.Flavour, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaginationsInput(ctx context.Context, obj interface{}) (dto.PaginationsInput, error) {
	var it dto.PaginationsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"limit", "currentPage", "sort"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "currentPage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentPage"))
			it.CurrentPage, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
			it.Sort, err = ec.unmarshalOSortsInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐSortsInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProgramInput(ctx context.Context, obj interface{}) (dto.ProgramInput, error) {
	var it dto.ProgramInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "organisationID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "organisationID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organisationID"))
			it.OrganisationID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQueryOption(ctx context.Context, obj interface{}) (stream_chat.QueryOption, error) {
	var it stream_chat.QueryOption
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"filter", "sort", "userID", "limit", "offset", "messageLimit", "memberLimit"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalOMap2map(ctx, v)
			if err != nil {
				return it, err
			}
		case "sort":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
			it.Sort, err = ec.unmarshalOSortOption2ᚕᚖgithubᚗcomᚋGetStreamᚋstreamᚑchatᚑgoᚋv5ᚐSortOptionᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "userID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			it.UserID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
			it.Offset, err = ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "messageLimit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageLimit"))
			it.MessageLimit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "memberLimit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberLimit"))
			it.MemberLimit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQuestionInput(ctx context.Context, obj interface{}) (dto.QuestionInput, error) {
	var it dto.QuestionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"text", "questionType", "responseValueType", "required", "selectMultiple", "sequence", "choices"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			it.Text, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "questionType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("questionType"))
			it.QuestionType, err = ec.unmarshalNQuestionType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐQuestionType(ctx, v)
			if err != nil {
				return it, err
			}
		case "responseValueType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("responseValueType"))
			it.ResponseValueType, err = ec.unmarshalNQuestionResponseValueType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐQuestionResponseValueType(ctx, v)
			if err != nil {
				return it, err
			}
		case "required":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("required"))
			it.Required, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "selectMultiple":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("selectMultiple"))
			it.SelectMultiple, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "sequence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sequence"))
			it.Sequence, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "choices":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("choices"))
			it.Choices, err = ec.unmarshalOQuestionInputChoiceInput2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐQuestionInputChoiceInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQuestionInputChoiceInput(ctx context.Context, obj interface{}) (dto.QuestionInputChoiceInput, error) {
	var it dto.QuestionInputChoiceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"choice", "value", "score"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "choice":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("choice"))
			it.Choice, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQuestionnaireInput(ctx context.Context, obj interface{}) (dto.QuestionnaireInput, error) {
	var it dto.QuestionnaireInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "questions"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "questions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("questions"))
			it.Questions, err = ec.unmarshalNQuestionInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐQuestionInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQuestionnaireScreeningToolQuestionResponseInput(ctx context.Context, obj interface{}) (dto.QuestionnaireScreeningToolQuestionResponseInput, error) {
	var it dto.QuestionnaireScreeningToolQuestionResponseInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"questionID", "response"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "questionID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("questionID"))
			it.QuestionID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "response":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("response"))
			it.Response, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQuestionnaireScreeningToolResponseInput(ctx context.Context, obj interface{}) (dto.QuestionnaireScreeningToolResponseInput, error) {
	var it dto.QuestionnaireScreeningToolResponseInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"screeningToolID", "clientID", "questionResponses"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "screeningToolID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("screeningToolID"))
			it.ScreeningToolID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
			it.ClientID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "questionResponses":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("questionResponses"))
			it.QuestionResponses, err = ec.unmarshalNQuestionnaireScreeningToolQuestionResponseInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐQuestionnaireScreeningToolQuestionResponseInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputScreeningToolInput(ctx context.Context, obj interface{}) (dto.ScreeningToolInput, error) {
	var it dto.ScreeningToolInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"questionnaire", "threshold", "clientTypes", "genders", "ageRange"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "questionnaire":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("questionnaire"))
			it.Questionnaire, err = ec.unmarshalNQuestionnaireInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐQuestionnaireInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "threshold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("threshold"))
			it.Threshold, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientTypes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientTypes"))
			it.ClientTypes, err = ec.unmarshalOClientType2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientType(ctx, v)
			if err != nil {
				return it, err
			}
		case "genders":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("genders"))
			it.Genders, err = ec.unmarshalOGender2ᚕgithubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
		case "ageRange":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ageRange"))
			it.AgeRange, err = ec.unmarshalOAgeRangeInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐAgeRangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputScreeningToolQuestionResponseInput(ctx context.Context, obj interface{}) (dto.ScreeningToolQuestionResponseInput, error) {
	var it dto.ScreeningToolQuestionResponseInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"clientID", "questionID", "response"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "clientID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
			it.ClientID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "questionID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("questionID"))
			it.QuestionID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "response":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("response"))
			it.Response, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSecurityQuestionResponseInput(ctx context.Context, obj interface{}) (dto.SecurityQuestionResponseInput, error) {
	var it dto.SecurityQuestionResponseInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userID", "securityQuestionID", "response"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "securityQuestionID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("securityQuestionID"))
			it.SecurityQuestionID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "response":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("response"))
			it.Response, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputServiceRequestInput(ctx context.Context, obj interface{}) (dto.ServiceRequestInput, error) {
	var it dto.ServiceRequestInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"active", "requestType", "status", "request", "clientID", "inProgressBy", "resolvedBy", "facilityID", "clientName", "flavour", "meta"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			it.Active, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "requestType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requestType"))
			it.RequestType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "request":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("request"))
			it.Request, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
			it.ClientID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "inProgressBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inProgressBy"))
			it.InProgressBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "resolvedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resolvedBy"))
			it.ResolvedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "facilityID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facilityID"))
			it.FacilityID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientName"))
			it.ClientName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "flavour":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
			it.Flavour, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, v)
			if err != nil {
				return it, err
			}
		case "meta":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("meta"))
			it.Meta, err = ec.unmarshalOMap2map(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputShareContentInput(ctx context.Context, obj interface{}) (dto.ShareContentInput, error) {
	var it dto.ShareContentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"clientID", "contentID", "channel"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "clientID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientID"))
			it.ClientID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "contentID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentID"))
			it.ContentID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "channel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channel"))
			it.Channel, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSortOption(ctx context.Context, obj interface{}) (stream_chat.SortOption, error) {
	var it stream_chat.SortOption
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"field", "direction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSortsInput(ctx context.Context, obj interface{}) (dto.SortsInput, error) {
	var it dto.SortsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalOSortDataType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐSortDataType(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalOFilterSortDataType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐFilterSortDataType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStaffRegistrationInput(ctx context.Context, obj interface{}) (dto.StaffRegistrationInput, error) {
	var it dto.StaffRegistrationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"username", "facility", "staffName", "gender", "dateOfBirth", "phoneNumber", "idNumber", "staffNumber", "staffRoles", "inviteStaff"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			it.Username, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "facility":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facility"))
			it.Facility, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffName"))
			it.StaffName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalNGender2githubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateOfBirth":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateOfBirth"))
			it.DateOfBirth, err = ec.unmarshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			it.PhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNumber"))
			it.IDNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffNumber"))
			it.StaffNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "staffRoles":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("staffRoles"))
			it.StaffRoles, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "inviteStaff":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inviteStaff"))
			it.InviteStaff, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSurveyResponseInput(ctx context.Context, obj interface{}) (dto.SurveyResponseInput, error) {
	var it dto.SurveyResponseInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"projectID", "formID", "submitterID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "projectID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectID"))
			it.ProjectID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "formID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formID"))
			it.FormID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "submitterID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submitterID"))
			it.SubmitterID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVerifySurveySubmissionInput(ctx context.Context, obj interface{}) (dto.VerifySurveySubmissionInput, error) {
	var it dto.VerifySurveySubmissionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"projectID", "formID", "submitterID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "projectID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectID"))
			it.ProjectID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "formID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("formID"))
			it.FormID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "submitterID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submitterID"))
			it.SubmitterID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var aIModerationResponseImplementors = []string{"AIModerationResponse"}

func (ec *executionContext) _AIModerationResponse(ctx context.Context, sel ast.SelectionSet, obj *domain.AIModerationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, aIModerationResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AIModerationResponse")
		case "toxic":

			out.Values[i] = ec._AIModerationResponse_toxic(ctx, field, obj)

		case "explicit":

			out.Values[i] = ec._AIModerationResponse_explicit(ctx, field, obj)

		case "spam":

			out.Values[i] = ec._AIModerationResponse_spam(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ageRangeImplementors = []string{"AgeRange"}

func (ec *executionContext) _AgeRange(ctx context.Context, sel ast.SelectionSet, obj *domain.AgeRange) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ageRangeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AgeRange")
		case "lowerBound":

			out.Values[i] = ec._AgeRange_lowerBound(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "upperBound":

			out.Values[i] = ec._AgeRange_upperBound(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appointmentImplementors = []string{"Appointment"}

func (ec *executionContext) _Appointment(ctx context.Context, sel ast.SelectionSet, obj *domain.Appointment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appointmentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Appointment")
		case "id":

			out.Values[i] = ec._Appointment_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reason":

			out.Values[i] = ec._Appointment_reason(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "date":

			out.Values[i] = ec._Appointment_date(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasRescheduledAppointment":

			out.Values[i] = ec._Appointment_hasRescheduledAppointment(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appointmentsPageImplementors = []string{"AppointmentsPage"}

func (ec *executionContext) _AppointmentsPage(ctx context.Context, sel ast.SelectionSet, obj *domain.AppointmentsPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appointmentsPageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppointmentsPage")
		case "appointments":

			out.Values[i] = ec._AppointmentsPage_appointments(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._AppointmentsPage_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var attachmentImplementors = []string{"Attachment"}

func (ec *executionContext) _Attachment(ctx context.Context, sel ast.SelectionSet, obj *domain.Attachment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, attachmentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Attachment")
		case "type":

			out.Values[i] = ec._Attachment_type(ctx, field, obj)

		case "author_name":

			out.Values[i] = ec._Attachment_author_name(ctx, field, obj)

		case "title":

			out.Values[i] = ec._Attachment_title(ctx, field, obj)

		case "title_link":

			out.Values[i] = ec._Attachment_title_link(ctx, field, obj)

		case "text":

			out.Values[i] = ec._Attachment_text(ctx, field, obj)

		case "image_url":

			out.Values[i] = ec._Attachment_image_url(ctx, field, obj)

		case "thumb_url":

			out.Values[i] = ec._Attachment_thumb_url(ctx, field, obj)

		case "asset_url":

			out.Values[i] = ec._Attachment_asset_url(ctx, field, obj)

		case "og_scrape_url":

			out.Values[i] = ec._Attachment_og_scrape_url(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authorImplementors = []string{"Author"}

func (ec *executionContext) _Author(ctx context.Context, sel ast.SelectionSet, obj *domain.Author) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authorImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Author")
		case "id":

			out.Values[i] = ec._Author_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authorityPermissionImplementors = []string{"AuthorityPermission"}

func (ec *executionContext) _AuthorityPermission(ctx context.Context, sel ast.SelectionSet, obj *domain.AuthorityPermission) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authorityPermissionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthorityPermission")
		case "permissionID":

			out.Values[i] = ec._AuthorityPermission_permissionID(ctx, field, obj)

		case "active":

			out.Values[i] = ec._AuthorityPermission_active(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authorityRoleImplementors = []string{"AuthorityRole"}

func (ec *executionContext) _AuthorityRole(ctx context.Context, sel ast.SelectionSet, obj *domain.AuthorityRole) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authorityRoleImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthorityRole")
		case "authorityRoleID":

			out.Values[i] = ec._AuthorityRole_authorityRoleID(ctx, field, obj)

		case "name":

			out.Values[i] = ec._AuthorityRole_name(ctx, field, obj)

		case "active":

			out.Values[i] = ec._AuthorityRole_active(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var availableScreeningToolsImplementors = []string{"AvailableScreeningTools"}

func (ec *executionContext) _AvailableScreeningTools(ctx context.Context, sel ast.SelectionSet, obj *domain.AvailableScreeningTools) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, availableScreeningToolsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AvailableScreeningTools")
		case "toolType":

			out.Values[i] = ec._AvailableScreeningTools_toolType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caregiverProfileImplementors = []string{"CaregiverProfile"}

func (ec *executionContext) _CaregiverProfile(ctx context.Context, sel ast.SelectionSet, obj *domain.CaregiverProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caregiverProfileImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaregiverProfile")
		case "id":

			out.Values[i] = ec._CaregiverProfile_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":

			out.Values[i] = ec._CaregiverProfile_user(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "caregiverNumber":

			out.Values[i] = ec._CaregiverProfile_caregiverNumber(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isClient":

			out.Values[i] = ec._CaregiverProfile_isClient(ctx, field, obj)

		case "consent":

			out.Values[i] = ec._CaregiverProfile_consent(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "currentClient":

			out.Values[i] = ec._CaregiverProfile_currentClient(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "currentFacility":

			out.Values[i] = ec._CaregiverProfile_currentFacility(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var caregiverProfileOutputPageImplementors = []string{"CaregiverProfileOutputPage"}

func (ec *executionContext) _CaregiverProfileOutputPage(ctx context.Context, sel ast.SelectionSet, obj *dto.CaregiverProfileOutputPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, caregiverProfileOutputPageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CaregiverProfileOutputPage")
		case "pagination":

			out.Values[i] = ec._CaregiverProfileOutputPage_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "caregivers":

			out.Values[i] = ec._CaregiverProfileOutputPage_caregivers(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var categoryDetailImplementors = []string{"CategoryDetail"}

func (ec *executionContext) _CategoryDetail(ctx context.Context, sel ast.SelectionSet, obj *domain.CategoryDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, categoryDetailImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CategoryDetail")
		case "id":

			out.Values[i] = ec._CategoryDetail_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "categoryName":

			out.Values[i] = ec._CategoryDetail_categoryName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "categoryIcon":

			out.Values[i] = ec._CategoryDetail_categoryIcon(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clientHealthDiaryEntryImplementors = []string{"ClientHealthDiaryEntry"}

func (ec *executionContext) _ClientHealthDiaryEntry(ctx context.Context, sel ast.SelectionSet, obj *domain.ClientHealthDiaryEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clientHealthDiaryEntryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClientHealthDiaryEntry")
		case "id":

			out.Values[i] = ec._ClientHealthDiaryEntry_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":

			out.Values[i] = ec._ClientHealthDiaryEntry_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mood":

			out.Values[i] = ec._ClientHealthDiaryEntry_mood(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "note":

			out.Values[i] = ec._ClientHealthDiaryEntry_note(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "entryType":

			out.Values[i] = ec._ClientHealthDiaryEntry_entryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "shareWithHealthWorker":

			out.Values[i] = ec._ClientHealthDiaryEntry_shareWithHealthWorker(ctx, field, obj)

		case "sharedAt":

			out.Values[i] = ec._ClientHealthDiaryEntry_sharedAt(ctx, field, obj)

		case "clientID":

			out.Values[i] = ec._ClientHealthDiaryEntry_clientID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._ClientHealthDiaryEntry_createdAt(ctx, field, obj)

		case "phoneNumber":

			out.Values[i] = ec._ClientHealthDiaryEntry_phoneNumber(ctx, field, obj)

		case "clientName":

			out.Values[i] = ec._ClientHealthDiaryEntry_clientName(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clientHealthDiaryQuoteImplementors = []string{"ClientHealthDiaryQuote"}

func (ec *executionContext) _ClientHealthDiaryQuote(ctx context.Context, sel ast.SelectionSet, obj *domain.ClientHealthDiaryQuote) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clientHealthDiaryQuoteImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClientHealthDiaryQuote")
		case "author":

			out.Values[i] = ec._ClientHealthDiaryQuote_author(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "quote":

			out.Values[i] = ec._ClientHealthDiaryQuote_quote(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clientProfileImplementors = []string{"ClientProfile"}

func (ec *executionContext) _ClientProfile(ctx context.Context, sel ast.SelectionSet, obj *domain.ClientProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clientProfileImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClientProfile")
		case "id":

			out.Values[i] = ec._ClientProfile_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":

			out.Values[i] = ec._ClientProfile_user(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":

			out.Values[i] = ec._ClientProfile_active(ctx, field, obj)

		case "clientTypes":

			out.Values[i] = ec._ClientProfile_clientTypes(ctx, field, obj)

		case "treatmentEnrollmentDate":

			out.Values[i] = ec._ClientProfile_treatmentEnrollmentDate(ctx, field, obj)

		case "fhirPatientID":

			out.Values[i] = ec._ClientProfile_fhirPatientID(ctx, field, obj)

		case "healthRecordID":

			out.Values[i] = ec._ClientProfile_healthRecordID(ctx, field, obj)

		case "treatmentBuddy":

			out.Values[i] = ec._ClientProfile_treatmentBuddy(ctx, field, obj)

		case "clientCounselled":

			out.Values[i] = ec._ClientProfile_clientCounselled(ctx, field, obj)

		case "defaultFacility":

			out.Values[i] = ec._ClientProfile_defaultFacility(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "chvUserID":

			out.Values[i] = ec._ClientProfile_chvUserID(ctx, field, obj)

		case "chvUserName":

			out.Values[i] = ec._ClientProfile_chvUserName(ctx, field, obj)

		case "caregiverID":

			out.Values[i] = ec._ClientProfile_caregiverID(ctx, field, obj)

		case "cccNumber":

			out.Values[i] = ec._ClientProfile_cccNumber(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clientRegistrationOutputImplementors = []string{"ClientRegistrationOutput"}

func (ec *executionContext) _ClientRegistrationOutput(ctx context.Context, sel ast.SelectionSet, obj *dto.ClientRegistrationOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clientRegistrationOutputImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClientRegistrationOutput")
		case "id":

			out.Values[i] = ec._ClientRegistrationOutput_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":

			out.Values[i] = ec._ClientRegistrationOutput_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clientTypes":

			out.Values[i] = ec._ClientRegistrationOutput_clientTypes(ctx, field, obj)

		case "enrollmentDate":

			out.Values[i] = ec._ClientRegistrationOutput_enrollmentDate(ctx, field, obj)

		case "fhirPatientID":

			out.Values[i] = ec._ClientRegistrationOutput_fhirPatientID(ctx, field, obj)

		case "emrHealthRecordID":

			out.Values[i] = ec._ClientRegistrationOutput_emrHealthRecordID(ctx, field, obj)

		case "treatmentBuddy":

			out.Values[i] = ec._ClientRegistrationOutput_treatmentBuddy(ctx, field, obj)

		case "counselled":

			out.Values[i] = ec._ClientRegistrationOutput_counselled(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "organisation":

			out.Values[i] = ec._ClientRegistrationOutput_organisation(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":

			out.Values[i] = ec._ClientRegistrationOutput_userID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "currentFacilityID":

			out.Values[i] = ec._ClientRegistrationOutput_currentFacilityID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "chv":

			out.Values[i] = ec._ClientRegistrationOutput_chv(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "caregiver":

			out.Values[i] = ec._ClientRegistrationOutput_caregiver(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clientResponseImplementors = []string{"ClientResponse"}

func (ec *executionContext) _ClientResponse(ctx context.Context, sel ast.SelectionSet, obj *domain.ClientResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clientResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClientResponse")
		case "clientProfile":

			out.Values[i] = ec._ClientResponse_clientProfile(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "roles":

			out.Values[i] = ec._ClientResponse_roles(ctx, field, obj)

		case "permissions":

			out.Values[i] = ec._ClientResponse_permissions(ctx, field, obj)

		case "communityToken":

			out.Values[i] = ec._ClientResponse_communityToken(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var communityImplementors = []string{"Community"}

func (ec *executionContext) _Community(ctx context.Context, sel ast.SelectionSet, obj *domain.Community) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, communityImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Community")
		case "id":

			out.Values[i] = ec._Community_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cid":

			out.Values[i] = ec._Community_cid(ctx, field, obj)

		case "name":

			out.Values[i] = ec._Community_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "disabled":

			out.Values[i] = ec._Community_disabled(ctx, field, obj)

		case "frozen":

			out.Values[i] = ec._Community_frozen(ctx, field, obj)

		case "memberCount":

			out.Values[i] = ec._Community_memberCount(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._Community_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._Community_updatedAt(ctx, field, obj)

		case "ageRange":

			out.Values[i] = ec._Community_ageRange(ctx, field, obj)

		case "gender":

			out.Values[i] = ec._Community_gender(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clientType":

			out.Values[i] = ec._Community_clientType(ctx, field, obj)

		case "inviteOnly":

			out.Values[i] = ec._Community_inviteOnly(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._Community_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "members":

			out.Values[i] = ec._Community_members(ctx, field, obj)

		case "createdBy":

			out.Values[i] = ec._Community_createdBy(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var communityMemberImplementors = []string{"CommunityMember"}

func (ec *executionContext) _CommunityMember(ctx context.Context, sel ast.SelectionSet, obj *domain.CommunityMember) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, communityMemberImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommunityMember")
		case "userID":

			out.Values[i] = ec._CommunityMember_userID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":

			out.Values[i] = ec._CommunityMember_user(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isModerator":

			out.Values[i] = ec._CommunityMember_isModerator(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "invited":

			out.Values[i] = ec._CommunityMember_invited(ctx, field, obj)

		case "inviteAcceptedAt":

			out.Values[i] = ec._CommunityMember_inviteAcceptedAt(ctx, field, obj)

		case "inviteRejectedAt":

			out.Values[i] = ec._CommunityMember_inviteRejectedAt(ctx, field, obj)

		case "role":

			out.Values[i] = ec._CommunityMember_role(ctx, field, obj)

		case "userType":

			out.Values[i] = ec._CommunityMember_userType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var consentStatusImplementors = []string{"ConsentStatus"}

func (ec *executionContext) _ConsentStatus(ctx context.Context, sel ast.SelectionSet, obj *domain.ConsentStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, consentStatusImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConsentStatus")
		case "consentStatus":

			out.Values[i] = ec._ConsentStatus_consentStatus(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contactImplementors = []string{"Contact"}

func (ec *executionContext) _Contact(ctx context.Context, sel ast.SelectionSet, obj *domain.Contact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contactImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Contact")
		case "id":

			out.Values[i] = ec._Contact_id(ctx, field, obj)

		case "contactType":

			out.Values[i] = ec._Contact_contactType(ctx, field, obj)

		case "contactValue":

			out.Values[i] = ec._Contact_contactValue(ctx, field, obj)

		case "active":

			out.Values[i] = ec._Contact_active(ctx, field, obj)

		case "optedIn":

			out.Values[i] = ec._Contact_optedIn(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contentImplementors = []string{"Content"}

func (ec *executionContext) _Content(ctx context.Context, sel ast.SelectionSet, obj *domain.Content) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Content")
		case "items":

			out.Values[i] = ec._Content_items(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "meta":

			out.Values[i] = ec._Content_meta(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contentItemImplementors = []string{"ContentItem"}

func (ec *executionContext) _ContentItem(ctx context.Context, sel ast.SelectionSet, obj *domain.ContentItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contentItemImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContentItem")
		case "id":

			out.Values[i] = ec._ContentItem_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":

			out.Values[i] = ec._ContentItem_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "date":

			out.Values[i] = ec._ContentItem_date(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "meta":

			out.Values[i] = ec._ContentItem_meta(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "intro":

			out.Values[i] = ec._ContentItem_intro(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "authorName":

			out.Values[i] = ec._ContentItem_authorName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "itemType":

			out.Values[i] = ec._ContentItem_itemType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "timeEstimateSeconds":

			out.Values[i] = ec._ContentItem_timeEstimateSeconds(ctx, field, obj)

		case "body":

			out.Values[i] = ec._ContentItem_body(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "heroImage":

			out.Values[i] = ec._ContentItem_heroImage(ctx, field, obj)

		case "heroImageRendition":

			out.Values[i] = ec._ContentItem_heroImageRendition(ctx, field, obj)

		case "likeCount":

			out.Values[i] = ec._ContentItem_likeCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bookmarkCount":

			out.Values[i] = ec._ContentItem_bookmarkCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "viewCount":

			out.Values[i] = ec._ContentItem_viewCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tagNames":

			out.Values[i] = ec._ContentItem_tagNames(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "shareCount":

			out.Values[i] = ec._ContentItem_shareCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "documents":

			out.Values[i] = ec._ContentItem_documents(ctx, field, obj)

		case "author":

			out.Values[i] = ec._ContentItem_author(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "categoryDetails":

			out.Values[i] = ec._ContentItem_categoryDetails(ctx, field, obj)

		case "featuredMedia":

			out.Values[i] = ec._ContentItem_featuredMedia(ctx, field, obj)

		case "galleryImages":

			out.Values[i] = ec._ContentItem_galleryImages(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contentItemCategoryImplementors = []string{"ContentItemCategory"}

func (ec *executionContext) _ContentItemCategory(ctx context.Context, sel ast.SelectionSet, obj *domain.ContentItemCategory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contentItemCategoryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContentItemCategory")
		case "id":

			out.Values[i] = ec._ContentItemCategory_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._ContentItemCategory_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "iconUrl":

			out.Values[i] = ec._ContentItemCategory_iconUrl(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contentMetaImplementors = []string{"ContentMeta"}

func (ec *executionContext) _ContentMeta(ctx context.Context, sel ast.SelectionSet, obj *domain.ContentMeta) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contentMetaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContentMeta")
		case "contentType":

			out.Values[i] = ec._ContentMeta_contentType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "contentDetailURL":

			out.Values[i] = ec._ContentMeta_contentDetailURL(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "contentHTMLURL":

			out.Values[i] = ec._ContentMeta_contentHTMLURL(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "slug":

			out.Values[i] = ec._ContentMeta_slug(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "showInMenus":

			out.Values[i] = ec._ContentMeta_showInMenus(ctx, field, obj)

		case "seoTitle":

			out.Values[i] = ec._ContentMeta_seoTitle(ctx, field, obj)

		case "searchDescription":

			out.Values[i] = ec._ContentMeta_searchDescription(ctx, field, obj)

		case "firstPublishedAt":

			out.Values[i] = ec._ContentMeta_firstPublishedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "locale":

			out.Values[i] = ec._ContentMeta_locale(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var documentImplementors = []string{"Document"}

func (ec *executionContext) _Document(ctx context.Context, sel ast.SelectionSet, obj *domain.Document) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, documentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Document")
		case "id":

			out.Values[i] = ec._Document_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "document":

			out.Values[i] = ec._Document_document(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "meta":

			out.Values[i] = ec._Document_meta(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var documentDataImplementors = []string{"DocumentData"}

func (ec *executionContext) _DocumentData(ctx context.Context, sel ast.SelectionSet, obj *domain.DocumentData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, documentDataImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DocumentData")
		case "id":

			out.Values[i] = ec._DocumentData_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":

			out.Values[i] = ec._DocumentData_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "meta":

			out.Values[i] = ec._DocumentData_meta(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var documentMetaImplementors = []string{"DocumentMeta"}

func (ec *executionContext) _DocumentMeta(ctx context.Context, sel ast.SelectionSet, obj *domain.DocumentMeta) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, documentMetaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DocumentMeta")
		case "type":

			out.Values[i] = ec._DocumentMeta_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "documentDetailUrl":

			out.Values[i] = ec._DocumentMeta_documentDetailUrl(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "documentDownloadUrl":

			out.Values[i] = ec._DocumentMeta_documentDownloadUrl(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var explicitImplementors = []string{"Explicit"}

func (ec *executionContext) _Explicit(ctx context.Context, sel ast.SelectionSet, obj *domain.Explicit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, explicitImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Explicit")
		case "flag":

			out.Values[i] = ec._Explicit_flag(ctx, field, obj)

		case "block":

			out.Values[i] = ec._Explicit_block(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var facilityImplementors = []string{"Facility"}

func (ec *executionContext) _Facility(ctx context.Context, sel ast.SelectionSet, obj *domain.Facility) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, facilityImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Facility")
		case "id":

			out.Values[i] = ec._Facility_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Facility_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phone":

			out.Values[i] = ec._Facility_phone(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":

			out.Values[i] = ec._Facility_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "country":

			out.Values[i] = ec._Facility_country(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._Facility_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fhirOrganisationID":

			out.Values[i] = ec._Facility_fhirOrganisationID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "identifier":

			out.Values[i] = ec._Facility_identifier(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "workStationDetails":

			out.Values[i] = ec._Facility_workStationDetails(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var facilityIdentifierImplementors = []string{"FacilityIdentifier"}

func (ec *executionContext) _FacilityIdentifier(ctx context.Context, sel ast.SelectionSet, obj *domain.FacilityIdentifier) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, facilityIdentifierImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FacilityIdentifier")
		case "id":

			out.Values[i] = ec._FacilityIdentifier_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":

			out.Values[i] = ec._FacilityIdentifier_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._FacilityIdentifier_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":

			out.Values[i] = ec._FacilityIdentifier_value(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var facilityOutputPageImplementors = []string{"FacilityOutputPage"}

func (ec *executionContext) _FacilityOutputPage(ctx context.Context, sel ast.SelectionSet, obj *dto.FacilityOutputPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, facilityOutputPageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FacilityOutputPage")
		case "pagination":

			out.Values[i] = ec._FacilityOutputPage_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "facilities":

			out.Values[i] = ec._FacilityOutputPage_facilities(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var facilityPageImplementors = []string{"FacilityPage"}

func (ec *executionContext) _FacilityPage(ctx context.Context, sel ast.SelectionSet, obj *domain.FacilityPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, facilityPageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FacilityPage")
		case "pagination":

			out.Values[i] = ec._FacilityPage_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "facilities":

			out.Values[i] = ec._FacilityPage_facilities(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var featuredMediaImplementors = []string{"FeaturedMedia"}

func (ec *executionContext) _FeaturedMedia(ctx context.Context, sel ast.SelectionSet, obj *domain.FeaturedMedia) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, featuredMediaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FeaturedMedia")
		case "id":

			out.Values[i] = ec._FeaturedMedia_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":

			out.Values[i] = ec._FeaturedMedia_url(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":

			out.Values[i] = ec._FeaturedMedia_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._FeaturedMedia_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "duration":

			out.Values[i] = ec._FeaturedMedia_duration(ctx, field, obj)

		case "width":

			out.Values[i] = ec._FeaturedMedia_width(ctx, field, obj)

		case "height":

			out.Values[i] = ec._FeaturedMedia_height(ctx, field, obj)

		case "thumbnail":

			out.Values[i] = ec._FeaturedMedia_thumbnail(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var filtersParamImplementors = []string{"FiltersParam"}

func (ec *executionContext) _FiltersParam(ctx context.Context, sel ast.SelectionSet, obj *domain.FiltersParam) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, filtersParamImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FiltersParam")
		case "name":

			out.Values[i] = ec._FiltersParam_name(ctx, field, obj)

		case "dataType":

			out.Values[i] = ec._FiltersParam_dataType(ctx, field, obj)

		case "value":

			out.Values[i] = ec._FiltersParam_value(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var galleryImageImplementors = []string{"GalleryImage"}

func (ec *executionContext) _GalleryImage(ctx context.Context, sel ast.SelectionSet, obj *domain.GalleryImage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, galleryImageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GalleryImage")
		case "id":

			out.Values[i] = ec._GalleryImage_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "image":

			out.Values[i] = ec._GalleryImage_image(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getstreamMessageImplementors = []string{"GetstreamMessage"}

func (ec *executionContext) _GetstreamMessage(ctx context.Context, sel ast.SelectionSet, obj *domain.GetstreamMessage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getstreamMessageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetstreamMessage")
		case "id":

			out.Values[i] = ec._GetstreamMessage_id(ctx, field, obj)

		case "text":

			out.Values[i] = ec._GetstreamMessage_text(ctx, field, obj)

		case "html":

			out.Values[i] = ec._GetstreamMessage_html(ctx, field, obj)

		case "type":

			out.Values[i] = ec._GetstreamMessage_type(ctx, field, obj)

		case "silent":

			out.Values[i] = ec._GetstreamMessage_silent(ctx, field, obj)

		case "user":

			out.Values[i] = ec._GetstreamMessage_user(ctx, field, obj)

		case "attachments":

			out.Values[i] = ec._GetstreamMessage_attachments(ctx, field, obj)

		case "latest_reactions":

			out.Values[i] = ec._GetstreamMessage_latest_reactions(ctx, field, obj)

		case "own_reactions":

			out.Values[i] = ec._GetstreamMessage_own_reactions(ctx, field, obj)

		case "parent_id":

			out.Values[i] = ec._GetstreamMessage_parent_id(ctx, field, obj)

		case "show_in_channel":

			out.Values[i] = ec._GetstreamMessage_show_in_channel(ctx, field, obj)

		case "reply_count":

			out.Values[i] = ec._GetstreamMessage_reply_count(ctx, field, obj)

		case "mentioned_users":

			out.Values[i] = ec._GetstreamMessage_mentioned_users(ctx, field, obj)

		case "shadowed":

			out.Values[i] = ec._GetstreamMessage_shadowed(ctx, field, obj)

		case "pinned_at":

			out.Values[i] = ec._GetstreamMessage_pinned_at(ctx, field, obj)

		case "pinned_by":

			out.Values[i] = ec._GetstreamMessage_pinned_by(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._GetstreamMessage_created_at(ctx, field, obj)

		case "updated_at":

			out.Values[i] = ec._GetstreamMessage_updated_at(ctx, field, obj)

		case "deleted_at":

			out.Values[i] = ec._GetstreamMessage_deleted_at(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var heroImageImplementors = []string{"HeroImage"}

func (ec *executionContext) _HeroImage(ctx context.Context, sel ast.SelectionSet, obj *domain.HeroImage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, heroImageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HeroImage")
		case "id":

			out.Values[i] = ec._HeroImage_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "meta":

			out.Values[i] = ec._HeroImage_meta(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":

			out.Values[i] = ec._HeroImage_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var heroImageRenditionImplementors = []string{"HeroImageRendition"}

func (ec *executionContext) _HeroImageRendition(ctx context.Context, sel ast.SelectionSet, obj *domain.HeroImageRendition) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, heroImageRenditionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HeroImageRendition")
		case "url":

			out.Values[i] = ec._HeroImageRendition_url(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "width":

			out.Values[i] = ec._HeroImageRendition_width(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "height":

			out.Values[i] = ec._HeroImageRendition_height(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "alt":

			out.Values[i] = ec._HeroImageRendition_alt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageDetailImplementors = []string{"ImageDetail"}

func (ec *executionContext) _ImageDetail(ctx context.Context, sel ast.SelectionSet, obj *domain.ImageDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageDetailImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageDetail")
		case "id":

			out.Values[i] = ec._ImageDetail_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":

			out.Values[i] = ec._ImageDetail_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "meta":

			out.Values[i] = ec._ImageDetail_meta(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageMetaImplementors = []string{"ImageMeta"}

func (ec *executionContext) _ImageMeta(ctx context.Context, sel ast.SelectionSet, obj *domain.ImageMeta) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageMetaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageMeta")
		case "type":

			out.Values[i] = ec._ImageMeta_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "imageDetailUrl":

			out.Values[i] = ec._ImageMeta_imageDetailUrl(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "imageDownloadUrl":

			out.Values[i] = ec._ImageMeta_imageDownloadUrl(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var managedClientImplementors = []string{"ManagedClient"}

func (ec *executionContext) _ManagedClient(ctx context.Context, sel ast.SelectionSet, obj *domain.ManagedClient) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, managedClientImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ManagedClient")
		case "clientProfile":

			out.Values[i] = ec._ManagedClient_clientProfile(ctx, field, obj)

		case "caregiverConsent":

			out.Values[i] = ec._ManagedClient_caregiverConsent(ctx, field, obj)

		case "clientConsent":

			out.Values[i] = ec._ManagedClient_clientConsent(ctx, field, obj)

		case "workStationDetails":

			out.Values[i] = ec._ManagedClient_workStationDetails(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var managedClientOutputPageImplementors = []string{"ManagedClientOutputPage"}

func (ec *executionContext) _ManagedClientOutputPage(ctx context.Context, sel ast.SelectionSet, obj *dto.ManagedClientOutputPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, managedClientOutputPageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ManagedClientOutputPage")
		case "pagination":

			out.Values[i] = ec._ManagedClientOutputPage_pagination(ctx, field, obj)

		case "managedClients":

			out.Values[i] = ec._ManagedClientOutputPage_managedClients(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var memberImplementors = []string{"Member"}

func (ec *executionContext) _Member(ctx context.Context, sel ast.SelectionSet, obj *domain.Member) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, memberImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Member")
		case "id":

			out.Values[i] = ec._Member_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":

			out.Values[i] = ec._Member_userID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Member_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "role":

			out.Values[i] = ec._Member_role(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "username":

			out.Values[i] = ec._Member_username(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gender":

			out.Values[i] = ec._Member_gender(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userType":

			out.Values[i] = ec._Member_userType(ctx, field, obj)

		case "extraData":

			out.Values[i] = ec._Member_extraData(ctx, field, obj)

		case "ageUpperBound":

			out.Values[i] = ec._Member_ageUpperBound(ctx, field, obj)

		case "ageLowerBound":

			out.Values[i] = ec._Member_ageLowerBound(ctx, field, obj)

		case "clientTypes":

			out.Values[i] = ec._Member_clientTypes(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var messageFlagImplementors = []string{"MessageFlag"}

func (ec *executionContext) _MessageFlag(ctx context.Context, sel ast.SelectionSet, obj *domain.MessageFlag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, messageFlagImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MessageFlag")
		case "user":

			out.Values[i] = ec._MessageFlag_user(ctx, field, obj)

		case "message":

			out.Values[i] = ec._MessageFlag_message(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var metaImplementors = []string{"Meta"}

func (ec *executionContext) _Meta(ctx context.Context, sel ast.SelectionSet, obj *domain.Meta) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Meta")
		case "totalCount":

			out.Values[i] = ec._Meta_totalCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var moderationResultImplementors = []string{"ModerationResult"}

func (ec *executionContext) _ModerationResult(ctx context.Context, sel ast.SelectionSet, obj *domain.ModerationResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, moderationResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModerationResult")
		case "message_id":

			out.Values[i] = ec._ModerationResult_message_id(ctx, field, obj)

		case "action":

			out.Values[i] = ec._ModerationResult_action(ctx, field, obj)

		case "moderated_by":

			out.Values[i] = ec._ModerationResult_moderated_by(ctx, field, obj)

		case "blocked_word":

			out.Values[i] = ec._ModerationResult_blocked_word(ctx, field, obj)

		case "blocklist_name":

			out.Values[i] = ec._ModerationResult_blocklist_name(ctx, field, obj)

		case "moderation_thresholds":

			out.Values[i] = ec._ModerationResult_moderation_thresholds(ctx, field, obj)

		case "AI_moderation_response":

			out.Values[i] = ec._ModerationResult_AI_moderation_response(ctx, field, obj)

		case "user_karma":

			out.Values[i] = ec._ModerationResult_user_karma(ctx, field, obj)

		case "user_bad_karma":

			out.Values[i] = ec._ModerationResult_user_bad_karma(ctx, field, obj)

		case "created_at":

			out.Values[i] = ec._ModerationResult_created_at(ctx, field, obj)

		case "updated_at":

			out.Values[i] = ec._ModerationResult_updated_at(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var moderationThresholdsImplementors = []string{"ModerationThresholds"}

func (ec *executionContext) _ModerationThresholds(ctx context.Context, sel ast.SelectionSet, obj *domain.ModerationThresholds) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, moderationThresholdsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModerationThresholds")
		case "explicit":

			out.Values[i] = ec._ModerationThresholds_explicit(ctx, field, obj)

		case "spam":

			out.Values[i] = ec._ModerationThresholds_spam(ctx, field, obj)

		case "toxic":

			out.Values[i] = ec._ModerationThresholds_toxic(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "rescheduleAppointment":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rescheduleAppointment(ctx, field)
			})

		case "assignOrRevokeRoles":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_assignOrRevokeRoles(ctx, field)
			})

		case "createCommunity":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCommunity(ctx, field)
			})

		case "deleteCommunities":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteCommunities(ctx, field)
			})

		case "rejectInvitation":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rejectInvitation(ctx, field)
			})

		case "acceptInvitation":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_acceptInvitation(ctx, field)
			})

		case "addMembersToCommunity":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addMembersToCommunity(ctx, field)
			})

		case "removeMembersFromCommunity":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeMembersFromCommunity(ctx, field)
			})

		case "addModerators":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addModerators(ctx, field)
			})

		case "demoteModerators":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_demoteModerators(ctx, field)
			})

		case "banUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_banUser(ctx, field)
			})

		case "unBanUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_unBanUser(ctx, field)
			})

		case "deleteCommunityMessage":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteCommunityMessage(ctx, field)
			})

		case "shareContent":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_shareContent(ctx, field)
			})

		case "bookmarkContent":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bookmarkContent(ctx, field)
			})

		case "unBookmarkContent":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_unBookmarkContent(ctx, field)
			})

		case "likeContent":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_likeContent(ctx, field)
			})

		case "unlikeContent":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_unlikeContent(ctx, field)
			})

		case "viewContent":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_viewContent(ctx, field)
			})

		case "deleteFacility":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteFacility(ctx, field)
			})

		case "reactivateFacility":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_reactivateFacility(ctx, field)
			})

		case "inactivateFacility":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_inactivateFacility(ctx, field)
			})

		case "addFacilityContact":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addFacilityContact(ctx, field)
			})

		case "addFacilityToProgram":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addFacilityToProgram(ctx, field)
			})

		case "sendFeedback":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sendFeedback(ctx, field)
			})

		case "createHealthDiaryEntry":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createHealthDiaryEntry(ctx, field)
			})

		case "shareHealthDiaryEntry":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_shareHealthDiaryEntry(ctx, field)
			})

		case "collectMetric":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_collectMetric(ctx, field)
			})

		case "sendFCMNotification":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sendFCMNotification(ctx, field)
			})

		case "readNotifications":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_readNotifications(ctx, field)
			})

		case "createOrganisation":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createOrganisation(ctx, field)
			})

		case "deleteOrganisation":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteOrganisation(ctx, field)
			})

		case "createProgram":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createProgram(ctx, field)
			})

		case "setStaffProgram":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setStaffProgram(ctx, field)
			})

		case "setClientProgram":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setClientProgram(ctx, field)
			})

		case "createScreeningTool":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createScreeningTool(ctx, field)
			})

		case "respondToScreeningTool":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_respondToScreeningTool(ctx, field)
			})

		case "answerScreeningToolQuestion":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_answerScreeningToolQuestion(ctx, field)
			})

		case "recordSecurityQuestionResponses":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordSecurityQuestionResponses(ctx, field)
			})

		case "setInProgressBy":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setInProgressBy(ctx, field)
			})

		case "createServiceRequest":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createServiceRequest(ctx, field)
			})

		case "resolveServiceRequest":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_resolveServiceRequest(ctx, field)
			})

		case "verifyClientPinResetServiceRequest":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_verifyClientPinResetServiceRequest(ctx, field)
			})

		case "verifyStaffPinResetServiceRequest":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_verifyStaffPinResetServiceRequest(ctx, field)
			})

		case "sendClientSurveyLinks":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sendClientSurveyLinks(ctx, field)
			})

		case "verifySurveySubmission":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_verifySurveySubmission(ctx, field)
			})

		case "acceptTerms":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_acceptTerms(ctx, field)
			})

		case "setNickName":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setNickName(ctx, field)
			})

		case "completeOnboardingTour":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_completeOnboardingTour(ctx, field)
			})

		case "registerClient":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerClient(ctx, field)
			})

		case "registerStaff":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerStaff(ctx, field)
			})

		case "registerCaregiver":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerCaregiver(ctx, field)
			})

		case "registerClientAsCaregiver":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerClientAsCaregiver(ctx, field)
			})

		case "optOut":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_optOut(ctx, field)
			})

		case "setPushToken":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setPushToken(ctx, field)
			})

		case "inviteUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_inviteUser(ctx, field)
			})

		case "setUserPIN":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setUserPIN(ctx, field)
			})

		case "transferClientToFacility":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_transferClientToFacility(ctx, field)
			})

		case "setStaffDefaultFacility":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setStaffDefaultFacility(ctx, field)
			})

		case "setClientDefaultFacility":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setClientDefaultFacility(ctx, field)
			})

		case "addFacilitiesToStaffProfile":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addFacilitiesToStaffProfile(ctx, field)
			})

		case "addFacilitiesToClientProfile":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addFacilitiesToClientProfile(ctx, field)
			})

		case "removeFacilitiesFromClientProfile":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeFacilitiesFromClientProfile(ctx, field)
			})

		case "assignCaregiver":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_assignCaregiver(ctx, field)
			})

		case "removeFacilitiesFromStaffProfile":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeFacilitiesFromStaffProfile(ctx, field)
			})

		case "registerExistingUserAsStaff":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerExistingUserAsStaff(ctx, field)
			})

		case "consentToAClientCaregiver":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_consentToAClientCaregiver(ctx, field)
			})

		case "consentToManagingClient":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_consentToManagingClient(ctx, field)
			})

		case "registerExistingUserAsClient":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerExistingUserAsClient(ctx, field)
			})

		case "setCaregiverCurrentClient":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setCaregiverCurrentClient(ctx, field)
			})

		case "setCaregiverCurrentFacility":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setCaregiverCurrentFacility(ctx, field)
			})

		case "registerExistingUserAsCaregiver":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerExistingUserAsCaregiver(ctx, field)
			})

		case "updateProfile":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateProfile(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	return out
}

var notificationImplementors = []string{"Notification"}

func (ec *executionContext) _Notification(ctx context.Context, sel ast.SelectionSet, obj *domain.Notification) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, notificationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Notification")
		case "id":

			out.Values[i] = ec._Notification_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":

			out.Values[i] = ec._Notification_title(ctx, field, obj)

		case "body":

			out.Values[i] = ec._Notification_body(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._Notification_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRead":

			out.Values[i] = ec._Notification_isRead(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._Notification_createdAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var notificationTypeFilterImplementors = []string{"NotificationTypeFilter"}

func (ec *executionContext) _NotificationTypeFilter(ctx context.Context, sel ast.SelectionSet, obj *domain.NotificationTypeFilter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, notificationTypeFilterImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NotificationTypeFilter")
		case "enum":

			out.Values[i] = ec._NotificationTypeFilter_enum(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._NotificationTypeFilter_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var notificationsPageImplementors = []string{"NotificationsPage"}

func (ec *executionContext) _NotificationsPage(ctx context.Context, sel ast.SelectionSet, obj *domain.NotificationsPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, notificationsPageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NotificationsPage")
		case "notifications":

			out.Values[i] = ec._NotificationsPage_notifications(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._NotificationsPage_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var oTPResponseImplementors = []string{"OTPResponse"}

func (ec *executionContext) _OTPResponse(ctx context.Context, sel ast.SelectionSet, obj *domain.OTPResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, oTPResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OTPResponse")
		case "otp":

			out.Values[i] = ec._OTPResponse_otp(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phoneNumber":

			out.Values[i] = ec._OTPResponse_phoneNumber(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organisationImplementors = []string{"Organisation"}

func (ec *executionContext) _Organisation(ctx context.Context, sel ast.SelectionSet, obj *domain.Organisation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organisationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Organisation")
		case "id":

			out.Values[i] = ec._Organisation_id(ctx, field, obj)

		case "name":

			out.Values[i] = ec._Organisation_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec._Organisation_description(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organisationOutputPageImplementors = []string{"OrganisationOutputPage"}

func (ec *executionContext) _OrganisationOutputPage(ctx context.Context, sel ast.SelectionSet, obj *dto.OrganisationOutputPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organisationOutputPageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganisationOutputPage")
		case "pagination":

			out.Values[i] = ec._OrganisationOutputPage_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "organisations":

			out.Values[i] = ec._OrganisationOutputPage_organisations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paginationImplementors = []string{"Pagination"}

func (ec *executionContext) _Pagination(ctx context.Context, sel ast.SelectionSet, obj *domain.Pagination) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paginationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Pagination")
		case "limit":

			out.Values[i] = ec._Pagination_limit(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "currentPage":

			out.Values[i] = ec._Pagination_currentPage(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":

			out.Values[i] = ec._Pagination_count(ctx, field, obj)

		case "totalPages":

			out.Values[i] = ec._Pagination_totalPages(ctx, field, obj)

		case "nextPage":

			out.Values[i] = ec._Pagination_nextPage(ctx, field, obj)

		case "previousPage":

			out.Values[i] = ec._Pagination_previousPage(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postingHoursImplementors = []string{"PostingHours"}

func (ec *executionContext) _PostingHours(ctx context.Context, sel ast.SelectionSet, obj *domain.PostingHours) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postingHoursImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PostingHours")
		case "start":

			out.Values[i] = ec._PostingHours_start(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "end":

			out.Values[i] = ec._PostingHours_end(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var programImplementors = []string{"Program"}

func (ec *executionContext) _Program(ctx context.Context, sel ast.SelectionSet, obj *domain.Program) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, programImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Program")
		case "id":

			out.Values[i] = ec._Program_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":

			out.Values[i] = ec._Program_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Program_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "organisation":

			out.Values[i] = ec._Program_organisation(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var programOutputImplementors = []string{"ProgramOutput"}

func (ec *executionContext) _ProgramOutput(ctx context.Context, sel ast.SelectionSet, obj *dto.ProgramOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, programOutputImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProgramOutput")
		case "count":

			out.Values[i] = ec._ProgramOutput_count(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "programs":

			out.Values[i] = ec._ProgramOutput_programs(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var programPageImplementors = []string{"ProgramPage"}

func (ec *executionContext) _ProgramPage(ctx context.Context, sel ast.SelectionSet, obj *domain.ProgramPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, programPageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProgramPage")
		case "programs":

			out.Values[i] = ec._ProgramPage_programs(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._ProgramPage_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "fetchClientAppointments":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fetchClientAppointments(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "nextRefill":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_nextRefill(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserRoles":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserRoles(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getAllAuthorityRoles":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllAuthorityRoles(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listMembers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listMembers(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listCommunityBannedMembers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listCommunityBannedMembers(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "inviteMembersToCommunity":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_inviteMembersToCommunity(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listCommunities":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listCommunities(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listCommunityMembers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listCommunityMembers(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listPendingInvites":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listPendingInvites(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "recommendedCommunities":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recommendedCommunities(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listFlaggedMessages":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listFlaggedMessages(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getContent":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getContent(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listContentCategories":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listContentCategories(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserBookmarkedContent":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserBookmarkedContent(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "checkIfUserHasLikedContent":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_checkIfUserHasLikedContent(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "checkIfUserBookmarkedContent":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_checkIfUserBookmarkedContent(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getFAQs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getFAQs(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "searchFacility":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchFacility(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "retrieveFacility":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_retrieveFacility(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "retrieveFacilityByIdentifier":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_retrieveFacilityByIdentifier(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listFacilities":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listFacilities(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "canRecordMood":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_canRecordMood(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getHealthDiaryQuote":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getHealthDiaryQuote(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getClientHealthDiaryEntries":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getClientHealthDiaryEntries(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getSharedHealthDiaryEntries":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSharedHealthDiaryEntries(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "fetchNotifications":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fetchNotifications(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "fetchNotificationTypeFilters":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fetchNotificationTypeFilters(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listOrganisations":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listOrganisations(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "searchOrganisations":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchOrganisations(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sendOTP":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sendOTP(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listUserPrograms":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listUserPrograms(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getProgramFacilities":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getProgramFacilities(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "searchPrograms":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchPrograms(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listPrograms":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listPrograms(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getAvailableScreeningTools":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAvailableScreeningTools(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getScreeningToolByID":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getScreeningToolByID(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getFacilityRespondedScreeningTools":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getFacilityRespondedScreeningTools(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getScreeningToolRespondents":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getScreeningToolRespondents(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getScreeningToolResponse":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getScreeningToolResponse(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getScreeningToolQuestions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getScreeningToolQuestions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getAvailableScreeningToolQuestions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAvailableScreeningToolQuestions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getAvailableFacilityScreeningTools":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAvailableFacilityScreeningTools(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getAssessmentResponsesByToolType":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAssessmentResponsesByToolType(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getScreeningToolServiceRequestResponses":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getScreeningToolServiceRequestResponses(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getSecurityQuestions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSecurityQuestions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getServiceRequests":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getServiceRequests(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPendingServiceRequestsCount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPendingServiceRequestsCount(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "searchServiceRequests":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchServiceRequests(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listSurveys":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listSurveys(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getUserSurveyForms":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserSurveyForms(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listSurveyRespondents":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listSurveyRespondents(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getSurveyServiceRequestUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSurveyServiceRequestUser(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getSurveyResponse":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSurveyResponse(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getSurveyWithServiceRequest":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSurveyWithServiceRequest(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getCurrentTerms":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCurrentTerms(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "verifyPIN":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_verifyPIN(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "searchClientUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchClientUser(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "searchStaffUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchStaffUser(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "searchCaregiverUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchCaregiverUser(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getClientProfileByCCCNumber":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getClientProfileByCCCNumber(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getCaregiverManagedClients":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCaregiverManagedClients(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listClientsCaregivers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listClientsCaregivers(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getStaffFacilities":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getStaffFacilities(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getClientFacilities":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getClientFacilities(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "checkIdentifierExists":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_checkIdentifierExists(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "_service":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__service(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	return out
}

var questionImplementors = []string{"Question"}

func (ec *executionContext) _Question(ctx context.Context, sel ast.SelectionSet, obj *domain.Question) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, questionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Question")
		case "id":

			out.Values[i] = ec._Question_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":

			out.Values[i] = ec._Question_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "questionnaireID":

			out.Values[i] = ec._Question_questionnaireID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "text":

			out.Values[i] = ec._Question_text(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "questionType":

			out.Values[i] = ec._Question_questionType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "responseValueType":

			out.Values[i] = ec._Question_responseValueType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "required":

			out.Values[i] = ec._Question_required(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "selectMultiple":

			out.Values[i] = ec._Question_selectMultiple(ctx, field, obj)

		case "sequence":

			out.Values[i] = ec._Question_sequence(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "choices":

			out.Values[i] = ec._Question_choices(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var questionInputChoiceImplementors = []string{"QuestionInputChoice"}

func (ec *executionContext) _QuestionInputChoice(ctx context.Context, sel ast.SelectionSet, obj *domain.QuestionInputChoice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, questionInputChoiceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuestionInputChoice")
		case "id":

			out.Values[i] = ec._QuestionInputChoice_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":

			out.Values[i] = ec._QuestionInputChoice_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "questionID":

			out.Values[i] = ec._QuestionInputChoice_questionID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "choice":

			out.Values[i] = ec._QuestionInputChoice_choice(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":

			out.Values[i] = ec._QuestionInputChoice_value(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "score":

			out.Values[i] = ec._QuestionInputChoice_score(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var questionnaireImplementors = []string{"Questionnaire"}

func (ec *executionContext) _Questionnaire(ctx context.Context, sel ast.SelectionSet, obj *domain.Questionnaire) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, questionnaireImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Questionnaire")
		case "id":

			out.Values[i] = ec._Questionnaire_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":

			out.Values[i] = ec._Questionnaire_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Questionnaire_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._Questionnaire_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "questions":

			out.Values[i] = ec._Questionnaire_questions(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var questionnaireScreeningToolQuestionResponseImplementors = []string{"QuestionnaireScreeningToolQuestionResponse"}

func (ec *executionContext) _QuestionnaireScreeningToolQuestionResponse(ctx context.Context, sel ast.SelectionSet, obj *domain.QuestionnaireScreeningToolQuestionResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, questionnaireScreeningToolQuestionResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuestionnaireScreeningToolQuestionResponse")
		case "id":

			out.Values[i] = ec._QuestionnaireScreeningToolQuestionResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":

			out.Values[i] = ec._QuestionnaireScreeningToolQuestionResponse_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "screeningToolResponseID":

			out.Values[i] = ec._QuestionnaireScreeningToolQuestionResponse_screeningToolResponseID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "questionID":

			out.Values[i] = ec._QuestionnaireScreeningToolQuestionResponse_questionID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "questionType":

			out.Values[i] = ec._QuestionnaireScreeningToolQuestionResponse_questionType(ctx, field, obj)

		case "selectMultiple":

			out.Values[i] = ec._QuestionnaireScreeningToolQuestionResponse_selectMultiple(ctx, field, obj)

		case "responseValueType":

			out.Values[i] = ec._QuestionnaireScreeningToolQuestionResponse_responseValueType(ctx, field, obj)

		case "sequence":

			out.Values[i] = ec._QuestionnaireScreeningToolQuestionResponse_sequence(ctx, field, obj)

		case "questionText":

			out.Values[i] = ec._QuestionnaireScreeningToolQuestionResponse_questionText(ctx, field, obj)

		case "response":

			out.Values[i] = ec._QuestionnaireScreeningToolQuestionResponse_response(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "normalizedResponse":

			out.Values[i] = ec._QuestionnaireScreeningToolQuestionResponse_normalizedResponse(ctx, field, obj)

		case "score":

			out.Values[i] = ec._QuestionnaireScreeningToolQuestionResponse_score(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var questionnaireScreeningToolResponseImplementors = []string{"QuestionnaireScreeningToolResponse"}

func (ec *executionContext) _QuestionnaireScreeningToolResponse(ctx context.Context, sel ast.SelectionSet, obj *domain.QuestionnaireScreeningToolResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, questionnaireScreeningToolResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuestionnaireScreeningToolResponse")
		case "id":

			out.Values[i] = ec._QuestionnaireScreeningToolResponse_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":

			out.Values[i] = ec._QuestionnaireScreeningToolResponse_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "screeningToolID":

			out.Values[i] = ec._QuestionnaireScreeningToolResponse_screeningToolID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "facilityID":

			out.Values[i] = ec._QuestionnaireScreeningToolResponse_facilityID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clientID":

			out.Values[i] = ec._QuestionnaireScreeningToolResponse_clientID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "aggregateScore":

			out.Values[i] = ec._QuestionnaireScreeningToolResponse_aggregateScore(ctx, field, obj)

		case "questionResponses":

			out.Values[i] = ec._QuestionnaireScreeningToolResponse_questionResponses(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var reactionImplementors = []string{"Reaction"}

func (ec *executionContext) _Reaction(ctx context.Context, sel ast.SelectionSet, obj *domain.Reaction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reactionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Reaction")
		case "message_id":

			out.Values[i] = ec._Reaction_message_id(ctx, field, obj)

		case "user_id":

			out.Values[i] = ec._Reaction_user_id(ctx, field, obj)

		case "type":

			out.Values[i] = ec._Reaction_type(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recordSecurityQuestionResponseImplementors = []string{"RecordSecurityQuestionResponse"}

func (ec *executionContext) _RecordSecurityQuestionResponse(ctx context.Context, sel ast.SelectionSet, obj *domain.RecordSecurityQuestionResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recordSecurityQuestionResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecordSecurityQuestionResponse")
		case "securityQuestionID":

			out.Values[i] = ec._RecordSecurityQuestionResponse_securityQuestionID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isCorrect":

			out.Values[i] = ec._RecordSecurityQuestionResponse_isCorrect(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var requestTypeCountImplementors = []string{"RequestTypeCount"}

func (ec *executionContext) _RequestTypeCount(ctx context.Context, sel ast.SelectionSet, obj *domain.RequestTypeCount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, requestTypeCountImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RequestTypeCount")
		case "requestType":

			out.Values[i] = ec._RequestTypeCount_requestType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total":

			out.Values[i] = ec._RequestTypeCount_total(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var screeningToolImplementors = []string{"ScreeningTool"}

func (ec *executionContext) _ScreeningTool(ctx context.Context, sel ast.SelectionSet, obj *domain.ScreeningTool) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, screeningToolImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScreeningTool")
		case "id":

			out.Values[i] = ec._ScreeningTool_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":

			out.Values[i] = ec._ScreeningTool_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "questionnaireID":

			out.Values[i] = ec._ScreeningTool_questionnaireID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "threshold":

			out.Values[i] = ec._ScreeningTool_threshold(ctx, field, obj)

		case "clientTypes":

			out.Values[i] = ec._ScreeningTool_clientTypes(ctx, field, obj)

		case "genders":

			out.Values[i] = ec._ScreeningTool_genders(ctx, field, obj)

		case "ageRange":

			out.Values[i] = ec._ScreeningTool_ageRange(ctx, field, obj)

		case "questionnaire":

			out.Values[i] = ec._ScreeningTool_questionnaire(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var screeningToolAssessmentResponseImplementors = []string{"ScreeningToolAssessmentResponse"}

func (ec *executionContext) _ScreeningToolAssessmentResponse(ctx context.Context, sel ast.SelectionSet, obj *domain.ScreeningToolAssessmentResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, screeningToolAssessmentResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScreeningToolAssessmentResponse")
		case "clientName":

			out.Values[i] = ec._ScreeningToolAssessmentResponse_clientName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dateAnswered":

			out.Values[i] = ec._ScreeningToolAssessmentResponse_dateAnswered(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clientID":

			out.Values[i] = ec._ScreeningToolAssessmentResponse_clientID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var screeningToolPageImplementors = []string{"ScreeningToolPage"}

func (ec *executionContext) _ScreeningToolPage(ctx context.Context, sel ast.SelectionSet, obj *domain.ScreeningToolPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, screeningToolPageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScreeningToolPage")
		case "screeningTools":

			out.Values[i] = ec._ScreeningToolPage_screeningTools(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._ScreeningToolPage_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var screeningToolQuestionImplementors = []string{"ScreeningToolQuestion"}

func (ec *executionContext) _ScreeningToolQuestion(ctx context.Context, sel ast.SelectionSet, obj *domain.ScreeningToolQuestion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, screeningToolQuestionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScreeningToolQuestion")
		case "id":

			out.Values[i] = ec._ScreeningToolQuestion_id(ctx, field, obj)

		case "question":

			out.Values[i] = ec._ScreeningToolQuestion_question(ctx, field, obj)

		case "toolType":

			out.Values[i] = ec._ScreeningToolQuestion_toolType(ctx, field, obj)

		case "responseChoices":

			out.Values[i] = ec._ScreeningToolQuestion_responseChoices(ctx, field, obj)

		case "responseType":

			out.Values[i] = ec._ScreeningToolQuestion_responseType(ctx, field, obj)

		case "responseCategory":

			out.Values[i] = ec._ScreeningToolQuestion_responseCategory(ctx, field, obj)

		case "sequence":

			out.Values[i] = ec._ScreeningToolQuestion_sequence(ctx, field, obj)

		case "active":

			out.Values[i] = ec._ScreeningToolQuestion_active(ctx, field, obj)

		case "meta":

			out.Values[i] = ec._ScreeningToolQuestion_meta(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var screeningToolRespondentImplementors = []string{"ScreeningToolRespondent"}

func (ec *executionContext) _ScreeningToolRespondent(ctx context.Context, sel ast.SelectionSet, obj *domain.ScreeningToolRespondent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, screeningToolRespondentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScreeningToolRespondent")
		case "clientID":

			out.Values[i] = ec._ScreeningToolRespondent_clientID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "screeningToolResponseID":

			out.Values[i] = ec._ScreeningToolRespondent_screeningToolResponseID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "serviceRequestID":

			out.Values[i] = ec._ScreeningToolRespondent_serviceRequestID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._ScreeningToolRespondent_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phoneNumber":

			out.Values[i] = ec._ScreeningToolRespondent_phoneNumber(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "serviceRequest":

			out.Values[i] = ec._ScreeningToolRespondent_serviceRequest(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var screeningToolRespondentsPageImplementors = []string{"ScreeningToolRespondentsPage"}

func (ec *executionContext) _ScreeningToolRespondentsPage(ctx context.Context, sel ast.SelectionSet, obj *domain.ScreeningToolRespondentsPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, screeningToolRespondentsPageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScreeningToolRespondentsPage")
		case "screeningToolRespondents":

			out.Values[i] = ec._ScreeningToolRespondentsPage_screeningToolRespondents(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._ScreeningToolRespondentsPage_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var screeningToolResponseImplementors = []string{"ScreeningToolResponse"}

func (ec *executionContext) _ScreeningToolResponse(ctx context.Context, sel ast.SelectionSet, obj *domain.ScreeningToolResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, screeningToolResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScreeningToolResponse")
		case "toolIndex":

			out.Values[i] = ec._ScreeningToolResponse_toolIndex(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tool":

			out.Values[i] = ec._ScreeningToolResponse_tool(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "response":

			out.Values[i] = ec._ScreeningToolResponse_response(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var screeningToolResponsePayloadImplementors = []string{"ScreeningToolResponsePayload"}

func (ec *executionContext) _ScreeningToolResponsePayload(ctx context.Context, sel ast.SelectionSet, obj *domain.ScreeningToolResponsePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, screeningToolResponsePayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScreeningToolResponsePayload")
		case "serviceRequestID":

			out.Values[i] = ec._ScreeningToolResponsePayload_serviceRequestID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clientContact":

			out.Values[i] = ec._ScreeningToolResponsePayload_clientContact(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "screeningToolResponses":

			out.Values[i] = ec._ScreeningToolResponsePayload_screeningToolResponses(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var securityQuestionImplementors = []string{"SecurityQuestion"}

func (ec *executionContext) _SecurityQuestion(ctx context.Context, sel ast.SelectionSet, obj *domain.SecurityQuestion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, securityQuestionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SecurityQuestion")
		case "securityQuestionID":

			out.Values[i] = ec._SecurityQuestion_securityQuestionID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "questionStem":

			out.Values[i] = ec._SecurityQuestion_questionStem(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._SecurityQuestion_description(ctx, field, obj)

		case "active":

			out.Values[i] = ec._SecurityQuestion_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "responseType":

			out.Values[i] = ec._SecurityQuestion_responseType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serviceRequestImplementors = []string{"ServiceRequest"}

func (ec *executionContext) _ServiceRequest(ctx context.Context, sel ast.SelectionSet, obj *domain.ServiceRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serviceRequestImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceRequest")
		case "id":

			out.Values[i] = ec._ServiceRequest_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "requestType":

			out.Values[i] = ec._ServiceRequest_requestType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "request":

			out.Values[i] = ec._ServiceRequest_request(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":

			out.Values[i] = ec._ServiceRequest_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clientID":

			out.Values[i] = ec._ServiceRequest_clientID(ctx, field, obj)

		case "staffID":

			out.Values[i] = ec._ServiceRequest_staffID(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._ServiceRequest_createdAt(ctx, field, obj)

		case "inProgressAt":

			out.Values[i] = ec._ServiceRequest_inProgressAt(ctx, field, obj)

		case "inProgressBy":

			out.Values[i] = ec._ServiceRequest_inProgressBy(ctx, field, obj)

		case "resolvedAt":

			out.Values[i] = ec._ServiceRequest_resolvedAt(ctx, field, obj)

		case "resolvedBy":

			out.Values[i] = ec._ServiceRequest_resolvedBy(ctx, field, obj)

		case "resolvedByName":

			out.Values[i] = ec._ServiceRequest_resolvedByName(ctx, field, obj)

		case "facilityID":

			out.Values[i] = ec._ServiceRequest_facilityID(ctx, field, obj)

		case "clientName":

			out.Values[i] = ec._ServiceRequest_clientName(ctx, field, obj)

		case "staffName":

			out.Values[i] = ec._ServiceRequest_staffName(ctx, field, obj)

		case "staffContact":

			out.Values[i] = ec._ServiceRequest_staffContact(ctx, field, obj)

		case "clientContact":

			out.Values[i] = ec._ServiceRequest_clientContact(ctx, field, obj)

		case "meta":

			out.Values[i] = ec._ServiceRequest_meta(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serviceRequestsCountImplementors = []string{"ServiceRequestsCount"}

func (ec *executionContext) _ServiceRequestsCount(ctx context.Context, sel ast.SelectionSet, obj *domain.ServiceRequestsCount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serviceRequestsCountImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceRequestsCount")
		case "requestsTypeCount":

			out.Values[i] = ec._ServiceRequestsCount_requestsTypeCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serviceRequestsCountResponseImplementors = []string{"ServiceRequestsCountResponse"}

func (ec *executionContext) _ServiceRequestsCountResponse(ctx context.Context, sel ast.SelectionSet, obj *domain.ServiceRequestsCountResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serviceRequestsCountResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceRequestsCountResponse")
		case "clientsServiceRequestCount":

			out.Values[i] = ec._ServiceRequestsCountResponse_clientsServiceRequestCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "staffServiceRequestCount":

			out.Values[i] = ec._ServiceRequestsCountResponse_staffServiceRequestCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var spamImplementors = []string{"Spam"}

func (ec *executionContext) _Spam(ctx context.Context, sel ast.SelectionSet, obj *domain.Spam) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, spamImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Spam")
		case "flag":

			out.Values[i] = ec._Spam_flag(ctx, field, obj)

		case "block":

			out.Values[i] = ec._Spam_block(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var staffProfileImplementors = []string{"StaffProfile"}

func (ec *executionContext) _StaffProfile(ctx context.Context, sel ast.SelectionSet, obj *domain.StaffProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, staffProfileImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StaffProfile")
		case "id":

			out.Values[i] = ec._StaffProfile_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":

			out.Values[i] = ec._StaffProfile_user(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":

			out.Values[i] = ec._StaffProfile_userID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":

			out.Values[i] = ec._StaffProfile_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "staffNumber":

			out.Values[i] = ec._StaffProfile_staffNumber(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultFacility":

			out.Values[i] = ec._StaffProfile_defaultFacility(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var staffRegistrationOutputImplementors = []string{"StaffRegistrationOutput"}

func (ec *executionContext) _StaffRegistrationOutput(ctx context.Context, sel ast.SelectionSet, obj *dto.StaffRegistrationOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, staffRegistrationOutputImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StaffRegistrationOutput")
		case "id":

			out.Values[i] = ec._StaffRegistrationOutput_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":

			out.Values[i] = ec._StaffRegistrationOutput_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "staffNumber":

			out.Values[i] = ec._StaffRegistrationOutput_staffNumber(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":

			out.Values[i] = ec._StaffRegistrationOutput_userID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultFacility":

			out.Values[i] = ec._StaffRegistrationOutput_defaultFacility(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var staffResponseImplementors = []string{"StaffResponse"}

func (ec *executionContext) _StaffResponse(ctx context.Context, sel ast.SelectionSet, obj *domain.StaffResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, staffResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StaffResponse")
		case "staffProfile":

			out.Values[i] = ec._StaffResponse_staffProfile(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "roles":

			out.Values[i] = ec._StaffResponse_roles(ctx, field, obj)

		case "permissions":

			out.Values[i] = ec._StaffResponse_permissions(ctx, field, obj)

		case "communityToken":

			out.Values[i] = ec._StaffResponse_communityToken(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var surveyFormImplementors = []string{"SurveyForm"}

func (ec *executionContext) _SurveyForm(ctx context.Context, sel ast.SelectionSet, obj *domain.SurveyForm) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, surveyFormImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SurveyForm")
		case "projectID":

			out.Values[i] = ec._SurveyForm_projectID(ctx, field, obj)

		case "xmlFormID":

			out.Values[i] = ec._SurveyForm_xmlFormID(ctx, field, obj)

		case "name":

			out.Values[i] = ec._SurveyForm_name(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var surveyRespondentImplementors = []string{"SurveyRespondent"}

func (ec *executionContext) _SurveyRespondent(ctx context.Context, sel ast.SelectionSet, obj *domain.SurveyRespondent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, surveyRespondentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SurveyRespondent")
		case "id":

			out.Values[i] = ec._SurveyRespondent_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._SurveyRespondent_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "submittedAt":

			out.Values[i] = ec._SurveyRespondent_submittedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectID":

			out.Values[i] = ec._SurveyRespondent_projectID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "submitterID":

			out.Values[i] = ec._SurveyRespondent_submitterID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "formID":

			out.Values[i] = ec._SurveyRespondent_formID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var surveyRespondentPageImplementors = []string{"SurveyRespondentPage"}

func (ec *executionContext) _SurveyRespondentPage(ctx context.Context, sel ast.SelectionSet, obj *domain.SurveyRespondentPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, surveyRespondentPageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SurveyRespondentPage")
		case "surveyRespondents":

			out.Values[i] = ec._SurveyRespondentPage_surveyRespondents(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._SurveyRespondentPage_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var surveyResponseImplementors = []string{"SurveyResponse"}

func (ec *executionContext) _SurveyResponse(ctx context.Context, sel ast.SelectionSet, obj *domain.SurveyResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, surveyResponseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SurveyResponse")
		case "question":

			out.Values[i] = ec._SurveyResponse_question(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "answer":

			out.Values[i] = ec._SurveyResponse_answer(ctx, field, obj)

		case "questionType":

			out.Values[i] = ec._SurveyResponse_questionType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var surveyServiceRequestUserImplementors = []string{"SurveyServiceRequestUser"}

func (ec *executionContext) _SurveyServiceRequestUser(ctx context.Context, sel ast.SelectionSet, obj *domain.SurveyServiceRequestUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, surveyServiceRequestUserImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SurveyServiceRequestUser")
		case "name":

			out.Values[i] = ec._SurveyServiceRequestUser_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "formID":

			out.Values[i] = ec._SurveyServiceRequestUser_formID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectID":

			out.Values[i] = ec._SurveyServiceRequestUser_projectID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "submitterID":

			out.Values[i] = ec._SurveyServiceRequestUser_submitterID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "surveyName":

			out.Values[i] = ec._SurveyServiceRequestUser_surveyName(ctx, field, obj)

		case "serviceRequestID":

			out.Values[i] = ec._SurveyServiceRequestUser_serviceRequestID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phoneNumber":

			out.Values[i] = ec._SurveyServiceRequestUser_phoneNumber(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var surveyServiceRequestUserPageImplementors = []string{"SurveyServiceRequestUserPage"}

func (ec *executionContext) _SurveyServiceRequestUserPage(ctx context.Context, sel ast.SelectionSet, obj *domain.SurveyServiceRequestUserPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, surveyServiceRequestUserPageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SurveyServiceRequestUserPage")
		case "users":

			out.Values[i] = ec._SurveyServiceRequestUserPage_users(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pagination":

			out.Values[i] = ec._SurveyServiceRequestUserPage_pagination(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var surveysWithServiceRequestImplementors = []string{"SurveysWithServiceRequest"}

func (ec *executionContext) _SurveysWithServiceRequest(ctx context.Context, sel ast.SelectionSet, obj *dto.SurveysWithServiceRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, surveysWithServiceRequestImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SurveysWithServiceRequest")
		case "title":

			out.Values[i] = ec._SurveysWithServiceRequest_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectID":

			out.Values[i] = ec._SurveysWithServiceRequest_projectID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "formID":

			out.Values[i] = ec._SurveysWithServiceRequest_formID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "linkID":

			out.Values[i] = ec._SurveysWithServiceRequest_linkID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var termsOfServiceImplementors = []string{"TermsOfService"}

func (ec *executionContext) _TermsOfService(ctx context.Context, sel ast.SelectionSet, obj *domain.TermsOfService) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, termsOfServiceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TermsOfService")
		case "termsID":

			out.Values[i] = ec._TermsOfService_termsID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "text":

			out.Values[i] = ec._TermsOfService_text(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var toxicImplementors = []string{"Toxic"}

func (ec *executionContext) _Toxic(ctx context.Context, sel ast.SelectionSet, obj *domain.Toxic) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, toxicImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Toxic")
		case "flag":

			out.Values[i] = ec._Toxic_flag(ctx, field, obj)

		case "block":

			out.Values[i] = ec._Toxic_block(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *domain.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":

			out.Values[i] = ec._User_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "username":

			out.Values[i] = ec._User_username(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._User_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gender":

			out.Values[i] = ec._User_gender(ctx, field, obj)

		case "active":

			out.Values[i] = ec._User_active(ctx, field, obj)

		case "contacts":

			out.Values[i] = ec._User_contacts(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isPhoneVerified":

			out.Values[i] = ec._User_isPhoneVerified(ctx, field, obj)

		case "termsAccepted":

			out.Values[i] = ec._User_termsAccepted(ctx, field, obj)

		case "acceptedTermsID":

			out.Values[i] = ec._User_acceptedTermsID(ctx, field, obj)

		case "suspended":

			out.Values[i] = ec._User_suspended(ctx, field, obj)

		case "dateOfBirth":

			out.Values[i] = ec._User_dateOfBirth(ctx, field, obj)

		case "currentOrganizationID":

			out.Values[i] = ec._User_currentOrganizationID(ctx, field, obj)

		case "currentProgramID":

			out.Values[i] = ec._User_currentProgramID(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userSurveyImplementors = []string{"UserSurvey"}

func (ec *executionContext) _UserSurvey(ctx context.Context, sel ast.SelectionSet, obj *domain.UserSurvey) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userSurveyImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserSurvey")
		case "id":

			out.Values[i] = ec._UserSurvey_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":

			out.Values[i] = ec._UserSurvey_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "created":

			out.Values[i] = ec._UserSurvey_created(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "link":

			out.Values[i] = ec._UserSurvey_link(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":

			out.Values[i] = ec._UserSurvey_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._UserSurvey_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasSubmitted":

			out.Values[i] = ec._UserSurvey_hasSubmitted(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":

			out.Values[i] = ec._UserSurvey_userID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "token":

			out.Values[i] = ec._UserSurvey_token(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "projectID":

			out.Values[i] = ec._UserSurvey_projectID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "formID":

			out.Values[i] = ec._UserSurvey_formID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "linkID":

			out.Values[i] = ec._UserSurvey_linkID(ctx, field, obj)

		case "programID":

			out.Values[i] = ec._UserSurvey_programID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "organisationID":

			out.Values[i] = ec._UserSurvey_organisationID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var workStationDetailsImplementors = []string{"WorkStationDetails"}

func (ec *executionContext) _WorkStationDetails(ctx context.Context, sel ast.SelectionSet, obj *domain.WorkStationDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, workStationDetailsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WorkStationDetails")
		case "notifications":

			out.Values[i] = ec._WorkStationDetails_notifications(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "surveys":

			out.Values[i] = ec._WorkStationDetails_surveys(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "articles":

			out.Values[i] = ec._WorkStationDetails_articles(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "messages":

			out.Values[i] = ec._WorkStationDetails_messages(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "serviceRequests":

			out.Values[i] = ec._WorkStationDetails_serviceRequests(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var _ServiceImplementors = []string{"_Service"}

func (ec *executionContext) __Service(ctx context.Context, sel ast.SelectionSet, obj *fedruntime.Service) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _ServiceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_Service")
		case "sdl":

			out.Values[i] = ec.__Service_sdl(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAny2interface(ctx context.Context, v interface{}) (interface{}, error) {
	res, err := graphql.UnmarshalAny(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAny2interface(ctx context.Context, sel ast.SelectionSet, v interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalAny(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNAppointment2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAppointment(ctx context.Context, sel ast.SelectionSet, v []*domain.Appointment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAppointment2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAppointment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNAuthor2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAuthor(ctx context.Context, sel ast.SelectionSet, v domain.Author) graphql.Marshaler {
	return ec._Author(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthorityPermission2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAuthorityPermission(ctx context.Context, sel ast.SelectionSet, v *domain.AuthorityPermission) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuthorityPermission(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthorityRole2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAuthorityRole(ctx context.Context, sel ast.SelectionSet, v *domain.AuthorityRole) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuthorityRole(ctx, sel, v)
}

func (ec *executionContext) marshalNAvailableScreeningTools2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAvailableScreeningToolsᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.AvailableScreeningTools) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAvailableScreeningTools2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAvailableScreeningTools(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAvailableScreeningTools2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAvailableScreeningTools(ctx context.Context, sel ast.SelectionSet, v *domain.AvailableScreeningTools) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AvailableScreeningTools(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCaregiverInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐCaregiverInput(ctx context.Context, v interface{}) (dto.CaregiverInput, error) {
	res, err := ec.unmarshalInputCaregiverInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCaregiverProfile2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCaregiverProfile(ctx context.Context, sel ast.SelectionSet, v domain.CaregiverProfile) graphql.Marshaler {
	return ec._CaregiverProfile(ctx, sel, &v)
}

func (ec *executionContext) marshalNCaregiverProfile2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCaregiverProfile(ctx context.Context, sel ast.SelectionSet, v []*domain.CaregiverProfile) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCaregiverProfile2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCaregiverProfile(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNCaregiverProfile2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCaregiverProfile(ctx context.Context, sel ast.SelectionSet, v *domain.CaregiverProfile) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CaregiverProfile(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCaregiverType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐCaregiverType(ctx context.Context, v interface{}) (enums.CaregiverType, error) {
	var res enums.CaregiverType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCaregiverType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐCaregiverType(ctx context.Context, sel ast.SelectionSet, v enums.CaregiverType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNClientCaregiverInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐClientCaregiverInput(ctx context.Context, v interface{}) (dto.ClientCaregiverInput, error) {
	res, err := ec.unmarshalInputClientCaregiverInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNClientHealthDiaryEntry2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientHealthDiaryEntry(ctx context.Context, sel ast.SelectionSet, v []*domain.ClientHealthDiaryEntry) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOClientHealthDiaryEntry2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientHealthDiaryEntry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNClientHealthDiaryEntry2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientHealthDiaryEntryᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.ClientHealthDiaryEntry) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClientHealthDiaryEntry2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientHealthDiaryEntry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNClientHealthDiaryEntry2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientHealthDiaryEntry(ctx context.Context, sel ast.SelectionSet, v *domain.ClientHealthDiaryEntry) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClientHealthDiaryEntry(ctx, sel, v)
}

func (ec *executionContext) marshalNClientHealthDiaryQuote2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientHealthDiaryQuoteᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.ClientHealthDiaryQuote) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClientHealthDiaryQuote2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientHealthDiaryQuote(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNClientHealthDiaryQuote2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientHealthDiaryQuote(ctx context.Context, sel ast.SelectionSet, v *domain.ClientHealthDiaryQuote) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClientHealthDiaryQuote(ctx, sel, v)
}

func (ec *executionContext) unmarshalNClientIdentifierType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientIdentifierType(ctx context.Context, v interface{}) (enums.ClientIdentifierType, error) {
	var res enums.ClientIdentifierType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNClientIdentifierType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientIdentifierType(ctx context.Context, sel ast.SelectionSet, v enums.ClientIdentifierType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNClientProfile2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientProfile(ctx context.Context, sel ast.SelectionSet, v domain.ClientProfile) graphql.Marshaler {
	return ec._ClientProfile(ctx, sel, &v)
}

func (ec *executionContext) marshalNClientProfile2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientProfile(ctx context.Context, sel ast.SelectionSet, v *domain.ClientProfile) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClientProfile(ctx, sel, v)
}

func (ec *executionContext) marshalNClientRegistrationOutput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐClientRegistrationOutput(ctx context.Context, sel ast.SelectionSet, v dto.ClientRegistrationOutput) graphql.Marshaler {
	return ec._ClientRegistrationOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNClientRegistrationOutput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐClientRegistrationOutput(ctx context.Context, sel ast.SelectionSet, v *dto.ClientRegistrationOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClientRegistrationOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNClientResponse2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientResponse(ctx context.Context, sel ast.SelectionSet, v domain.ClientResponse) graphql.Marshaler {
	return ec._ClientResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNClientResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientResponse(ctx context.Context, sel ast.SelectionSet, v *domain.ClientResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ClientResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNClientType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientType(ctx context.Context, v interface{}) (enums.ClientType, error) {
	var res enums.ClientType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNClientType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientType(ctx context.Context, sel ast.SelectionSet, v enums.ClientType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNClientType2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientTypeᚄ(ctx context.Context, v interface{}) ([]enums.ClientType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]enums.ClientType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNClientType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNClientType2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []enums.ClientType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClientType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNClientType2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientTypeᚄ(ctx context.Context, v interface{}) ([]*enums.ClientType, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*enums.ClientType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNClientType2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNClientType2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []*enums.ClientType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClientType2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNClientType2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientType(ctx context.Context, v interface{}) (*enums.ClientType, error) {
	var res = new(enums.ClientType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNClientType2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientType(ctx context.Context, sel ast.SelectionSet, v *enums.ClientType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNCommunity2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCommunity(ctx context.Context, sel ast.SelectionSet, v domain.Community) graphql.Marshaler {
	return ec._Community(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommunity2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCommunity(ctx context.Context, sel ast.SelectionSet, v *domain.Community) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Community(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCommunityInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐCommunityInput(ctx context.Context, v interface{}) (dto.CommunityInput, error) {
	res, err := ec.unmarshalInputCommunityInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConsentState2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐConsentState(ctx context.Context, v interface{}) (enums.ConsentState, error) {
	var res enums.ConsentState
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConsentState2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐConsentState(ctx context.Context, sel ast.SelectionSet, v enums.ConsentState) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNConsentStatus2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐConsentStatus(ctx context.Context, sel ast.SelectionSet, v domain.ConsentStatus) graphql.Marshaler {
	return ec._ConsentStatus(ctx, sel, &v)
}

func (ec *executionContext) marshalNContact2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐContact(ctx context.Context, sel ast.SelectionSet, v *domain.Contact) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Contact(ctx, sel, v)
}

func (ec *executionContext) marshalNContent2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐContent(ctx context.Context, sel ast.SelectionSet, v domain.Content) graphql.Marshaler {
	return ec._Content(ctx, sel, &v)
}

func (ec *executionContext) marshalNContent2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐContent(ctx context.Context, sel ast.SelectionSet, v *domain.Content) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Content(ctx, sel, v)
}

func (ec *executionContext) marshalNContentItem2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐContentItem(ctx context.Context, sel ast.SelectionSet, v domain.ContentItem) graphql.Marshaler {
	return ec._ContentItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNContentItem2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐContentItemᚄ(ctx context.Context, sel ast.SelectionSet, v []domain.ContentItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContentItem2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐContentItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNContentItemCategory2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐContentItemCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.ContentItemCategory) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContentItemCategory2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐContentItemCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNContentItemCategory2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐContentItemCategory(ctx context.Context, sel ast.SelectionSet, v *domain.ContentItemCategory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ContentItemCategory(ctx, sel, v)
}

func (ec *executionContext) marshalNContentMeta2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐContentMeta(ctx context.Context, sel ast.SelectionSet, v domain.ContentMeta) graphql.Marshaler {
	return ec._ContentMeta(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, v interface{}) (scalarutils.Date, error) {
	var res scalarutils.Date
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, sel ast.SelectionSet, v scalarutils.Date) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDocumentData2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐDocumentData(ctx context.Context, sel ast.SelectionSet, v domain.DocumentData) graphql.Marshaler {
	return ec._DocumentData(ctx, sel, &v)
}

func (ec *executionContext) marshalNDocumentMeta2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐDocumentMeta(ctx context.Context, sel ast.SelectionSet, v domain.DocumentMeta) graphql.Marshaler {
	return ec._DocumentMeta(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNExistingUserClientInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐExistingUserClientInput(ctx context.Context, v interface{}) (dto.ExistingUserClientInput, error) {
	res, err := ec.unmarshalInputExistingUserClientInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNExistingUserStaffInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐExistingUserStaffInput(ctx context.Context, v interface{}) (dto.ExistingUserStaffInput, error) {
	res, err := ec.unmarshalInputExistingUserStaffInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFacility2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacility(ctx context.Context, sel ast.SelectionSet, v domain.Facility) graphql.Marshaler {
	return ec._Facility(ctx, sel, &v)
}

func (ec *executionContext) marshalNFacility2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacility(ctx context.Context, sel ast.SelectionSet, v []*domain.Facility) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFacility2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacility(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNFacility2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacility(ctx context.Context, sel ast.SelectionSet, v *domain.Facility) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Facility(ctx, sel, v)
}

func (ec *executionContext) marshalNFacilityIdentifier2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacilityIdentifier(ctx context.Context, sel ast.SelectionSet, v domain.FacilityIdentifier) graphql.Marshaler {
	return ec._FacilityIdentifier(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNFacilityIdentifierInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐFacilityIdentifierInput(ctx context.Context, v interface{}) (dto.FacilityIdentifierInput, error) {
	res, err := ec.unmarshalInputFacilityIdentifierInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFacilityIdentifierType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐFacilityIdentifierType(ctx context.Context, v interface{}) (enums.FacilityIdentifierType, error) {
	var res enums.FacilityIdentifierType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFacilityIdentifierType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐFacilityIdentifierType(ctx context.Context, sel ast.SelectionSet, v enums.FacilityIdentifierType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFeedbackResponseInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐFeedbackResponseInput(ctx context.Context, v interface{}) (dto.FeedbackResponseInput, error) {
	res, err := ec.unmarshalInputFeedbackResponseInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFeedbackType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐFeedbackType(ctx context.Context, v interface{}) (enums.FeedbackType, error) {
	var res enums.FeedbackType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFeedbackType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐFeedbackType(ctx context.Context, sel ast.SelectionSet, v enums.FeedbackType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFieldType2githubᚗcomᚋsavannahghiᚋenumutilsᚐFieldType(ctx context.Context, v interface{}) (enumutils.FieldType, error) {
	var res enumutils.FieldType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFieldType2githubᚗcomᚋsavannahghiᚋenumutilsᚐFieldType(ctx context.Context, sel ast.SelectionSet, v enumutils.FieldType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFilterParam2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFilterParam(ctx context.Context, v interface{}) (*firebasetools.FilterParam, error) {
	res, err := ec.unmarshalInputFilterParam(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFirebaseSimpleNotificationInput2githubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFirebaseSimpleNotificationInput(ctx context.Context, v interface{}) (firebasetools.FirebaseSimpleNotificationInput, error) {
	res, err := ec.unmarshalInputFirebaseSimpleNotificationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx context.Context, v interface{}) (feedlib.Flavour, error) {
	var res feedlib.Flavour
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx context.Context, sel ast.SelectionSet, v feedlib.Flavour) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNGender2githubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx context.Context, v interface{}) (enumutils.Gender, error) {
	var res enumutils.Gender
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGender2githubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx context.Context, sel ast.SelectionSet, v enumutils.Gender) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNGender2ᚕgithubᚗcomᚋsavannahghiᚋenumutilsᚐGenderᚄ(ctx context.Context, v interface{}) ([]enumutils.Gender, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]enumutils.Gender, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGender2githubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNGender2ᚕgithubᚗcomᚋsavannahghiᚋenumutilsᚐGenderᚄ(ctx context.Context, sel ast.SelectionSet, v []enumutils.Gender) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGender2githubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNGender2ᚕᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐGenderᚄ(ctx context.Context, v interface{}) ([]*enumutils.Gender, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*enumutils.Gender, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGender2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNGender2ᚕᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐGenderᚄ(ctx context.Context, sel ast.SelectionSet, v []*enumutils.Gender) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGender2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNGender2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx context.Context, v interface{}) (*enumutils.Gender, error) {
	var res = new(enumutils.Gender)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGender2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx context.Context, sel ast.SelectionSet, v *enumutils.Gender) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNImageDetail2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐImageDetail(ctx context.Context, sel ast.SelectionSet, v domain.ImageDetail) graphql.Marshaler {
	return ec._ImageDetail(ctx, sel, &v)
}

func (ec *executionContext) marshalNImageMeta2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐImageMeta(ctx context.Context, sel ast.SelectionSet, v domain.ImageMeta) graphql.Marshaler {
	return ec._ImageMeta(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNManagedClient2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐManagedClient(ctx context.Context, sel ast.SelectionSet, v []*domain.ManagedClient) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOManagedClient2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐManagedClient(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNMember2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐMember(ctx context.Context, sel ast.SelectionSet, v domain.Member) graphql.Marshaler {
	return ec._Member(ctx, sel, &v)
}

func (ec *executionContext) marshalNMeta2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐMeta(ctx context.Context, sel ast.SelectionSet, v domain.Meta) graphql.Marshaler {
	return ec._Meta(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNMetricInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐMetric(ctx context.Context, v interface{}) (domain.Metric, error) {
	res, err := ec.unmarshalInputMetricInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMetricType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐMetricType(ctx context.Context, v interface{}) (enums.MetricType, error) {
	var res enums.MetricType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMetricType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐMetricType(ctx context.Context, sel ast.SelectionSet, v enums.MetricType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNNotification2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐNotification(ctx context.Context, sel ast.SelectionSet, v []*domain.Notification) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONotification2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐNotification(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNNotificationType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐNotificationType(ctx context.Context, v interface{}) (enums.NotificationType, error) {
	var res enums.NotificationType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNotificationType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐNotificationType(ctx context.Context, sel ast.SelectionSet, v enums.NotificationType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNNotificationType2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐNotificationType(ctx context.Context, v interface{}) (*enums.NotificationType, error) {
	var res = new(enums.NotificationType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNotificationType2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐNotificationType(ctx context.Context, sel ast.SelectionSet, v *enums.NotificationType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNOTPResponse2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐOTPResponse(ctx context.Context, sel ast.SelectionSet, v domain.OTPResponse) graphql.Marshaler {
	return ec._OTPResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNOTPResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐOTPResponse(ctx context.Context, sel ast.SelectionSet, v *domain.OTPResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OTPResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOperation2githubᚗcomᚋsavannahghiᚋenumutilsᚐOperation(ctx context.Context, v interface{}) (enumutils.Operation, error) {
	var res enumutils.Operation
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOperation2githubᚗcomᚋsavannahghiᚋenumutilsᚐOperation(ctx context.Context, sel ast.SelectionSet, v enumutils.Operation) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNOrganisation2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐOrganisation(ctx context.Context, sel ast.SelectionSet, v domain.Organisation) graphql.Marshaler {
	return ec._Organisation(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganisation2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐOrganisation(ctx context.Context, sel ast.SelectionSet, v []*domain.Organisation) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOrganisation2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐOrganisation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNOrganisation2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐOrganisation(ctx context.Context, sel ast.SelectionSet, v *domain.Organisation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Organisation(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganisationInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐOrganisationInput(ctx context.Context, v interface{}) (dto.OrganisationInput, error) {
	res, err := ec.unmarshalInputOrganisationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrganisationOutputPage2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐOrganisationOutputPage(ctx context.Context, sel ast.SelectionSet, v dto.OrganisationOutputPage) graphql.Marshaler {
	return ec._OrganisationOutputPage(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganisationOutputPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐOrganisationOutputPage(ctx context.Context, sel ast.SelectionSet, v *dto.OrganisationOutputPage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrganisationOutputPage(ctx, sel, v)
}

func (ec *executionContext) marshalNPagination2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐPagination(ctx context.Context, sel ast.SelectionSet, v domain.Pagination) graphql.Marshaler {
	return ec._Pagination(ctx, sel, &v)
}

func (ec *executionContext) marshalNPagination2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐPagination(ctx context.Context, sel ast.SelectionSet, v *domain.Pagination) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Pagination(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPaginationsInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐPaginationsInput(ctx context.Context, v interface{}) (dto.PaginationsInput, error) {
	res, err := ec.unmarshalInputPaginationsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProgram2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐProgram(ctx context.Context, sel ast.SelectionSet, v []*domain.Program) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProgram2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐProgram(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNProgram2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐProgram(ctx context.Context, sel ast.SelectionSet, v *domain.Program) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Program(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProgramInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐProgramInput(ctx context.Context, v interface{}) (dto.ProgramInput, error) {
	res, err := ec.unmarshalInputProgramInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProgramOutput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐProgramOutput(ctx context.Context, sel ast.SelectionSet, v dto.ProgramOutput) graphql.Marshaler {
	return ec._ProgramOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNProgramOutput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐProgramOutput(ctx context.Context, sel ast.SelectionSet, v *dto.ProgramOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProgramOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNProgramPage2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐProgramPage(ctx context.Context, sel ast.SelectionSet, v domain.ProgramPage) graphql.Marshaler {
	return ec._ProgramPage(ctx, sel, &v)
}

func (ec *executionContext) marshalNProgramPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐProgramPage(ctx context.Context, sel ast.SelectionSet, v *domain.ProgramPage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProgramPage(ctx, sel, v)
}

func (ec *executionContext) marshalNQuestion2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐQuestion(ctx context.Context, sel ast.SelectionSet, v domain.Question) graphql.Marshaler {
	return ec._Question(ctx, sel, &v)
}

func (ec *executionContext) marshalNQuestion2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐQuestionᚄ(ctx context.Context, sel ast.SelectionSet, v []domain.Question) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNQuestion2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐQuestion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNQuestionInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐQuestionInputᚄ(ctx context.Context, v interface{}) ([]*dto.QuestionInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*dto.QuestionInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNQuestionInput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐQuestionInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNQuestionInput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐQuestionInput(ctx context.Context, v interface{}) (*dto.QuestionInput, error) {
	res, err := ec.unmarshalInputQuestionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNQuestionResponseValueType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐQuestionResponseValueType(ctx context.Context, v interface{}) (enums.QuestionResponseValueType, error) {
	var res enums.QuestionResponseValueType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNQuestionResponseValueType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐQuestionResponseValueType(ctx context.Context, sel ast.SelectionSet, v enums.QuestionResponseValueType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNQuestionType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐQuestionType(ctx context.Context, v interface{}) (enums.QuestionType, error) {
	var res enums.QuestionType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNQuestionType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐQuestionType(ctx context.Context, sel ast.SelectionSet, v enums.QuestionType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNQuestionnaireInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐQuestionnaireInput(ctx context.Context, v interface{}) (dto.QuestionnaireInput, error) {
	res, err := ec.unmarshalInputQuestionnaireInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNQuestionnaireScreeningToolQuestionResponse2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐQuestionnaireScreeningToolQuestionResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.QuestionnaireScreeningToolQuestionResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNQuestionnaireScreeningToolQuestionResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐQuestionnaireScreeningToolQuestionResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNQuestionnaireScreeningToolQuestionResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐQuestionnaireScreeningToolQuestionResponse(ctx context.Context, sel ast.SelectionSet, v *domain.QuestionnaireScreeningToolQuestionResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._QuestionnaireScreeningToolQuestionResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNQuestionnaireScreeningToolQuestionResponseInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐQuestionnaireScreeningToolQuestionResponseInputᚄ(ctx context.Context, v interface{}) ([]*dto.QuestionnaireScreeningToolQuestionResponseInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*dto.QuestionnaireScreeningToolQuestionResponseInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNQuestionnaireScreeningToolQuestionResponseInput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐQuestionnaireScreeningToolQuestionResponseInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNQuestionnaireScreeningToolQuestionResponseInput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐQuestionnaireScreeningToolQuestionResponseInput(ctx context.Context, v interface{}) (*dto.QuestionnaireScreeningToolQuestionResponseInput, error) {
	res, err := ec.unmarshalInputQuestionnaireScreeningToolQuestionResponseInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNQuestionnaireScreeningToolResponse2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐQuestionnaireScreeningToolResponse(ctx context.Context, sel ast.SelectionSet, v domain.QuestionnaireScreeningToolResponse) graphql.Marshaler {
	return ec._QuestionnaireScreeningToolResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNQuestionnaireScreeningToolResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐQuestionnaireScreeningToolResponse(ctx context.Context, sel ast.SelectionSet, v *domain.QuestionnaireScreeningToolResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._QuestionnaireScreeningToolResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNQuestionnaireScreeningToolResponseInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐQuestionnaireScreeningToolResponseInput(ctx context.Context, v interface{}) (dto.QuestionnaireScreeningToolResponseInput, error) {
	res, err := ec.unmarshalInputQuestionnaireScreeningToolResponseInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRecordSecurityQuestionResponse2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐRecordSecurityQuestionResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.RecordSecurityQuestionResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRecordSecurityQuestionResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐRecordSecurityQuestionResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRecordSecurityQuestionResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐRecordSecurityQuestionResponse(ctx context.Context, sel ast.SelectionSet, v *domain.RecordSecurityQuestionResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RecordSecurityQuestionResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNRequestTypeCount2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐRequestTypeCountᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.RequestTypeCount) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRequestTypeCount2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐRequestTypeCount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRequestTypeCount2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐRequestTypeCount(ctx context.Context, sel ast.SelectionSet, v *domain.RequestTypeCount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RequestTypeCount(ctx, sel, v)
}

func (ec *executionContext) marshalNScreeningTool2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningTool(ctx context.Context, sel ast.SelectionSet, v []*domain.ScreeningTool) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOScreeningTool2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningTool(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNScreeningTool2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.ScreeningTool) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScreeningTool2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningTool(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNScreeningTool2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningTool(ctx context.Context, sel ast.SelectionSet, v *domain.ScreeningTool) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ScreeningTool(ctx, sel, v)
}

func (ec *executionContext) marshalNScreeningToolAssessmentResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolAssessmentResponse(ctx context.Context, sel ast.SelectionSet, v *domain.ScreeningToolAssessmentResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ScreeningToolAssessmentResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNScreeningToolInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐScreeningToolInput(ctx context.Context, v interface{}) (dto.ScreeningToolInput, error) {
	res, err := ec.unmarshalInputScreeningToolInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNScreeningToolQuestion2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolQuestionᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.ScreeningToolQuestion) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScreeningToolQuestion2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolQuestion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNScreeningToolQuestion2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolQuestion(ctx context.Context, sel ast.SelectionSet, v *domain.ScreeningToolQuestion) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ScreeningToolQuestion(ctx, sel, v)
}

func (ec *executionContext) unmarshalNScreeningToolQuestionResponseInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐScreeningToolQuestionResponseInputᚄ(ctx context.Context, v interface{}) ([]*dto.ScreeningToolQuestionResponseInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*dto.ScreeningToolQuestionResponseInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNScreeningToolQuestionResponseInput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐScreeningToolQuestionResponseInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNScreeningToolQuestionResponseInput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐScreeningToolQuestionResponseInput(ctx context.Context, v interface{}) (*dto.ScreeningToolQuestionResponseInput, error) {
	res, err := ec.unmarshalInputScreeningToolQuestionResponseInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNScreeningToolRespondent2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolRespondent(ctx context.Context, sel ast.SelectionSet, v []*domain.ScreeningToolRespondent) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOScreeningToolRespondent2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolRespondent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNScreeningToolResponse2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.ScreeningToolResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScreeningToolResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNScreeningToolResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolResponse(ctx context.Context, sel ast.SelectionSet, v *domain.ScreeningToolResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ScreeningToolResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNScreeningToolResponsePayload2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolResponsePayload(ctx context.Context, sel ast.SelectionSet, v domain.ScreeningToolResponsePayload) graphql.Marshaler {
	return ec._ScreeningToolResponsePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNScreeningToolResponsePayload2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolResponsePayload(ctx context.Context, sel ast.SelectionSet, v *domain.ScreeningToolResponsePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ScreeningToolResponsePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNScreeningToolType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐScreeningToolType(ctx context.Context, v interface{}) (enums.ScreeningToolType, error) {
	var res enums.ScreeningToolType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNScreeningToolType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐScreeningToolType(ctx context.Context, sel ast.SelectionSet, v enums.ScreeningToolType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNSecurityQuestion2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSecurityQuestionᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.SecurityQuestion) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSecurityQuestion2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSecurityQuestion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSecurityQuestion2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSecurityQuestion(ctx context.Context, sel ast.SelectionSet, v *domain.SecurityQuestion) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SecurityQuestion(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSecurityQuestionResponseInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐSecurityQuestionResponseInputᚄ(ctx context.Context, v interface{}) ([]*dto.SecurityQuestionResponseInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*dto.SecurityQuestionResponseInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSecurityQuestionResponseInput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐSecurityQuestionResponseInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNSecurityQuestionResponseInput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐSecurityQuestionResponseInput(ctx context.Context, v interface{}) (*dto.SecurityQuestionResponseInput, error) {
	res, err := ec.unmarshalInputSecurityQuestionResponseInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSecurityQuestionResponseType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐSecurityQuestionResponseType(ctx context.Context, v interface{}) (enums.SecurityQuestionResponseType, error) {
	var res enums.SecurityQuestionResponseType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSecurityQuestionResponseType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐSecurityQuestionResponseType(ctx context.Context, sel ast.SelectionSet, v enums.SecurityQuestionResponseType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNServiceRequestInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐServiceRequestInput(ctx context.Context, v interface{}) (dto.ServiceRequestInput, error) {
	res, err := ec.unmarshalInputServiceRequestInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNServiceRequestType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐServiceRequestType(ctx context.Context, v interface{}) (enums.ServiceRequestType, error) {
	var res enums.ServiceRequestType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNServiceRequestType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐServiceRequestType(ctx context.Context, sel ast.SelectionSet, v enums.ServiceRequestType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNServiceRequestsCount2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐServiceRequestsCount(ctx context.Context, sel ast.SelectionSet, v *domain.ServiceRequestsCount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ServiceRequestsCount(ctx, sel, v)
}

func (ec *executionContext) marshalNServiceRequestsCountResponse2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐServiceRequestsCountResponse(ctx context.Context, sel ast.SelectionSet, v domain.ServiceRequestsCountResponse) graphql.Marshaler {
	return ec._ServiceRequestsCountResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNServiceRequestsCountResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐServiceRequestsCountResponse(ctx context.Context, sel ast.SelectionSet, v *domain.ServiceRequestsCountResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ServiceRequestsCountResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNShareContentInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐShareContentInput(ctx context.Context, v interface{}) (dto.ShareContentInput, error) {
	res, err := ec.unmarshalInputShareContentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSortOption2ᚖgithubᚗcomᚋGetStreamᚋstreamᚑchatᚑgoᚋv5ᚐSortOption(ctx context.Context, v interface{}) (*stream_chat.SortOption, error) {
	res, err := ec.unmarshalInputSortOption(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStaffProfile2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐStaffProfile(ctx context.Context, sel ast.SelectionSet, v domain.StaffProfile) graphql.Marshaler {
	return ec._StaffProfile(ctx, sel, &v)
}

func (ec *executionContext) marshalNStaffProfile2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐStaffProfile(ctx context.Context, sel ast.SelectionSet, v *domain.StaffProfile) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StaffProfile(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStaffRegistrationInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐStaffRegistrationInput(ctx context.Context, v interface{}) (dto.StaffRegistrationInput, error) {
	res, err := ec.unmarshalInputStaffRegistrationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStaffRegistrationOutput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐStaffRegistrationOutput(ctx context.Context, sel ast.SelectionSet, v dto.StaffRegistrationOutput) graphql.Marshaler {
	return ec._StaffRegistrationOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNStaffRegistrationOutput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐStaffRegistrationOutput(ctx context.Context, sel ast.SelectionSet, v *dto.StaffRegistrationOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StaffRegistrationOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNStaffResponse2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐStaffResponse(ctx context.Context, sel ast.SelectionSet, v domain.StaffResponse) graphql.Marshaler {
	return ec._StaffResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNStaffResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐStaffResponse(ctx context.Context, sel ast.SelectionSet, v *domain.StaffResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StaffResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNSurveyForm2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSurveyForm(ctx context.Context, sel ast.SelectionSet, v *domain.SurveyForm) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SurveyForm(ctx, sel, v)
}

func (ec *executionContext) marshalNSurveyRespondent2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSurveyRespondent(ctx context.Context, sel ast.SelectionSet, v []*domain.SurveyRespondent) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSurveyRespondent2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSurveyRespondent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNSurveyResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSurveyResponse(ctx context.Context, sel ast.SelectionSet, v *domain.SurveyResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SurveyResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSurveyResponseInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐSurveyResponseInput(ctx context.Context, v interface{}) (dto.SurveyResponseInput, error) {
	res, err := ec.unmarshalInputSurveyResponseInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSurveyServiceRequestUser2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSurveyServiceRequestUser(ctx context.Context, sel ast.SelectionSet, v []*domain.SurveyServiceRequestUser) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSurveyServiceRequestUser2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSurveyServiceRequestUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNSurveysWithServiceRequest2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐSurveysWithServiceRequest(ctx context.Context, sel ast.SelectionSet, v *dto.SurveysWithServiceRequest) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SurveysWithServiceRequest(ctx, sel, v)
}

func (ec *executionContext) marshalNTermsOfService2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐTermsOfService(ctx context.Context, sel ast.SelectionSet, v domain.TermsOfService) graphql.Marshaler {
	return ec._TermsOfService(ctx, sel, &v)
}

func (ec *executionContext) marshalNTermsOfService2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐTermsOfService(ctx context.Context, sel ast.SelectionSet, v *domain.TermsOfService) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TermsOfService(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNUser2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐUser(ctx context.Context, sel ast.SelectionSet, v domain.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐUser(ctx context.Context, sel ast.SelectionSet, v *domain.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNUserSurvey2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐUserSurvey(ctx context.Context, sel ast.SelectionSet, v *domain.UserSurvey) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserSurvey(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVerifySurveySubmissionInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐVerifySurveySubmissionInput(ctx context.Context, v interface{}) (dto.VerifySurveySubmissionInput, error) {
	res, err := ec.unmarshalInputVerifySurveySubmissionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNWorkStationDetails2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐWorkStationDetails(ctx context.Context, sel ast.SelectionSet, v domain.WorkStationDetails) graphql.Marshaler {
	return ec._WorkStationDetails(ctx, sel, &v)
}

func (ec *executionContext) unmarshalN_FieldSet2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_FieldSet2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx context.Context, sel ast.SelectionSet, v fedruntime.Service) graphql.Marshaler {
	return ec.__Service(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOAIModerationResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAIModerationResponse(ctx context.Context, sel ast.SelectionSet, v *domain.AIModerationResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AIModerationResponse(ctx, sel, v)
}

func (ec *executionContext) marshalOAgeRange2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAgeRange(ctx context.Context, sel ast.SelectionSet, v domain.AgeRange) graphql.Marshaler {
	return ec._AgeRange(ctx, sel, &v)
}

func (ec *executionContext) marshalOAgeRange2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAgeRange(ctx context.Context, sel ast.SelectionSet, v *domain.AgeRange) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AgeRange(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAgeRangeInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐAgeRangeInput(ctx context.Context, v interface{}) (dto.AgeRangeInput, error) {
	res, err := ec.unmarshalInputAgeRangeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAgeRangeInput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐAgeRangeInput(ctx context.Context, v interface{}) (*dto.AgeRangeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAgeRangeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAppointment2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAppointment(ctx context.Context, sel ast.SelectionSet, v *domain.Appointment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Appointment(ctx, sel, v)
}

func (ec *executionContext) marshalOAppointmentsPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAppointmentsPage(ctx context.Context, sel ast.SelectionSet, v *domain.AppointmentsPage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppointmentsPage(ctx, sel, v)
}

func (ec *executionContext) marshalOAttachment2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAttachment(ctx context.Context, sel ast.SelectionSet, v []*domain.Attachment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAttachment2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAttachment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAttachment2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAttachment(ctx context.Context, sel ast.SelectionSet, v *domain.Attachment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Attachment(ctx, sel, v)
}

func (ec *executionContext) marshalOAuthorityPermission2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAuthorityPermissionᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.AuthorityPermission) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuthorityPermission2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAuthorityPermission(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOAuthorityRole2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAuthorityRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.AuthorityRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuthorityRole2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐAuthorityRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOCaregiverProfile2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCaregiverProfileᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.CaregiverProfile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCaregiverProfile2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCaregiverProfile(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCaregiverProfile2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCaregiverProfile(ctx context.Context, sel ast.SelectionSet, v *domain.CaregiverProfile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaregiverProfile(ctx, sel, v)
}

func (ec *executionContext) marshalOCaregiverProfileOutputPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐCaregiverProfileOutputPage(ctx context.Context, sel ast.SelectionSet, v *dto.CaregiverProfileOutputPage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CaregiverProfileOutputPage(ctx, sel, v)
}

func (ec *executionContext) marshalOCategoryDetail2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCategoryDetail(ctx context.Context, sel ast.SelectionSet, v domain.CategoryDetail) graphql.Marshaler {
	return ec._CategoryDetail(ctx, sel, &v)
}

func (ec *executionContext) marshalOCategoryDetail2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCategoryDetail(ctx context.Context, sel ast.SelectionSet, v []domain.CategoryDetail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCategoryDetail2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCategoryDetail(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOClientCaregiverInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐClientCaregiverInput(ctx context.Context, v interface{}) (dto.ClientCaregiverInput, error) {
	res, err := ec.unmarshalInputClientCaregiverInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOClientCaregiverInput2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐClientCaregiverInput(ctx context.Context, v interface{}) ([]dto.ClientCaregiverInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]dto.ClientCaregiverInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOClientCaregiverInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐClientCaregiverInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOClientFilterParamsInput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐClientFilterParamsInput(ctx context.Context, v interface{}) (*dto.ClientFilterParamsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputClientFilterParamsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOClientHealthDiaryEntry2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientHealthDiaryEntry(ctx context.Context, sel ast.SelectionSet, v *domain.ClientHealthDiaryEntry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ClientHealthDiaryEntry(ctx, sel, v)
}

func (ec *executionContext) marshalOClientProfile2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientProfileᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.ClientProfile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClientProfile2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientProfile(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOClientProfile2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐClientProfile(ctx context.Context, sel ast.SelectionSet, v *domain.ClientProfile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ClientProfile(ctx, sel, v)
}

func (ec *executionContext) unmarshalOClientRegistrationInput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐClientRegistrationInput(ctx context.Context, v interface{}) (*dto.ClientRegistrationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputClientRegistrationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOClientType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientType(ctx context.Context, v interface{}) (enums.ClientType, error) {
	var res enums.ClientType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOClientType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientType(ctx context.Context, sel ast.SelectionSet, v enums.ClientType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOClientType2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientType(ctx context.Context, v interface{}) ([]enums.ClientType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]enums.ClientType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOClientType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOClientType2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientType(ctx context.Context, sel ast.SelectionSet, v []enums.ClientType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOClientType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOClientType2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientTypeᚄ(ctx context.Context, v interface{}) ([]enums.ClientType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]enums.ClientType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNClientType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOClientType2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []enums.ClientType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClientType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐClientType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommunity2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCommunity(ctx context.Context, sel ast.SelectionSet, v []*domain.Community) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommunity2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCommunity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCommunity2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCommunity(ctx context.Context, sel ast.SelectionSet, v *domain.Community) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Community(ctx, sel, v)
}

func (ec *executionContext) marshalOCommunityMember2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCommunityMember(ctx context.Context, sel ast.SelectionSet, v domain.CommunityMember) graphql.Marshaler {
	return ec._CommunityMember(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommunityMember2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCommunityMember(ctx context.Context, sel ast.SelectionSet, v []domain.CommunityMember) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommunityMember2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCommunityMember(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCommunityMember2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCommunityMember(ctx context.Context, sel ast.SelectionSet, v []*domain.CommunityMember) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommunityMember2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCommunityMember(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCommunityMember2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐCommunityMember(ctx context.Context, sel ast.SelectionSet, v *domain.CommunityMember) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommunityMember(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConsentState2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐConsentState(ctx context.Context, v interface{}) (enums.ConsentState, error) {
	var res enums.ConsentState
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConsentState2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐConsentState(ctx context.Context, sel ast.SelectionSet, v enums.ConsentState) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalOContent2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐContent(ctx context.Context, sel ast.SelectionSet, v *domain.Content) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Content(ctx, sel, v)
}

func (ec *executionContext) unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, v interface{}) (*scalarutils.Date, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.Date)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, sel ast.SelectionSet, v *scalarutils.Date) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalODocument2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐDocument(ctx context.Context, sel ast.SelectionSet, v domain.Document) graphql.Marshaler {
	return ec._Document(ctx, sel, &v)
}

func (ec *executionContext) marshalODocument2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐDocument(ctx context.Context, sel ast.SelectionSet, v []domain.Document) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODocument2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐDocument(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOExplicit2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐExplicit(ctx context.Context, sel ast.SelectionSet, v *domain.Explicit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Explicit(ctx, sel, v)
}

func (ec *executionContext) marshalOFacility2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacility(ctx context.Context, sel ast.SelectionSet, v []*domain.Facility) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFacility2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacility(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFacility2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacility(ctx context.Context, sel ast.SelectionSet, v *domain.Facility) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Facility(ctx, sel, v)
}

func (ec *executionContext) marshalOFacilityOutputPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐFacilityOutputPage(ctx context.Context, sel ast.SelectionSet, v *dto.FacilityOutputPage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FacilityOutputPage(ctx, sel, v)
}

func (ec *executionContext) marshalOFacilityPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFacilityPage(ctx context.Context, sel ast.SelectionSet, v *domain.FacilityPage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FacilityPage(ctx, sel, v)
}

func (ec *executionContext) marshalOFeaturedMedia2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFeaturedMedia(ctx context.Context, sel ast.SelectionSet, v domain.FeaturedMedia) graphql.Marshaler {
	return ec._FeaturedMedia(ctx, sel, &v)
}

func (ec *executionContext) marshalOFeaturedMedia2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFeaturedMedia(ctx context.Context, sel ast.SelectionSet, v []domain.FeaturedMedia) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFeaturedMedia2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐFeaturedMedia(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOFilterParam2ᚕᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFilterParamᚄ(ctx context.Context, v interface{}) ([]*firebasetools.FilterParam, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*firebasetools.FilterParam, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFilterParam2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFilterParam(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFilterSortDataType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐFilterSortDataType(ctx context.Context, v interface{}) (enums.FilterSortDataType, error) {
	var res enums.FilterSortDataType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFilterSortDataType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐFilterSortDataType(ctx context.Context, sel ast.SelectionSet, v enums.FilterSortDataType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOFiltersInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐFiltersInput(ctx context.Context, v interface{}) ([]*dto.FiltersInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*dto.FiltersInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFiltersInput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐFiltersInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFiltersInput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐFiltersInput(ctx context.Context, v interface{}) (*dto.FiltersInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFiltersInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalOGalleryImage2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐGalleryImage(ctx context.Context, sel ast.SelectionSet, v domain.GalleryImage) graphql.Marshaler {
	return ec._GalleryImage(ctx, sel, &v)
}

func (ec *executionContext) marshalOGalleryImage2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐGalleryImage(ctx context.Context, sel ast.SelectionSet, v []domain.GalleryImage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGalleryImage2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐGalleryImage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOGender2githubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx context.Context, v interface{}) (enumutils.Gender, error) {
	var res enumutils.Gender
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOGender2githubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx context.Context, sel ast.SelectionSet, v enumutils.Gender) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOGender2ᚕgithubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx context.Context, v interface{}) ([]enumutils.Gender, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]enumutils.Gender, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOGender2githubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOGender2ᚕgithubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx context.Context, sel ast.SelectionSet, v []enumutils.Gender) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGender2githubᚗcomᚋsavannahghiᚋenumutilsᚐGender(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOGetstreamMessage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐGetstreamMessage(ctx context.Context, sel ast.SelectionSet, v *domain.GetstreamMessage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GetstreamMessage(ctx, sel, v)
}

func (ec *executionContext) marshalOHeroImage2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐHeroImage(ctx context.Context, sel ast.SelectionSet, v domain.HeroImage) graphql.Marshaler {
	return ec._HeroImage(ctx, sel, &v)
}

func (ec *executionContext) marshalOHeroImageRendition2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐHeroImageRendition(ctx context.Context, sel ast.SelectionSet, v domain.HeroImageRendition) graphql.Marshaler {
	return ec._HeroImageRendition(ctx, sel, &v)
}

func (ec *executionContext) unmarshalOID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	return res
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	return res
}

func (ec *executionContext) unmarshalOInt2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOManagedClient2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐManagedClient(ctx context.Context, sel ast.SelectionSet, v *domain.ManagedClient) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ManagedClient(ctx, sel, v)
}

func (ec *executionContext) marshalOManagedClientOutputPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐManagedClientOutputPage(ctx context.Context, sel ast.SelectionSet, v *dto.ManagedClientOutputPage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ManagedClientOutputPage(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	return res
}

func (ec *executionContext) marshalOMember2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐMember(ctx context.Context, sel ast.SelectionSet, v []*domain.Member) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMember2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐMember(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMember2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐMember(ctx context.Context, sel ast.SelectionSet, v *domain.Member) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Member(ctx, sel, v)
}

func (ec *executionContext) marshalOMessageFlag2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐMessageFlag(ctx context.Context, sel ast.SelectionSet, v []*domain.MessageFlag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMessageFlag2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐMessageFlag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMessageFlag2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐMessageFlag(ctx context.Context, sel ast.SelectionSet, v *domain.MessageFlag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MessageFlag(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMessageType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐMessageType(ctx context.Context, v interface{}) (enums.MessageType, error) {
	var res enums.MessageType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMessageType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐMessageType(ctx context.Context, sel ast.SelectionSet, v enums.MessageType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalOModerationThresholds2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐModerationThresholds(ctx context.Context, sel ast.SelectionSet, v *domain.ModerationThresholds) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ModerationThresholds(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMood2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐMood(ctx context.Context, v interface{}) (*enums.Mood, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(enums.Mood)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMood2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐMood(ctx context.Context, sel ast.SelectionSet, v *enums.Mood) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalONotification2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐNotification(ctx context.Context, sel ast.SelectionSet, v *domain.Notification) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Notification(ctx, sel, v)
}

func (ec *executionContext) unmarshalONotificationFilters2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐNotificationFilters(ctx context.Context, v interface{}) (*domain.NotificationFilters, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNotificationFilters(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONotificationType2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐNotificationTypeᚄ(ctx context.Context, v interface{}) ([]*enums.NotificationType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*enums.NotificationType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNotificationType2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐNotificationType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalONotificationType2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐNotificationTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []*enums.NotificationType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNotificationType2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐNotificationType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalONotificationTypeFilter2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐNotificationTypeFilter(ctx context.Context, sel ast.SelectionSet, v []*domain.NotificationTypeFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONotificationTypeFilter2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐNotificationTypeFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalONotificationTypeFilter2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐNotificationTypeFilter(ctx context.Context, sel ast.SelectionSet, v *domain.NotificationTypeFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NotificationTypeFilter(ctx, sel, v)
}

func (ec *executionContext) marshalONotificationsPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐNotificationsPage(ctx context.Context, sel ast.SelectionSet, v *domain.NotificationsPage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NotificationsPage(ctx, sel, v)
}

func (ec *executionContext) marshalOOrganisation2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐOrganisationᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.Organisation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrganisation2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐOrganisation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOOrganisation2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐOrganisation(ctx context.Context, sel ast.SelectionSet, v *domain.Organisation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Organisation(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPINInput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐPINInput(ctx context.Context, v interface{}) (*dto.PINInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPINInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPagination2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐPagination(ctx context.Context, sel ast.SelectionSet, v *domain.Pagination) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Pagination(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPaginationsInput2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐPaginationsInput(ctx context.Context, v interface{}) (*dto.PaginationsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPaginationsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProgram2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐProgram(ctx context.Context, sel ast.SelectionSet, v []*domain.Program) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProgram2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐProgram(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProgram2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐProgramᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.Program) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProgram2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐProgram(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOProgram2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐProgram(ctx context.Context, sel ast.SelectionSet, v *domain.Program) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Program(ctx, sel, v)
}

func (ec *executionContext) unmarshalOQueryOption2ᚖgithubᚗcomᚋGetStreamᚋstreamᚑchatᚑgoᚋv5ᚐQueryOption(ctx context.Context, v interface{}) (*stream_chat.QueryOption, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputQueryOption(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOQuestionInputChoice2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐQuestionInputChoice(ctx context.Context, sel ast.SelectionSet, v domain.QuestionInputChoice) graphql.Marshaler {
	return ec._QuestionInputChoice(ctx, sel, &v)
}

func (ec *executionContext) marshalOQuestionInputChoice2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐQuestionInputChoice(ctx context.Context, sel ast.SelectionSet, v []domain.QuestionInputChoice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOQuestionInputChoice2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐQuestionInputChoice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOQuestionInputChoiceInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐQuestionInputChoiceInput(ctx context.Context, v interface{}) (dto.QuestionInputChoiceInput, error) {
	res, err := ec.unmarshalInputQuestionInputChoiceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOQuestionInputChoiceInput2ᚕgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐQuestionInputChoiceInput(ctx context.Context, v interface{}) ([]dto.QuestionInputChoiceInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]dto.QuestionInputChoiceInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOQuestionInputChoiceInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐQuestionInputChoiceInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOQuestionResponseValueType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐQuestionResponseValueType(ctx context.Context, v interface{}) (enums.QuestionResponseValueType, error) {
	var res enums.QuestionResponseValueType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOQuestionResponseValueType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐQuestionResponseValueType(ctx context.Context, sel ast.SelectionSet, v enums.QuestionResponseValueType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOQuestionType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐQuestionType(ctx context.Context, v interface{}) (enums.QuestionType, error) {
	var res enums.QuestionType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOQuestionType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐQuestionType(ctx context.Context, sel ast.SelectionSet, v enums.QuestionType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalOQuestionnaire2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐQuestionnaire(ctx context.Context, sel ast.SelectionSet, v domain.Questionnaire) graphql.Marshaler {
	return ec._Questionnaire(ctx, sel, &v)
}

func (ec *executionContext) marshalOReaction2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐReaction(ctx context.Context, sel ast.SelectionSet, v []*domain.Reaction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReaction2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐReaction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOReaction2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐReaction(ctx context.Context, sel ast.SelectionSet, v *domain.Reaction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Reaction(ctx, sel, v)
}

func (ec *executionContext) marshalOScreeningTool2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningTool(ctx context.Context, sel ast.SelectionSet, v *domain.ScreeningTool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ScreeningTool(ctx, sel, v)
}

func (ec *executionContext) marshalOScreeningToolAssessmentResponse2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolAssessmentResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.ScreeningToolAssessmentResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScreeningToolAssessmentResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolAssessmentResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOScreeningToolPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolPage(ctx context.Context, sel ast.SelectionSet, v *domain.ScreeningToolPage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ScreeningToolPage(ctx, sel, v)
}

func (ec *executionContext) marshalOScreeningToolRespondent2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolRespondent(ctx context.Context, sel ast.SelectionSet, v *domain.ScreeningToolRespondent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ScreeningToolRespondent(ctx, sel, v)
}

func (ec *executionContext) marshalOScreeningToolRespondentsPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐScreeningToolRespondentsPage(ctx context.Context, sel ast.SelectionSet, v *domain.ScreeningToolRespondentsPage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ScreeningToolRespondentsPage(ctx, sel, v)
}

func (ec *executionContext) unmarshalOScreeningToolResponseCategory2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐScreeningToolResponseCategory(ctx context.Context, v interface{}) (enums.ScreeningToolResponseCategory, error) {
	var res enums.ScreeningToolResponseCategory
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOScreeningToolResponseCategory2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐScreeningToolResponseCategory(ctx context.Context, sel ast.SelectionSet, v enums.ScreeningToolResponseCategory) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOScreeningToolResponseType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐScreeningToolResponseType(ctx context.Context, v interface{}) (enums.ScreeningToolResponseType, error) {
	var res enums.ScreeningToolResponseType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOScreeningToolResponseType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐScreeningToolResponseType(ctx context.Context, sel ast.SelectionSet, v enums.ScreeningToolResponseType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOScreeningToolType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐScreeningToolType(ctx context.Context, v interface{}) (enums.ScreeningToolType, error) {
	var res enums.ScreeningToolType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOScreeningToolType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐScreeningToolType(ctx context.Context, sel ast.SelectionSet, v enums.ScreeningToolType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOScreeningToolType2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐScreeningToolType(ctx context.Context, v interface{}) (*enums.ScreeningToolType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(enums.ScreeningToolType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOScreeningToolType2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐScreeningToolType(ctx context.Context, sel ast.SelectionSet, v *enums.ScreeningToolType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOServiceRequest2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐServiceRequest(ctx context.Context, sel ast.SelectionSet, v []*domain.ServiceRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOServiceRequest2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐServiceRequest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOServiceRequest2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐServiceRequest(ctx context.Context, sel ast.SelectionSet, v *domain.ServiceRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ServiceRequest(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSortDataType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐSortDataType(ctx context.Context, v interface{}) (enums.SortDataType, error) {
	var res enums.SortDataType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSortDataType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐSortDataType(ctx context.Context, sel ast.SelectionSet, v enums.SortDataType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOSortOption2ᚕᚖgithubᚗcomᚋGetStreamᚋstreamᚑchatᚑgoᚋv5ᚐSortOptionᚄ(ctx context.Context, v interface{}) ([]*stream_chat.SortOption, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*stream_chat.SortOption, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSortOption2ᚖgithubᚗcomᚋGetStreamᚋstreamᚑchatᚑgoᚋv5ᚐSortOption(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSortsInput2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐSortsInput(ctx context.Context, v interface{}) (dto.SortsInput, error) {
	res, err := ec.unmarshalInputSortsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSpam2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSpam(ctx context.Context, sel ast.SelectionSet, v *domain.Spam) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Spam(ctx, sel, v)
}

func (ec *executionContext) marshalOStaffProfile2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐStaffProfileᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.StaffProfile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStaffProfile2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐStaffProfile(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOSurveyForm2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSurveyFormᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.SurveyForm) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSurveyForm2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSurveyForm(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSurveyRespondent2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSurveyRespondent(ctx context.Context, sel ast.SelectionSet, v *domain.SurveyRespondent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SurveyRespondent(ctx, sel, v)
}

func (ec *executionContext) marshalOSurveyRespondentPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSurveyRespondentPage(ctx context.Context, sel ast.SelectionSet, v *domain.SurveyRespondentPage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SurveyRespondentPage(ctx, sel, v)
}

func (ec *executionContext) marshalOSurveyResponse2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSurveyResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.SurveyResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSurveyResponse2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSurveyResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSurveyServiceRequestUser2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSurveyServiceRequestUser(ctx context.Context, sel ast.SelectionSet, v *domain.SurveyServiceRequestUser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SurveyServiceRequestUser(ctx, sel, v)
}

func (ec *executionContext) marshalOSurveyServiceRequestUserPage2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐSurveyServiceRequestUserPage(ctx context.Context, sel ast.SelectionSet, v *domain.SurveyServiceRequestUserPage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SurveyServiceRequestUserPage(ctx, sel, v)
}

func (ec *executionContext) marshalOSurveysWithServiceRequest2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐSurveysWithServiceRequestᚄ(ctx context.Context, sel ast.SelectionSet, v []*dto.SurveysWithServiceRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSurveysWithServiceRequest2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋdtoᚐSurveysWithServiceRequest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	return res
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalOToxic2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐToxic(ctx context.Context, sel ast.SelectionSet, v *domain.Toxic) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Toxic(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserRoleType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐUserRoleType(ctx context.Context, v interface{}) (enums.UserRoleType, error) {
	var res enums.UserRoleType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserRoleType2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐUserRoleType(ctx context.Context, sel ast.SelectionSet, v enums.UserRoleType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOUserRoleType2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐUserRoleType(ctx context.Context, v interface{}) ([]*enums.UserRoleType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*enums.UserRoleType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOUserRoleType2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐUserRoleType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOUserRoleType2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐUserRoleType(ctx context.Context, sel ast.SelectionSet, v []*enums.UserRoleType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserRoleType2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐUserRoleType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOUserRoleType2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐUserRoleType(ctx context.Context, v interface{}) (*enums.UserRoleType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(enums.UserRoleType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserRoleType2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋapplicationᚋenumsᚐUserRoleType(ctx context.Context, sel ast.SelectionSet, v *enums.UserRoleType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOUserSurvey2ᚕᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐUserSurveyᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.UserSurvey) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserSurvey2ᚖgithubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐUserSurvey(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOWorkStationDetails2githubᚗcomᚋsavannahghiᚋmycarehubᚋpkgᚋmycarehubᚋdomainᚐWorkStationDetails(ctx context.Context, sel ast.SelectionSet, v domain.WorkStationDetails) graphql.Marshaler {
	return ec._WorkStationDetails(ctx, sel, &v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
