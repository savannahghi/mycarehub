type Facility {
  id: String!
  name: String!
  phone: String!
  active: Boolean!
  country: String!
  description: String!
  fhirOrganisationID: String!
  workStationDetails: WorkStationDetails!
}

type WorkStationDetails  {
	notifications:  Int!
	surveys: Int!
	articles: Int!
	messages: Int!
	serviceRequests: Int!
}

type Pagination {
  limit: Int!
  currentPage: Int!
  count: Int
  totalPages: Int
  nextPage: Int
  previousPage: Int
}

type FacilityPage {
  pagination: Pagination!
  facilities: [Facility]!
}

type FiltersParam {
  name: String
  dataType: FilterSortDataType
  value: String
}

type TermsOfService {
  termsID: Int!
  text: String!
}

type SecurityQuestion {
  securityQuestionID: String!
  questionStem: String!
  description: String
  active: Boolean!
  responseType: SecurityQuestionResponseType!
}

type RecordSecurityQuestionResponse {
  securityQuestionID: String!
  isCorrect: Boolean!
}

type Content {
  items: [ContentItem!]!
  meta: Meta!
}

type Meta {
  totalCount: Int!
}

type ContentItem {
  id: Int!
  title: String!
  date: String!
  meta: ContentMeta!
  intro: String!
  authorName: String!
  itemType: String!
  timeEstimateSeconds: Int
  body: String!
  heroImage: HeroImage
  heroImageRendition: HeroImageRendition
  likeCount: Int!
  bookmarkCount: Int!
  viewCount: Int!
  tagNames: [String!]!
  shareCount: Int!
  documents: [Document]
  author: Author!
  categoryDetails: [CategoryDetail]
  featuredMedia: [FeaturedMedia]
  galleryImages: [GalleryImage]
}

type HeroImage {
  id: Int!
  meta: ImageMeta!
  title: String!
}

type HeroImageRendition {
  url: String!
  width: Int!
  height: Int!
  alt: String!
}

type ContentMeta {
  contentType: String!
  contentDetailURL: String!
  contentHTMLURL: String!
  slug: String!
  showInMenus: Boolean
  seoTitle: String
  searchDescription: String
  firstPublishedAt: String!
  locale: String
}

type CategoryDetail {
  id: Int!
  categoryName: String!
  categoryIcon: String!
}

type Author {
  id: String!
}

type Document {
  id: Int!
  document: DocumentData!
  meta: DocumentMeta!
}

type DocumentMeta {
  type: String!
  documentDetailUrl: String!
  documentDownloadUrl: String!
}

type DocumentData {
  id: Int!
  title: String!
  meta: DocumentMeta!
}

type ContentItemCategory {
  id: Int!
  name: String!
  iconUrl: String!
}

type FeaturedMedia {
  id: Int!
  url: String!
  title: String!
  type: String!
  duration: Float
  width: Int
  height: Int
  thumbnail: String
}

type GalleryImage {
  id: Int!
  image: ImageDetail!
}

type ImageDetail {
  id: Int!
  title: String!
  meta: ImageMeta!
}

type ImageMeta {
  type: String!
  imageDetailUrl: String!
  imageDownloadUrl: String!
}

type ClientHealthDiaryQuote {
  author: String!
  quote: String!
}

type ClientHealthDiaryEntry {
  id: String!
  active: Boolean!
  mood: String!
  note: String!
  entryType: String!
  shareWithHealthWorker: Boolean
  sharedAt: Time
  clientID: String!
  createdAt: Time
  phoneNumber: String
  clientName: String
}

type ServiceRequest {
  id: String!
  requestType: String!
  request: String!
  status: String!
  clientID: String
  staffID: String
  createdAt: Time
  inProgressAt: Time
  inProgressBy: String
  resolvedAt: Time
  resolvedBy: String
  resolvedByName: String
  facilityID: String
  clientName: String
  staffName: String
  staffContact: String
  clientContact: String
  meta: Map
}

type ClientRegistrationOutput {
  id: String!
  active: Boolean!
  clientTypes: [ClientType!]
  enrollmentDate: Time
  fhirPatientID: String
  emrHealthRecordID: String
  treatmentBuddy: String
  counselled: Boolean!
  organisation: String!
  userID: String!
  currentFacilityID: String!
  chv: String!
  caregiver: String!
}

type RequestTypeCount {
  requestType: ServiceRequestType!
  total: Int!
}

type ServiceRequestsCount {
  requestsTypeCount: [RequestTypeCount!]!
}

type ServiceRequestsCountResponse {
  clientsServiceRequestCount: ServiceRequestsCount!
  staffServiceRequestCount: ServiceRequestsCount!
}

type Community {
  id: String!
  cid: String
  name: String!
  disabled: Boolean
  frozen: Boolean
  memberCount: Int
  createdAt: Time
  updatedAt: Time
  # Custom defined fields
  ageRange: AgeRange
  gender: [Gender!]!
  clientType: [ClientType!]
  inviteOnly: Boolean!
  description: String!
  members: [CommunityMember]
  createdBy: Member
}

type AgeRange {
  lowerBound: Int!
  upperBound: Int!
}

type PostingHours {
  start: Time!
  end: Time!
}

"""
Member represents a user and is specific to use in the context of communities
"""
type Member {
  id: ID!
  userID: ID!
  name: String!
  role: String!
  username: String!
  gender: Gender!
  userType: String
  extraData: Map
  ageUpperBound: Int
  ageLowerBound: Int
  clientTypes: [String]
}

"""
CommunityMember represents a user in a community and their associated additional details.
"""
type CommunityMember {
  userID: ID!
  user: Member!
  isModerator: Boolean!
  invited: Boolean
  inviteAcceptedAt: Time
  inviteRejectedAt: Time
  role: String
  userType: String!
}

type Appointment {
  id: ID!
  reason: String!
  date: Date!
  hasRescheduledAppointment: Boolean!
}

type AppointmentsPage {
  appointments: [Appointment]!
  pagination: Pagination!
}

type Notification {
  id: ID!
  title: String
  body: String!
  type: NotificationType!
  isRead: Boolean
  createdAt: Time
}

type NotificationsPage {
  notifications: [Notification]!
  pagination: Pagination!
}

type NotificationTypeFilter {
  enum: NotificationType!
  name: String!
}

type ScreeningToolQuestion {
  id: String
  question: String
  toolType: ScreeningToolType
  responseChoices: Map
  responseType: ScreeningToolResponseType
  responseCategory: ScreeningToolResponseCategory
  sequence: Int
  active: Boolean
  meta: Map
}

type StaffRegistrationOutput {
  id: String!
  active: Boolean!
  staffNumber: String!
  userID: String!
  defaultFacility: String!
}

type ClientProfile {
  id: String!
  user: User!
  active: Boolean
  clientTypes: [ClientType!]
  treatmentEnrollmentDate: Time
  fhirPatientID: String
  healthRecordID: String
  treatmentBuddy: String
  clientCounselled: Boolean
  defaultFacility: Facility!
  chvUserID: String
  chvUserName: String
  caregiverID: String
  cccNumber: String!
}

type StaffProfile {
  id: String!
  user: User!
  userID: String!
  active: Boolean!
  staffNumber: String!
  defaultFacility: Facility!
}

type CaregiverProfile {
  id: ID!
  user: User!
  caregiverNumber: String!
  isClient: Boolean
  consent: ConsentStatus!
  currentClient: String!
  currentFacility: String!
}

type ClientResponse {
  clientProfile: ClientProfile!
  roles: [AuthorityRole!]
  permissions: [AuthorityPermission!]
  communityToken: String!
}

type ScreeningToolAssessmentResponse {
  clientName: String!
  dateAnswered: Time!
  clientID: String!
}

type User {
  id: String!
  username: String!
  name: String!
  gender: Gender
  active: Boolean
  contacts: Contact!
  isPhoneVerified: Boolean
  termsAccepted: Boolean
  acceptedTermsID: Int
  suspended: Boolean
  dateOfBirth: Time
  currentOrganizationID: String
  currentProgramID: String
}

type Contact {
  id: String
  contactType: String
  contactValue: String
  active: Boolean
  optedIn: Boolean
}

type AuthorityRole {
  authorityRoleID: String
  name: UserRoleType
  active: Boolean
}

type AuthorityPermission  {
	permissionID:  ID
	active: Boolean
}


type Attachment {
  type: String
  author_name: String
  title: String
  title_link: String
  text: String
  image_url: String
  thumb_url: String
  asset_url: String
  og_scrape_url: String
}

type Reaction {
  message_id: String
  user_id: String
  type: String
}

type GetstreamMessage {
  id: String
  text: String
  html: String
  type: MessageType
  silent: Boolean
  user: Member
  attachments: [Attachment]
  latest_reactions: [Reaction]
  own_reactions: [Reaction]
  # reaction_counts:  Map
  parent_id: String
  show_in_channel: Boolean
  reply_count: Int
  mentioned_users: [Member]
  shadowed: Boolean
  pinned_at: Time
  pinned_by: Member
  created_at: Time
  updated_at: Time
  deleted_at: Time
}

# message Fag response
type MessageFlag {
  user: Member
  message: GetstreamMessage
}

type ModerationResult {
  message_id: String
  action: String
  moderated_by: String
  blocked_word: String
  blocklist_name: String
  moderation_thresholds: ModerationThresholds
  AI_moderation_response: AIModerationResponse
  user_karma: Float
  user_bad_karma: Boolean
  created_at: Time
  updated_at: Time
}

type ModerationThresholds {
  explicit: Explicit
  spam: Spam
  toxic: Toxic
}

type AIModerationResponse {
  toxic: Float
  explicit: Float
  spam: Float
}

type Explicit {
  flag: Float
  block: Float
}

type Spam {
  flag: Float
  block: Float
}

type Toxic {
  flag: Float
  block: Float
}

type AvailableScreeningTools {
  toolType: ScreeningToolType!
}

type ScreeningToolResponse {
  toolIndex: Int!
  tool: String!
  response: String!
}

type ScreeningToolResponsePayload {
  serviceRequestID: String!
  clientContact: String!
  screeningToolResponses: [ScreeningToolResponse!]!
}

type SurveyForm {
  projectID: Int
  xmlFormID: String
  name: String
}

type UserSurvey {
  id: String!
  active: Boolean!
  created: Time!
  link: String!
  title: String!
  description: String!
  hasSubmitted: Boolean!
  userID: String!
  token: String!
  projectID: Int!
  formID: String!
  linkID: Int
}

type SurveyRespondent {
  id: String!
  name: String!
  submittedAt: Time!
  projectID: Int!
  submitterID: Int!
  formID: String!
}

type SurveyRespondentPage {
  surveyRespondents: [SurveyRespondent]!
  pagination: Pagination!
}

type SurveyResponse {
  question: String!
  answer: [String!]
  questionType: String!
}

type Questionnaire {
  id: String!
  active: Boolean!
  name: String!
  description: String!
  questions: [Question!]!
}

type ScreeningTool {
  id: String!
  active: Boolean!
  questionnaireID: String!
  threshold: Int
  clientTypes: [ClientType]
  genders: [Gender]
  ageRange: AgeRange
  questionnaire: Questionnaire
}

type Question {
  id: String!
  active: Boolean!
  questionnaireID: String!
  text: String!
  questionType: QuestionType!
  responseValueType: QuestionResponseValueType!
  required: Boolean!
  selectMultiple: Boolean
  sequence: Int!
  choices: [QuestionInputChoice]
}

type QuestionInputChoice {
  id: String!
  active: Boolean!
  questionID: String!
  choice: String!
  value: String!
  score: Int
}

type QuestionnaireScreeningToolResponse {
  id: String!
  active: Boolean!
  screeningToolID: String!
  facilityID: String!
  clientID: String!
  aggregateScore: Int
  questionResponses: [QuestionnaireScreeningToolQuestionResponse!]!
}

type QuestionnaireScreeningToolQuestionResponse {
  id: String!
  active: Boolean!
  screeningToolResponseID: String!
  questionID: String!
  questionType: QuestionType
  selectMultiple: Boolean
  responseValueType: QuestionResponseValueType
  sequence: Int
  questionText: String
  response: String!
  normalizedResponse: Map
  score: Int
}

type ScreeningToolRespondent {
  clientID: String!
  screeningToolResponseID: String!
  serviceRequestID: String!
  name: String!
  phoneNumber: String!
  serviceRequest: String!
}

type ScreeningToolPage {
  screeningTools: [ScreeningTool]!
  pagination: Pagination!
}
type ScreeningToolRespondentsPage {
  screeningToolRespondents: [ScreeningToolRespondent]!
  pagination: Pagination!
}

type SurveysWithServiceRequest {
  title: String!
  projectID: Int!
  formID: String!
  linkID: Int!
}

type SurveyServiceRequestUser {
  name: String!
  formID: String!
  projectID: Int!
  submitterID: Int!
  surveyName: String
  serviceRequestID: String!
  phoneNumber: String!
}

type SurveyServiceRequestUserPage {
  users: [SurveyServiceRequestUser]!
  pagination: Pagination!
}

type FacilityOutputPage {
  pagination: Pagination!
  facilities: [Facility]!
}

type ManagedClient {
	clientProfile: ClientProfile 
	caregiverConsent: ConsentState
	clientConsent: ConsentState
  workStationDetails: WorkStationDetails         
}

type ManagedClientOutputPage{
	pagination: Pagination 
	managedClients: [ManagedClient]!
}

type CaregiverProfileOutputPage {
  pagination: Pagination!
  caregivers: [CaregiverProfile]!
}

type ConsentStatus {
  consentStatus: ConsentState!
}

type Organisation {
	id:          String
	name:        String
	description: String
}

type Program {
  id: ID!
  active: Boolean!
	name: String!
	organisation: Organisation!
}

type ProgramOutput {
	count:    Int!
	programs: [Program!]
}

type StaffResponse {
  staffProfile: StaffProfile!
  roles: [AuthorityRole!]
  permissions: [AuthorityPermission!]
  communityToken: String!
}