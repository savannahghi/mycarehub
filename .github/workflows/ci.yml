name: Test

on: [push]

env:
  DOCKER_BUILDKIT: 1 # Enable Buildkit and let compose use it to speed up image building
  COMPOSE_DOCKER_CLI_BUILD: 1
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
  GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
  FIREBASE_WEB_API_KEY: ${{ secrets.FIREBASE_WEB_API_KEY }}
  ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
  PORT: ${{ secrets.PORT }}
  REPOSITORY: ${{ secrets.REPOSITORY }}
  SERVICE_HOST: ${{ secrets.SERVICE_HOST }}
  GOOGLE_PROJECT_NUMBER: ${{ secrets.GOOGLE_PROJECT_NUMBER }}
  JWT_KEY: ${{ secrets.JWT_KEY }}
  # Schema Registry CLI command version
  CLI_VERSION: v0.0.1
  #Schema Registry URL
  REGISTRY_URL: ${{ secrets.STAGING_SCHEMA_REGISTRY_URL }}
  GCR_NAME: ${{ secrets.GCR_NAME }}
  DATABASE_REGION: ${{ secrets.PROD_DATABASE_REGION }}
  DATABASE_INSTANCE: ${{ secrets.PROD_DATABASE_INSTANCE }}
  DEFAULT_ORG_ID: ${{ secrets.DEFAULT_ORG_ID }}
  PRO_INVITE_LINK: ${{ secrets.PRO_INVITE_LINK }}
  CONSUMER_INVITE_LINK: ${{ secrets.CONSUMER_INVITE_LINK }}
  GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
  GOOGLE_CLOUD_STORAGE_URL: ${{ secrets.GOOGLE_CLOUD_STORAGE_URL }}
  MYCAREHUB_ADMIN_EMAIL: ${{ secrets.MYCAREHUB_ADMIN_EMAIL }}
  CLOUDSDK_PYTHON: python2
  IS_LOCAL_DB: True
  POSTGRES_HOST: 127.0.0.1
  POSTGRES_PORT: 5432
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  MAILGUN_API_KEY: ${{ secrets.MAILGUN_API_KEY }}
  MAILGUN_DOMAIN: ${{ secrets.MAILGUN_DOMAIN }}
  MAILGUN_FROM: ${{ secrets.MAILGUN_FROM }}
  SENSITIVE_CONTENT_SECRET_KEY: ${{ secrets.SENSITIVE_CONTENT_SECRET_KEY }}
  CONTENT_API_URL: ${{ secrets.CONTENT_API_URL }}
  CONTENT_SERVICE_BASE_URL: ${{ secrets.CONTENT_SERVICE_BASE_URL }}
  DJANGO_AUTHORIZATION_TOKEN: ${{ secrets.DJANGO_AUTHORIZATION_TOKEN }}
  PIN_EXPIRY_DAYS: ${{ secrets.PIN_EXPIRY_DAYS }}
  INVITE_PIN_EXPIRY_DAYS: ${{ secrets.INVITE_PIN_EXPIRY_DAYS }}
  GET_STREAM_KEY: ${{ secrets.GET_STREAM_KEY }}
  GET_STREAM_SECRET: ${{ secrets.GET_STREAM_SECRET }}
  GET_STREAM_TOKEN_EXPIRY_DAYS: ${{ secrets.GET_STREAM_TOKEN_EXPIRY_DAYS }}
  SURVEYS_SYSTEM_EMAIL: ${{ secrets.SURVEYS_SYSTEM_EMAIL }}
  SURVEYS_SYSTEM_PASSWORD: ${{ secrets.SURVEYS_SYSTEM_PASSWORD }}
  SURVEYS_BASE_URL: ${{ secrets.SURVEYS_BASE_URL }}
  CONSUMER_APP_IDENTIFIER: ${{ secrets.CONSUMER_APP_IDENTIFIER }}
  PRO_APP_IDENTIFIER: ${{ secrets.PRO_APP_IDENTIFIER }}
  CONSUMER_APP_NAME: ${{ secrets.CONSUMER_APP_NAME }}
  PRO_APP_NAME: ${{ secrets.PRO_APP_NAME }}
  SIL_COMMS_BASE_URL: ${{ secrets.SIL_COMMS_BASE_URL }}
  SIL_COMMS_EMAIL: ${{ secrets.SIL_COMMS_EMAIL }}
  SIL_COMMS_PASSWORD: ${{ secrets.SIL_COMMS_PASSWORD }}
  SIL_COMMS_SENDER_ID: ${{ secrets.SIL_COMMS_SENDER_ID }}
  TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
  TWILIO_ACCOUNT_AUTH_TOKEN: ${{ secrets.TWILIO_ACCOUNT_AUTH_TOKEN }}
  TWILIO_SMS_NUMBER: ${{ secrets.TWILIO_SMS_NUMBER }}
  DEFAULT_PROGRAM_ID: ${{ secrets.DEFAULT_PROGRAM_ID }}

concurrency:
  group: lint-and-test
jobs:
  lint_and_test:
    strategy:
      matrix:
        go-version: [1.18.x]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres                   
          POSTGRES_DB: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:       
      - uses: actions/checkout@v3.1.0
      - uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install Go dependencies
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.50.1
          go install github.com/kisielk/errcheck@latest
          go install honnef.co/go/tools/cmd/staticcheck@2022.1
          go install github.com/axw/gocov/gocov@latest
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          go install github.com/ory/go-acc@latest
          go get -u github.com/gordonklaus/ineffassign
          go get github.com/fzipp/gocyclo
          go get github.com/stretchr/testify/assert
          go install github.com/savannahghi/bewellcli@$CLI_VERSION
          go get golang.org/x/oauth2/internal
          go get gorm.io/driver/postgres
          go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@v4.15.2
      
      - name: Run migrations
        run: |
          export POSTGRESQL_URL="postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DB?sslmode=disable"
          migrate -database ${POSTGRESQL_URL} -path db/migrations up

      - name: Run lint and tests
        run: |
          staticcheck ./...
          bewellcli service validate-schema --name mycarehub --version $GITHUB_SHA --url ${{ secrets.SERVICE_GRAPHQL_URL }}
          go fmt $(go list ./... | grep -v /vendor/)
          go vet $(go list ./... | grep -v /vendor/)
          golangci-lint run
          errcheck -ignore 'os:.*,' $(go list ./... | grep -v /vendor/)
          gosec -exclude=G601,G304,G101 ./...
          go-acc -o coverage.txt --ignore generated,cmd,graph,tests  ./... -- -timeout 60m
          grep -v "generated.go" coverage.txt | grep -v "_gen.go" | grep -v "mocks.go" | grep -v "*mocks.go" | grep -v "mock.go" | grep -v "*mock.go" | grep -v "*resolvers*go" | grep -v "*.resolvers.go" | grep -v "server.go" > coverage.out
          go tool cover -html=coverage.out -o coverage.html
          gocov convert coverage.out > coverage.json
          gocov report coverage.json > coverage_report.txt
          tail coverage_report.txt

      - name: Install goveralls
        env:
          GO111MODULE: off
        run: go get github.com/mattn/goveralls
      - name: Send coverage
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: goveralls -coverprofile=coverage.out  -service=github

      - name: Quality Gate - Test coverage shall be above threshold
        env:
          TESTCOVERAGE_THRESHOLD: 80.0
        run: |
          bash scripts/coverage.sh

  acceptance_tests:
    strategy:
      matrix:
        go-version: [1.18.x]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres                   
          POSTGRES_DB: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:       
      - uses: actions/checkout@v3.1.0
      - uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install Go dependencies
        run: |
          go get github.com/stretchr/testify/assert
          go get golang.org/x/oauth2/internal
          go get gorm.io/driver/postgres
          go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@v4.15.2
      
      - name: Run migrations
        run: |
          export POSTGRESQL_URL="postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DB?sslmode=disable"
          migrate -database ${POSTGRESQL_URL} -path db/migrations up

      - name: Run acceptance tests
        run: |
          cd tests/
          go test -v ./... -timeout 60m